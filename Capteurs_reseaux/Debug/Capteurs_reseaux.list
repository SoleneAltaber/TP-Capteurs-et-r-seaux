
Capteurs_reseaux.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044d0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  080046a0  080046a0  000146a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047dc  080047dc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080047dc  080047dc  000147dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080047e4  080047e4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047e4  080047e4  000147e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047e8  080047e8  000147e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080047ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000070  0800485c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  0800485c  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c45a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d69  00000000  00000000  0002c4fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a50  00000000  00000000  0002e268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000990  00000000  00000000  0002ecb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000226a4  00000000  00000000  0002f648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e705  00000000  00000000  00051cec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cbfea  00000000  00000000  000603f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012c3db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000319c  00000000  00000000  0012c42c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004688 	.word	0x08004688

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08004688 	.word	0x08004688

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b08a      	sub	sp, #40	; 0x28
 80005b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ba:	f107 0314 	add.w	r3, r7, #20
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	605a      	str	r2, [r3, #4]
 80005c4:	609a      	str	r2, [r3, #8]
 80005c6:	60da      	str	r2, [r3, #12]
 80005c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ca:	2300      	movs	r3, #0
 80005cc:	613b      	str	r3, [r7, #16]
 80005ce:	4b2d      	ldr	r3, [pc, #180]	; (8000684 <MX_GPIO_Init+0xd0>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	4a2c      	ldr	r2, [pc, #176]	; (8000684 <MX_GPIO_Init+0xd0>)
 80005d4:	f043 0304 	orr.w	r3, r3, #4
 80005d8:	6313      	str	r3, [r2, #48]	; 0x30
 80005da:	4b2a      	ldr	r3, [pc, #168]	; (8000684 <MX_GPIO_Init+0xd0>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	f003 0304 	and.w	r3, r3, #4
 80005e2:	613b      	str	r3, [r7, #16]
 80005e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005e6:	2300      	movs	r3, #0
 80005e8:	60fb      	str	r3, [r7, #12]
 80005ea:	4b26      	ldr	r3, [pc, #152]	; (8000684 <MX_GPIO_Init+0xd0>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	4a25      	ldr	r2, [pc, #148]	; (8000684 <MX_GPIO_Init+0xd0>)
 80005f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005f4:	6313      	str	r3, [r2, #48]	; 0x30
 80005f6:	4b23      	ldr	r3, [pc, #140]	; (8000684 <MX_GPIO_Init+0xd0>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005fe:	60fb      	str	r3, [r7, #12]
 8000600:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000602:	2300      	movs	r3, #0
 8000604:	60bb      	str	r3, [r7, #8]
 8000606:	4b1f      	ldr	r3, [pc, #124]	; (8000684 <MX_GPIO_Init+0xd0>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	4a1e      	ldr	r2, [pc, #120]	; (8000684 <MX_GPIO_Init+0xd0>)
 800060c:	f043 0301 	orr.w	r3, r3, #1
 8000610:	6313      	str	r3, [r2, #48]	; 0x30
 8000612:	4b1c      	ldr	r3, [pc, #112]	; (8000684 <MX_GPIO_Init+0xd0>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	f003 0301 	and.w	r3, r3, #1
 800061a:	60bb      	str	r3, [r7, #8]
 800061c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800061e:	2300      	movs	r3, #0
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	4b18      	ldr	r3, [pc, #96]	; (8000684 <MX_GPIO_Init+0xd0>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	4a17      	ldr	r2, [pc, #92]	; (8000684 <MX_GPIO_Init+0xd0>)
 8000628:	f043 0302 	orr.w	r3, r3, #2
 800062c:	6313      	str	r3, [r2, #48]	; 0x30
 800062e:	4b15      	ldr	r3, [pc, #84]	; (8000684 <MX_GPIO_Init+0xd0>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	f003 0302 	and.w	r3, r3, #2
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800063a:	2200      	movs	r2, #0
 800063c:	2120      	movs	r1, #32
 800063e:	4812      	ldr	r0, [pc, #72]	; (8000688 <MX_GPIO_Init+0xd4>)
 8000640:	f000 fe68 	bl	8001314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000644:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000648:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800064a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800064e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000650:	2300      	movs	r3, #0
 8000652:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000654:	f107 0314 	add.w	r3, r7, #20
 8000658:	4619      	mov	r1, r3
 800065a:	480c      	ldr	r0, [pc, #48]	; (800068c <MX_GPIO_Init+0xd8>)
 800065c:	f000 fcc6 	bl	8000fec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000660:	2320      	movs	r3, #32
 8000662:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000664:	2301      	movs	r3, #1
 8000666:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000668:	2300      	movs	r3, #0
 800066a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066c:	2300      	movs	r3, #0
 800066e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000670:	f107 0314 	add.w	r3, r7, #20
 8000674:	4619      	mov	r1, r3
 8000676:	4804      	ldr	r0, [pc, #16]	; (8000688 <MX_GPIO_Init+0xd4>)
 8000678:	f000 fcb8 	bl	8000fec <HAL_GPIO_Init>

}
 800067c:	bf00      	nop
 800067e:	3728      	adds	r7, #40	; 0x28
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	40023800 	.word	0x40023800
 8000688:	40020000 	.word	0x40020000
 800068c:	40020800 	.word	0x40020800

08000690 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <MX_I2C1_Init+0x50>)
 8000696:	4a13      	ldr	r2, [pc, #76]	; (80006e4 <MX_I2C1_Init+0x54>)
 8000698:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800069a:	4b11      	ldr	r3, [pc, #68]	; (80006e0 <MX_I2C1_Init+0x50>)
 800069c:	4a12      	ldr	r2, [pc, #72]	; (80006e8 <MX_I2C1_Init+0x58>)
 800069e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <MX_I2C1_Init+0x50>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006a6:	4b0e      	ldr	r3, [pc, #56]	; (80006e0 <MX_I2C1_Init+0x50>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006ac:	4b0c      	ldr	r3, [pc, #48]	; (80006e0 <MX_I2C1_Init+0x50>)
 80006ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006b4:	4b0a      	ldr	r3, [pc, #40]	; (80006e0 <MX_I2C1_Init+0x50>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006ba:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <MX_I2C1_Init+0x50>)
 80006bc:	2200      	movs	r2, #0
 80006be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006c0:	4b07      	ldr	r3, [pc, #28]	; (80006e0 <MX_I2C1_Init+0x50>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006c6:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <MX_I2C1_Init+0x50>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006cc:	4804      	ldr	r0, [pc, #16]	; (80006e0 <MX_I2C1_Init+0x50>)
 80006ce:	f000 fe3b 	bl	8001348 <HAL_I2C_Init>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006d8:	f000 f962 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006dc:	bf00      	nop
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	2000008c 	.word	0x2000008c
 80006e4:	40005400 	.word	0x40005400
 80006e8:	000186a0 	.word	0x000186a0

080006ec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b08a      	sub	sp, #40	; 0x28
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f4:	f107 0314 	add.w	r3, r7, #20
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	605a      	str	r2, [r3, #4]
 80006fe:	609a      	str	r2, [r3, #8]
 8000700:	60da      	str	r2, [r3, #12]
 8000702:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a19      	ldr	r2, [pc, #100]	; (8000770 <HAL_I2C_MspInit+0x84>)
 800070a:	4293      	cmp	r3, r2
 800070c:	d12c      	bne.n	8000768 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	613b      	str	r3, [r7, #16]
 8000712:	4b18      	ldr	r3, [pc, #96]	; (8000774 <HAL_I2C_MspInit+0x88>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a17      	ldr	r2, [pc, #92]	; (8000774 <HAL_I2C_MspInit+0x88>)
 8000718:	f043 0302 	orr.w	r3, r3, #2
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b15      	ldr	r3, [pc, #84]	; (8000774 <HAL_I2C_MspInit+0x88>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f003 0302 	and.w	r3, r3, #2
 8000726:	613b      	str	r3, [r7, #16]
 8000728:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800072a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800072e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000730:	2312      	movs	r3, #18
 8000732:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000734:	2300      	movs	r3, #0
 8000736:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000738:	2303      	movs	r3, #3
 800073a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800073c:	2304      	movs	r3, #4
 800073e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000740:	f107 0314 	add.w	r3, r7, #20
 8000744:	4619      	mov	r1, r3
 8000746:	480c      	ldr	r0, [pc, #48]	; (8000778 <HAL_I2C_MspInit+0x8c>)
 8000748:	f000 fc50 	bl	8000fec <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800074c:	2300      	movs	r3, #0
 800074e:	60fb      	str	r3, [r7, #12]
 8000750:	4b08      	ldr	r3, [pc, #32]	; (8000774 <HAL_I2C_MspInit+0x88>)
 8000752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000754:	4a07      	ldr	r2, [pc, #28]	; (8000774 <HAL_I2C_MspInit+0x88>)
 8000756:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800075a:	6413      	str	r3, [r2, #64]	; 0x40
 800075c:	4b05      	ldr	r3, [pc, #20]	; (8000774 <HAL_I2C_MspInit+0x88>)
 800075e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000760:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000764:	60fb      	str	r3, [r7, #12]
 8000766:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000768:	bf00      	nop
 800076a:	3728      	adds	r7, #40	; 0x28
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	40005400 	.word	0x40005400
 8000774:	40023800 	.word	0x40023800
 8000778:	40020400 	.word	0x40020400

0800077c <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000784:	1d39      	adds	r1, r7, #4
 8000786:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800078a:	2201      	movs	r2, #1
 800078c:	4803      	ldr	r0, [pc, #12]	; (800079c <__io_putchar+0x20>)
 800078e:	f002 fbd0 	bl	8002f32 <HAL_UART_Transmit>
	return ch;
 8000792:	687b      	ldr	r3, [r7, #4]
}
 8000794:	4618      	mov	r0, r3
 8000796:	3708      	adds	r7, #8
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	200000e4 	.word	0x200000e4

080007a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b086      	sub	sp, #24
 80007a4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007a6:	f000 faa5 	bl	8000cf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007aa:	f000 f88b 	bl	80008c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ae:	f7ff ff01 	bl	80005b4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007b2:	f000 fa03 	bl	8000bbc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80007b6:	f7ff ff6b 	bl	8000690 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_I2C_Init(&hi2c1);
 80007ba:	483a      	ldr	r0, [pc, #232]	; (80008a4 <main+0x104>)
 80007bc:	f000 fdc4 	bl	8001348 <HAL_I2C_Init>
  uint8_t pData = 0b01010111; 				//!< "010" temp x2 sample "101" pres x16 sample "11" normal mode
 80007c0:	2357      	movs	r3, #87	; 0x57
 80007c2:	71fb      	strb	r3, [r7, #7]
  uint8_t Ident = 0;
 80007c4:	2300      	movs	r3, #0
 80007c6:	71bb      	strb	r3, [r7, #6]
  //uint8_t adata[3]={0};
  uint8_t adata1 = 0;
 80007c8:	2300      	movs	r3, #0
 80007ca:	717b      	strb	r3, [r7, #5]
  uint8_t adata2 = 0;
 80007cc:	2300      	movs	r3, #0
 80007ce:	713b      	strb	r3, [r7, #4]
  uint8_t adata3 = 0;
 80007d0:	2300      	movs	r3, #0
 80007d2:	70fb      	strb	r3, [r7, #3]
  if(HAL_OK != HAL_I2C_Mem_Read(&hi2c1, Slave_Add_BMP280 << 1, ID, 1, &Ident, sizeof(Ident), timeout)){
 80007d4:	2332      	movs	r3, #50	; 0x32
 80007d6:	9302      	str	r3, [sp, #8]
 80007d8:	2301      	movs	r3, #1
 80007da:	9301      	str	r3, [sp, #4]
 80007dc:	1dbb      	adds	r3, r7, #6
 80007de:	9300      	str	r3, [sp, #0]
 80007e0:	2301      	movs	r3, #1
 80007e2:	22d0      	movs	r2, #208	; 0xd0
 80007e4:	21ee      	movs	r1, #238	; 0xee
 80007e6:	482f      	ldr	r0, [pc, #188]	; (80008a4 <main+0x104>)
 80007e8:	f000 ffec 	bl	80017c4 <HAL_I2C_Mem_Read>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d002      	beq.n	80007f8 <main+0x58>
  	  printf("Error_ID\r\n");
 80007f2:	482d      	ldr	r0, [pc, #180]	; (80008a8 <main+0x108>)
 80007f4:	f002 ffca 	bl	800378c <puts>
    }
  printf("ID: %d\r\n",Ident);
 80007f8:	79bb      	ldrb	r3, [r7, #6]
 80007fa:	4619      	mov	r1, r3
 80007fc:	482b      	ldr	r0, [pc, #172]	; (80008ac <main+0x10c>)
 80007fe:	f002 ff3f 	bl	8003680 <iprintf>
  if(HAL_OK != HAL_I2C_Mem_Write(&hi2c1, Slave_Add_BMP280 << 1, ctrl_meas, 1, &pData, sizeof(pData), timeout)){
 8000802:	2332      	movs	r3, #50	; 0x32
 8000804:	9302      	str	r3, [sp, #8]
 8000806:	2301      	movs	r3, #1
 8000808:	9301      	str	r3, [sp, #4]
 800080a:	1dfb      	adds	r3, r7, #7
 800080c:	9300      	str	r3, [sp, #0]
 800080e:	2301      	movs	r3, #1
 8000810:	22f4      	movs	r2, #244	; 0xf4
 8000812:	21ee      	movs	r1, #238	; 0xee
 8000814:	4823      	ldr	r0, [pc, #140]	; (80008a4 <main+0x104>)
 8000816:	f000 fedb 	bl	80015d0 <HAL_I2C_Mem_Write>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d003      	beq.n	8000828 <main+0x88>
	  printf("Error_ctrl_meas\r\n");
 8000820:	4823      	ldr	r0, [pc, #140]	; (80008b0 <main+0x110>)
 8000822:	f002 ffb3 	bl	800378c <puts>
 8000826:	e002      	b.n	800082e <main+0x8e>
  }
  else {printf("All good, nothing to notice about ctrl_meas\r\n");}
 8000828:	4822      	ldr	r0, [pc, #136]	; (80008b4 <main+0x114>)
 800082a:	f002 ffaf 	bl	800378c <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_I2C_Mem_Read(&hi2c1, Slave_Add_BMP280 << 1, temp_msb, 1, &adata1, 1, timeout);
 800082e:	2332      	movs	r3, #50	; 0x32
 8000830:	9302      	str	r3, [sp, #8]
 8000832:	2301      	movs	r3, #1
 8000834:	9301      	str	r3, [sp, #4]
 8000836:	1d7b      	adds	r3, r7, #5
 8000838:	9300      	str	r3, [sp, #0]
 800083a:	2301      	movs	r3, #1
 800083c:	22fa      	movs	r2, #250	; 0xfa
 800083e:	21ee      	movs	r1, #238	; 0xee
 8000840:	4818      	ldr	r0, [pc, #96]	; (80008a4 <main+0x104>)
 8000842:	f000 ffbf 	bl	80017c4 <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(&hi2c1, Slave_Add_BMP280 << 1, temp_lsb, 1, &adata2, 1, timeout);
 8000846:	2332      	movs	r3, #50	; 0x32
 8000848:	9302      	str	r3, [sp, #8]
 800084a:	2301      	movs	r3, #1
 800084c:	9301      	str	r3, [sp, #4]
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	9300      	str	r3, [sp, #0]
 8000852:	2301      	movs	r3, #1
 8000854:	22fb      	movs	r2, #251	; 0xfb
 8000856:	21ee      	movs	r1, #238	; 0xee
 8000858:	4812      	ldr	r0, [pc, #72]	; (80008a4 <main+0x104>)
 800085a:	f000 ffb3 	bl	80017c4 <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(&hi2c1, Slave_Add_BMP280 << 1, temp_xlsb, 1, &adata3, 1, timeout);
 800085e:	2332      	movs	r3, #50	; 0x32
 8000860:	9302      	str	r3, [sp, #8]
 8000862:	2301      	movs	r3, #1
 8000864:	9301      	str	r3, [sp, #4]
 8000866:	1cfb      	adds	r3, r7, #3
 8000868:	9300      	str	r3, [sp, #0]
 800086a:	2301      	movs	r3, #1
 800086c:	22fc      	movs	r2, #252	; 0xfc
 800086e:	21ee      	movs	r1, #238	; 0xee
 8000870:	480c      	ldr	r0, [pc, #48]	; (80008a4 <main+0x104>)
 8000872:	f000 ffa7 	bl	80017c4 <HAL_I2C_Mem_Read>

	  HAL_Delay(100);
 8000876:	2064      	movs	r0, #100	; 0x64
 8000878:	f000 faae 	bl	8000dd8 <HAL_Delay>
	  printf("data 0 :%d\r\n",adata1);
 800087c:	797b      	ldrb	r3, [r7, #5]
 800087e:	4619      	mov	r1, r3
 8000880:	480d      	ldr	r0, [pc, #52]	; (80008b8 <main+0x118>)
 8000882:	f002 fefd 	bl	8003680 <iprintf>
	  printf("data 1 :%d\r\n",adata2);
 8000886:	793b      	ldrb	r3, [r7, #4]
 8000888:	4619      	mov	r1, r3
 800088a:	480c      	ldr	r0, [pc, #48]	; (80008bc <main+0x11c>)
 800088c:	f002 fef8 	bl	8003680 <iprintf>
	  printf("data 2 :%d\r\n",adata3);
 8000890:	78fb      	ldrb	r3, [r7, #3]
 8000892:	4619      	mov	r1, r3
 8000894:	480a      	ldr	r0, [pc, #40]	; (80008c0 <main+0x120>)
 8000896:	f002 fef3 	bl	8003680 <iprintf>
	  HAL_Delay(100);
 800089a:	2064      	movs	r0, #100	; 0x64
 800089c:	f000 fa9c 	bl	8000dd8 <HAL_Delay>
	  HAL_I2C_Mem_Read(&hi2c1, Slave_Add_BMP280 << 1, temp_msb, 1, &adata1, 1, timeout);
 80008a0:	e7c5      	b.n	800082e <main+0x8e>
 80008a2:	bf00      	nop
 80008a4:	2000008c 	.word	0x2000008c
 80008a8:	080046a0 	.word	0x080046a0
 80008ac:	080046ac 	.word	0x080046ac
 80008b0:	080046b8 	.word	0x080046b8
 80008b4:	080046cc 	.word	0x080046cc
 80008b8:	080046fc 	.word	0x080046fc
 80008bc:	0800470c 	.word	0x0800470c
 80008c0:	0800471c 	.word	0x0800471c

080008c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b094      	sub	sp, #80	; 0x50
 80008c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ca:	f107 031c 	add.w	r3, r7, #28
 80008ce:	2234      	movs	r2, #52	; 0x34
 80008d0:	2100      	movs	r1, #0
 80008d2:	4618      	mov	r0, r3
 80008d4:	f002 fecc 	bl	8003670 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d8:	f107 0308 	add.w	r3, r7, #8
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	605a      	str	r2, [r3, #4]
 80008e2:	609a      	str	r2, [r3, #8]
 80008e4:	60da      	str	r2, [r3, #12]
 80008e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e8:	2300      	movs	r3, #0
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	4b2a      	ldr	r3, [pc, #168]	; (8000998 <SystemClock_Config+0xd4>)
 80008ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f0:	4a29      	ldr	r2, [pc, #164]	; (8000998 <SystemClock_Config+0xd4>)
 80008f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f6:	6413      	str	r3, [r2, #64]	; 0x40
 80008f8:	4b27      	ldr	r3, [pc, #156]	; (8000998 <SystemClock_Config+0xd4>)
 80008fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000900:	607b      	str	r3, [r7, #4]
 8000902:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000904:	2300      	movs	r3, #0
 8000906:	603b      	str	r3, [r7, #0]
 8000908:	4b24      	ldr	r3, [pc, #144]	; (800099c <SystemClock_Config+0xd8>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000910:	4a22      	ldr	r2, [pc, #136]	; (800099c <SystemClock_Config+0xd8>)
 8000912:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000916:	6013      	str	r3, [r2, #0]
 8000918:	4b20      	ldr	r3, [pc, #128]	; (800099c <SystemClock_Config+0xd8>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000920:	603b      	str	r3, [r7, #0]
 8000922:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000924:	2302      	movs	r3, #2
 8000926:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000928:	2301      	movs	r3, #1
 800092a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800092c:	2310      	movs	r3, #16
 800092e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000930:	2302      	movs	r3, #2
 8000932:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000934:	2300      	movs	r3, #0
 8000936:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000938:	2310      	movs	r3, #16
 800093a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800093c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000940:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000942:	2304      	movs	r3, #4
 8000944:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000946:	2302      	movs	r3, #2
 8000948:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800094a:	2302      	movs	r3, #2
 800094c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800094e:	f107 031c 	add.w	r3, r7, #28
 8000952:	4618      	mov	r0, r3
 8000954:	f002 f802 	bl	800295c <HAL_RCC_OscConfig>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800095e:	f000 f81f 	bl	80009a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000962:	230f      	movs	r3, #15
 8000964:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000966:	2302      	movs	r3, #2
 8000968:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800096a:	2300      	movs	r3, #0
 800096c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800096e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000972:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000974:	2300      	movs	r3, #0
 8000976:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000978:	f107 0308 	add.w	r3, r7, #8
 800097c:	2102      	movs	r1, #2
 800097e:	4618      	mov	r0, r3
 8000980:	f001 fca2 	bl	80022c8 <HAL_RCC_ClockConfig>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800098a:	f000 f809 	bl	80009a0 <Error_Handler>
  }
}
 800098e:	bf00      	nop
 8000990:	3750      	adds	r7, #80	; 0x50
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40023800 	.word	0x40023800
 800099c:	40007000 	.word	0x40007000

080009a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a4:	b672      	cpsid	i
}
 80009a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009a8:	e7fe      	b.n	80009a8 <Error_Handler+0x8>
	...

080009ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	607b      	str	r3, [r7, #4]
 80009b6:	4b10      	ldr	r3, [pc, #64]	; (80009f8 <HAL_MspInit+0x4c>)
 80009b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ba:	4a0f      	ldr	r2, [pc, #60]	; (80009f8 <HAL_MspInit+0x4c>)
 80009bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009c0:	6453      	str	r3, [r2, #68]	; 0x44
 80009c2:	4b0d      	ldr	r3, [pc, #52]	; (80009f8 <HAL_MspInit+0x4c>)
 80009c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ca:	607b      	str	r3, [r7, #4]
 80009cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	603b      	str	r3, [r7, #0]
 80009d2:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <HAL_MspInit+0x4c>)
 80009d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d6:	4a08      	ldr	r2, [pc, #32]	; (80009f8 <HAL_MspInit+0x4c>)
 80009d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009dc:	6413      	str	r3, [r2, #64]	; 0x40
 80009de:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <HAL_MspInit+0x4c>)
 80009e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009e6:	603b      	str	r3, [r7, #0]
 80009e8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009ea:	2007      	movs	r0, #7
 80009ec:	f000 faca 	bl	8000f84 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009f0:	bf00      	nop
 80009f2:	3708      	adds	r7, #8
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	40023800 	.word	0x40023800

080009fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a00:	e7fe      	b.n	8000a00 <NMI_Handler+0x4>

08000a02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a02:	b480      	push	{r7}
 8000a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a06:	e7fe      	b.n	8000a06 <HardFault_Handler+0x4>

08000a08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <MemManage_Handler+0x4>

08000a0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a12:	e7fe      	b.n	8000a12 <BusFault_Handler+0x4>

08000a14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <UsageFault_Handler+0x4>

08000a1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr

08000a28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr

08000a36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a36:	b480      	push	{r7}
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr

08000a44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a48:	f000 f9a6 	bl	8000d98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a4c:	bf00      	nop
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b086      	sub	sp, #24
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	60f8      	str	r0, [r7, #12]
 8000a58:	60b9      	str	r1, [r7, #8]
 8000a5a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	617b      	str	r3, [r7, #20]
 8000a60:	e00a      	b.n	8000a78 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a62:	f3af 8000 	nop.w
 8000a66:	4601      	mov	r1, r0
 8000a68:	68bb      	ldr	r3, [r7, #8]
 8000a6a:	1c5a      	adds	r2, r3, #1
 8000a6c:	60ba      	str	r2, [r7, #8]
 8000a6e:	b2ca      	uxtb	r2, r1
 8000a70:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	3301      	adds	r3, #1
 8000a76:	617b      	str	r3, [r7, #20]
 8000a78:	697a      	ldr	r2, [r7, #20]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	dbf0      	blt.n	8000a62 <_read+0x12>
	}

return len;
 8000a80:	687b      	ldr	r3, [r7, #4]
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3718      	adds	r7, #24
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}

08000a8a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	b086      	sub	sp, #24
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	60f8      	str	r0, [r7, #12]
 8000a92:	60b9      	str	r1, [r7, #8]
 8000a94:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a96:	2300      	movs	r3, #0
 8000a98:	617b      	str	r3, [r7, #20]
 8000a9a:	e009      	b.n	8000ab0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	1c5a      	adds	r2, r3, #1
 8000aa0:	60ba      	str	r2, [r7, #8]
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff fe69 	bl	800077c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aaa:	697b      	ldr	r3, [r7, #20]
 8000aac:	3301      	adds	r3, #1
 8000aae:	617b      	str	r3, [r7, #20]
 8000ab0:	697a      	ldr	r2, [r7, #20]
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	dbf1      	blt.n	8000a9c <_write+0x12>
	}
	return len;
 8000ab8:	687b      	ldr	r3, [r7, #4]
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3718      	adds	r7, #24
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}

08000ac2 <_close>:

int _close(int file)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	b083      	sub	sp, #12
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	6078      	str	r0, [r7, #4]
	return -1;
 8000aca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr

08000ada <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ada:	b480      	push	{r7}
 8000adc:	b083      	sub	sp, #12
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	6078      	str	r0, [r7, #4]
 8000ae2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000aea:	605a      	str	r2, [r3, #4]
	return 0;
 8000aec:	2300      	movs	r3, #0
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr

08000afa <_isatty>:

int _isatty(int file)
{
 8000afa:	b480      	push	{r7}
 8000afc:	b083      	sub	sp, #12
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
	return 1;
 8000b02:	2301      	movs	r3, #1
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	370c      	adds	r7, #12
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr

08000b10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b085      	sub	sp, #20
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	60f8      	str	r0, [r7, #12]
 8000b18:	60b9      	str	r1, [r7, #8]
 8000b1a:	607a      	str	r2, [r7, #4]
	return 0;
 8000b1c:	2300      	movs	r3, #0
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3714      	adds	r7, #20
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
	...

08000b2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b086      	sub	sp, #24
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b34:	4a14      	ldr	r2, [pc, #80]	; (8000b88 <_sbrk+0x5c>)
 8000b36:	4b15      	ldr	r3, [pc, #84]	; (8000b8c <_sbrk+0x60>)
 8000b38:	1ad3      	subs	r3, r2, r3
 8000b3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b40:	4b13      	ldr	r3, [pc, #76]	; (8000b90 <_sbrk+0x64>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d102      	bne.n	8000b4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b48:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <_sbrk+0x64>)
 8000b4a:	4a12      	ldr	r2, [pc, #72]	; (8000b94 <_sbrk+0x68>)
 8000b4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b4e:	4b10      	ldr	r3, [pc, #64]	; (8000b90 <_sbrk+0x64>)
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	4413      	add	r3, r2
 8000b56:	693a      	ldr	r2, [r7, #16]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	d207      	bcs.n	8000b6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b5c:	f002 fd5e 	bl	800361c <__errno>
 8000b60:	4603      	mov	r3, r0
 8000b62:	220c      	movs	r2, #12
 8000b64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b66:	f04f 33ff 	mov.w	r3, #4294967295
 8000b6a:	e009      	b.n	8000b80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b6c:	4b08      	ldr	r3, [pc, #32]	; (8000b90 <_sbrk+0x64>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b72:	4b07      	ldr	r3, [pc, #28]	; (8000b90 <_sbrk+0x64>)
 8000b74:	681a      	ldr	r2, [r3, #0]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	4413      	add	r3, r2
 8000b7a:	4a05      	ldr	r2, [pc, #20]	; (8000b90 <_sbrk+0x64>)
 8000b7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b7e:	68fb      	ldr	r3, [r7, #12]
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3718      	adds	r7, #24
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	20020000 	.word	0x20020000
 8000b8c:	00000400 	.word	0x00000400
 8000b90:	200000e0 	.word	0x200000e0
 8000b94:	20000140 	.word	0x20000140

08000b98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b9c:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <SystemInit+0x20>)
 8000b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ba2:	4a05      	ldr	r2, [pc, #20]	; (8000bb8 <SystemInit+0x20>)
 8000ba4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ba8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	e000ed00 	.word	0xe000ed00

08000bbc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bc0:	4b11      	ldr	r3, [pc, #68]	; (8000c08 <MX_USART2_UART_Init+0x4c>)
 8000bc2:	4a12      	ldr	r2, [pc, #72]	; (8000c0c <MX_USART2_UART_Init+0x50>)
 8000bc4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bc6:	4b10      	ldr	r3, [pc, #64]	; (8000c08 <MX_USART2_UART_Init+0x4c>)
 8000bc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bcc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bce:	4b0e      	ldr	r3, [pc, #56]	; (8000c08 <MX_USART2_UART_Init+0x4c>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bd4:	4b0c      	ldr	r3, [pc, #48]	; (8000c08 <MX_USART2_UART_Init+0x4c>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bda:	4b0b      	ldr	r3, [pc, #44]	; (8000c08 <MX_USART2_UART_Init+0x4c>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000be0:	4b09      	ldr	r3, [pc, #36]	; (8000c08 <MX_USART2_UART_Init+0x4c>)
 8000be2:	220c      	movs	r2, #12
 8000be4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000be6:	4b08      	ldr	r3, [pc, #32]	; (8000c08 <MX_USART2_UART_Init+0x4c>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bec:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <MX_USART2_UART_Init+0x4c>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bf2:	4805      	ldr	r0, [pc, #20]	; (8000c08 <MX_USART2_UART_Init+0x4c>)
 8000bf4:	f002 f950 	bl	8002e98 <HAL_UART_Init>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000bfe:	f7ff fecf 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	200000e4 	.word	0x200000e4
 8000c0c:	40004400 	.word	0x40004400

08000c10 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b08a      	sub	sp, #40	; 0x28
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c18:	f107 0314 	add.w	r3, r7, #20
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	605a      	str	r2, [r3, #4]
 8000c22:	609a      	str	r2, [r3, #8]
 8000c24:	60da      	str	r2, [r3, #12]
 8000c26:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a19      	ldr	r2, [pc, #100]	; (8000c94 <HAL_UART_MspInit+0x84>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d12b      	bne.n	8000c8a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	613b      	str	r3, [r7, #16]
 8000c36:	4b18      	ldr	r3, [pc, #96]	; (8000c98 <HAL_UART_MspInit+0x88>)
 8000c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3a:	4a17      	ldr	r2, [pc, #92]	; (8000c98 <HAL_UART_MspInit+0x88>)
 8000c3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c40:	6413      	str	r3, [r2, #64]	; 0x40
 8000c42:	4b15      	ldr	r3, [pc, #84]	; (8000c98 <HAL_UART_MspInit+0x88>)
 8000c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c4a:	613b      	str	r3, [r7, #16]
 8000c4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	4b11      	ldr	r3, [pc, #68]	; (8000c98 <HAL_UART_MspInit+0x88>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	4a10      	ldr	r2, [pc, #64]	; (8000c98 <HAL_UART_MspInit+0x88>)
 8000c58:	f043 0301 	orr.w	r3, r3, #1
 8000c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5e:	4b0e      	ldr	r3, [pc, #56]	; (8000c98 <HAL_UART_MspInit+0x88>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	f003 0301 	and.w	r3, r3, #1
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c6a:	230c      	movs	r3, #12
 8000c6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c76:	2303      	movs	r3, #3
 8000c78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c7a:	2307      	movs	r3, #7
 8000c7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7e:	f107 0314 	add.w	r3, r7, #20
 8000c82:	4619      	mov	r1, r3
 8000c84:	4805      	ldr	r0, [pc, #20]	; (8000c9c <HAL_UART_MspInit+0x8c>)
 8000c86:	f000 f9b1 	bl	8000fec <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000c8a:	bf00      	nop
 8000c8c:	3728      	adds	r7, #40	; 0x28
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40004400 	.word	0x40004400
 8000c98:	40023800 	.word	0x40023800
 8000c9c:	40020000 	.word	0x40020000

08000ca0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ca0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cd8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ca4:	480d      	ldr	r0, [pc, #52]	; (8000cdc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ca6:	490e      	ldr	r1, [pc, #56]	; (8000ce0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ca8:	4a0e      	ldr	r2, [pc, #56]	; (8000ce4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000caa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cac:	e002      	b.n	8000cb4 <LoopCopyDataInit>

08000cae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cb2:	3304      	adds	r3, #4

08000cb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cb8:	d3f9      	bcc.n	8000cae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cba:	4a0b      	ldr	r2, [pc, #44]	; (8000ce8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cbc:	4c0b      	ldr	r4, [pc, #44]	; (8000cec <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cc0:	e001      	b.n	8000cc6 <LoopFillZerobss>

08000cc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cc4:	3204      	adds	r2, #4

08000cc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cc8:	d3fb      	bcc.n	8000cc2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cca:	f7ff ff65 	bl	8000b98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cce:	f002 fcab 	bl	8003628 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cd2:	f7ff fd65 	bl	80007a0 <main>
  bx  lr    
 8000cd6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cd8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ce0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ce4:	080047ec 	.word	0x080047ec
  ldr r2, =_sbss
 8000ce8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000cec:	2000013c 	.word	0x2000013c

08000cf0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cf0:	e7fe      	b.n	8000cf0 <ADC_IRQHandler>
	...

08000cf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cf8:	4b0e      	ldr	r3, [pc, #56]	; (8000d34 <HAL_Init+0x40>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a0d      	ldr	r2, [pc, #52]	; (8000d34 <HAL_Init+0x40>)
 8000cfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d04:	4b0b      	ldr	r3, [pc, #44]	; (8000d34 <HAL_Init+0x40>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a0a      	ldr	r2, [pc, #40]	; (8000d34 <HAL_Init+0x40>)
 8000d0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d10:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <HAL_Init+0x40>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a07      	ldr	r2, [pc, #28]	; (8000d34 <HAL_Init+0x40>)
 8000d16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d1c:	2003      	movs	r0, #3
 8000d1e:	f000 f931 	bl	8000f84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d22:	2000      	movs	r0, #0
 8000d24:	f000 f808 	bl	8000d38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d28:	f7ff fe40 	bl	80009ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d2c:	2300      	movs	r3, #0
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40023c00 	.word	0x40023c00

08000d38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d40:	4b12      	ldr	r3, [pc, #72]	; (8000d8c <HAL_InitTick+0x54>)
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	4b12      	ldr	r3, [pc, #72]	; (8000d90 <HAL_InitTick+0x58>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	4619      	mov	r1, r3
 8000d4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d56:	4618      	mov	r0, r3
 8000d58:	f000 f93b 	bl	8000fd2 <HAL_SYSTICK_Config>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	e00e      	b.n	8000d84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2b0f      	cmp	r3, #15
 8000d6a:	d80a      	bhi.n	8000d82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	6879      	ldr	r1, [r7, #4]
 8000d70:	f04f 30ff 	mov.w	r0, #4294967295
 8000d74:	f000 f911 	bl	8000f9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d78:	4a06      	ldr	r2, [pc, #24]	; (8000d94 <HAL_InitTick+0x5c>)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	e000      	b.n	8000d84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3708      	adds	r7, #8
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	20000000 	.word	0x20000000
 8000d90:	20000008 	.word	0x20000008
 8000d94:	20000004 	.word	0x20000004

08000d98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d9c:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <HAL_IncTick+0x20>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	461a      	mov	r2, r3
 8000da2:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <HAL_IncTick+0x24>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4413      	add	r3, r2
 8000da8:	4a04      	ldr	r2, [pc, #16]	; (8000dbc <HAL_IncTick+0x24>)
 8000daa:	6013      	str	r3, [r2, #0]
}
 8000dac:	bf00      	nop
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	20000008 	.word	0x20000008
 8000dbc:	20000128 	.word	0x20000128

08000dc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000dc4:	4b03      	ldr	r3, [pc, #12]	; (8000dd4 <HAL_GetTick+0x14>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	20000128 	.word	0x20000128

08000dd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000de0:	f7ff ffee 	bl	8000dc0 <HAL_GetTick>
 8000de4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000df0:	d005      	beq.n	8000dfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000df2:	4b0a      	ldr	r3, [pc, #40]	; (8000e1c <HAL_Delay+0x44>)
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	461a      	mov	r2, r3
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dfe:	bf00      	nop
 8000e00:	f7ff ffde 	bl	8000dc0 <HAL_GetTick>
 8000e04:	4602      	mov	r2, r0
 8000e06:	68bb      	ldr	r3, [r7, #8]
 8000e08:	1ad3      	subs	r3, r2, r3
 8000e0a:	68fa      	ldr	r2, [r7, #12]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d8f7      	bhi.n	8000e00 <HAL_Delay+0x28>
  {
  }
}
 8000e10:	bf00      	nop
 8000e12:	bf00      	nop
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20000008 	.word	0x20000008

08000e20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b085      	sub	sp, #20
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	f003 0307 	and.w	r3, r3, #7
 8000e2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e30:	4b0c      	ldr	r3, [pc, #48]	; (8000e64 <__NVIC_SetPriorityGrouping+0x44>)
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e36:	68ba      	ldr	r2, [r7, #8]
 8000e38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e52:	4a04      	ldr	r2, [pc, #16]	; (8000e64 <__NVIC_SetPriorityGrouping+0x44>)
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	60d3      	str	r3, [r2, #12]
}
 8000e58:	bf00      	nop
 8000e5a:	3714      	adds	r7, #20
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e6c:	4b04      	ldr	r3, [pc, #16]	; (8000e80 <__NVIC_GetPriorityGrouping+0x18>)
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	0a1b      	lsrs	r3, r3, #8
 8000e72:	f003 0307 	and.w	r3, r3, #7
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr
 8000e80:	e000ed00 	.word	0xe000ed00

08000e84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	6039      	str	r1, [r7, #0]
 8000e8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	db0a      	blt.n	8000eae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	b2da      	uxtb	r2, r3
 8000e9c:	490c      	ldr	r1, [pc, #48]	; (8000ed0 <__NVIC_SetPriority+0x4c>)
 8000e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea2:	0112      	lsls	r2, r2, #4
 8000ea4:	b2d2      	uxtb	r2, r2
 8000ea6:	440b      	add	r3, r1
 8000ea8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000eac:	e00a      	b.n	8000ec4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	b2da      	uxtb	r2, r3
 8000eb2:	4908      	ldr	r1, [pc, #32]	; (8000ed4 <__NVIC_SetPriority+0x50>)
 8000eb4:	79fb      	ldrb	r3, [r7, #7]
 8000eb6:	f003 030f 	and.w	r3, r3, #15
 8000eba:	3b04      	subs	r3, #4
 8000ebc:	0112      	lsls	r2, r2, #4
 8000ebe:	b2d2      	uxtb	r2, r2
 8000ec0:	440b      	add	r3, r1
 8000ec2:	761a      	strb	r2, [r3, #24]
}
 8000ec4:	bf00      	nop
 8000ec6:	370c      	adds	r7, #12
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr
 8000ed0:	e000e100 	.word	0xe000e100
 8000ed4:	e000ed00 	.word	0xe000ed00

08000ed8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b089      	sub	sp, #36	; 0x24
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	60f8      	str	r0, [r7, #12]
 8000ee0:	60b9      	str	r1, [r7, #8]
 8000ee2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	f003 0307 	and.w	r3, r3, #7
 8000eea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	f1c3 0307 	rsb	r3, r3, #7
 8000ef2:	2b04      	cmp	r3, #4
 8000ef4:	bf28      	it	cs
 8000ef6:	2304      	movcs	r3, #4
 8000ef8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	3304      	adds	r3, #4
 8000efe:	2b06      	cmp	r3, #6
 8000f00:	d902      	bls.n	8000f08 <NVIC_EncodePriority+0x30>
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	3b03      	subs	r3, #3
 8000f06:	e000      	b.n	8000f0a <NVIC_EncodePriority+0x32>
 8000f08:	2300      	movs	r3, #0
 8000f0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f10:	69bb      	ldr	r3, [r7, #24]
 8000f12:	fa02 f303 	lsl.w	r3, r2, r3
 8000f16:	43da      	mvns	r2, r3
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	401a      	ands	r2, r3
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f20:	f04f 31ff 	mov.w	r1, #4294967295
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	fa01 f303 	lsl.w	r3, r1, r3
 8000f2a:	43d9      	mvns	r1, r3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f30:	4313      	orrs	r3, r2
         );
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3724      	adds	r7, #36	; 0x24
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
	...

08000f40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	3b01      	subs	r3, #1
 8000f4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f50:	d301      	bcc.n	8000f56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f52:	2301      	movs	r3, #1
 8000f54:	e00f      	b.n	8000f76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f56:	4a0a      	ldr	r2, [pc, #40]	; (8000f80 <SysTick_Config+0x40>)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	3b01      	subs	r3, #1
 8000f5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f5e:	210f      	movs	r1, #15
 8000f60:	f04f 30ff 	mov.w	r0, #4294967295
 8000f64:	f7ff ff8e 	bl	8000e84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f68:	4b05      	ldr	r3, [pc, #20]	; (8000f80 <SysTick_Config+0x40>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f6e:	4b04      	ldr	r3, [pc, #16]	; (8000f80 <SysTick_Config+0x40>)
 8000f70:	2207      	movs	r2, #7
 8000f72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f74:	2300      	movs	r3, #0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	e000e010 	.word	0xe000e010

08000f84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f8c:	6878      	ldr	r0, [r7, #4]
 8000f8e:	f7ff ff47 	bl	8000e20 <__NVIC_SetPriorityGrouping>
}
 8000f92:	bf00      	nop
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b086      	sub	sp, #24
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	60b9      	str	r1, [r7, #8]
 8000fa4:	607a      	str	r2, [r7, #4]
 8000fa6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fac:	f7ff ff5c 	bl	8000e68 <__NVIC_GetPriorityGrouping>
 8000fb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fb2:	687a      	ldr	r2, [r7, #4]
 8000fb4:	68b9      	ldr	r1, [r7, #8]
 8000fb6:	6978      	ldr	r0, [r7, #20]
 8000fb8:	f7ff ff8e 	bl	8000ed8 <NVIC_EncodePriority>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fc2:	4611      	mov	r1, r2
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff ff5d 	bl	8000e84 <__NVIC_SetPriority>
}
 8000fca:	bf00      	nop
 8000fcc:	3718      	adds	r7, #24
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b082      	sub	sp, #8
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f7ff ffb0 	bl	8000f40 <SysTick_Config>
 8000fe0:	4603      	mov	r3, r0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
	...

08000fec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b089      	sub	sp, #36	; 0x24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ffe:	2300      	movs	r3, #0
 8001000:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001002:	2300      	movs	r3, #0
 8001004:	61fb      	str	r3, [r7, #28]
 8001006:	e165      	b.n	80012d4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001008:	2201      	movs	r2, #1
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	697a      	ldr	r2, [r7, #20]
 8001018:	4013      	ands	r3, r2
 800101a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	429a      	cmp	r2, r3
 8001022:	f040 8154 	bne.w	80012ce <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f003 0303 	and.w	r3, r3, #3
 800102e:	2b01      	cmp	r3, #1
 8001030:	d005      	beq.n	800103e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800103a:	2b02      	cmp	r3, #2
 800103c:	d130      	bne.n	80010a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	2203      	movs	r2, #3
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	43db      	mvns	r3, r3
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	4013      	ands	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	68da      	ldr	r2, [r3, #12]
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4313      	orrs	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001074:	2201      	movs	r2, #1
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	43db      	mvns	r3, r3
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	4013      	ands	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	091b      	lsrs	r3, r3, #4
 800108a:	f003 0201 	and.w	r2, r3, #1
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	4313      	orrs	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f003 0303 	and.w	r3, r3, #3
 80010a8:	2b03      	cmp	r3, #3
 80010aa:	d017      	beq.n	80010dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	2203      	movs	r2, #3
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	43db      	mvns	r3, r3
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	4013      	ands	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	689a      	ldr	r2, [r3, #8]
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f003 0303 	and.w	r3, r3, #3
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	d123      	bne.n	8001130 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	08da      	lsrs	r2, r3, #3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	3208      	adds	r2, #8
 80010f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	f003 0307 	and.w	r3, r3, #7
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	220f      	movs	r2, #15
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	43db      	mvns	r3, r3
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	4013      	ands	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	691a      	ldr	r2, [r3, #16]
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	f003 0307 	and.w	r3, r3, #7
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	4313      	orrs	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	08da      	lsrs	r2, r3, #3
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	3208      	adds	r2, #8
 800112a:	69b9      	ldr	r1, [r7, #24]
 800112c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	2203      	movs	r2, #3
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	43db      	mvns	r3, r3
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	4013      	ands	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f003 0203 	and.w	r2, r3, #3
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	4313      	orrs	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800116c:	2b00      	cmp	r3, #0
 800116e:	f000 80ae 	beq.w	80012ce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	60fb      	str	r3, [r7, #12]
 8001176:	4b5d      	ldr	r3, [pc, #372]	; (80012ec <HAL_GPIO_Init+0x300>)
 8001178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117a:	4a5c      	ldr	r2, [pc, #368]	; (80012ec <HAL_GPIO_Init+0x300>)
 800117c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001180:	6453      	str	r3, [r2, #68]	; 0x44
 8001182:	4b5a      	ldr	r3, [pc, #360]	; (80012ec <HAL_GPIO_Init+0x300>)
 8001184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001186:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800118e:	4a58      	ldr	r2, [pc, #352]	; (80012f0 <HAL_GPIO_Init+0x304>)
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	089b      	lsrs	r3, r3, #2
 8001194:	3302      	adds	r3, #2
 8001196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800119a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	f003 0303 	and.w	r3, r3, #3
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	220f      	movs	r2, #15
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	43db      	mvns	r3, r3
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	4013      	ands	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a4f      	ldr	r2, [pc, #316]	; (80012f4 <HAL_GPIO_Init+0x308>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d025      	beq.n	8001206 <HAL_GPIO_Init+0x21a>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a4e      	ldr	r2, [pc, #312]	; (80012f8 <HAL_GPIO_Init+0x30c>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d01f      	beq.n	8001202 <HAL_GPIO_Init+0x216>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a4d      	ldr	r2, [pc, #308]	; (80012fc <HAL_GPIO_Init+0x310>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d019      	beq.n	80011fe <HAL_GPIO_Init+0x212>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a4c      	ldr	r2, [pc, #304]	; (8001300 <HAL_GPIO_Init+0x314>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d013      	beq.n	80011fa <HAL_GPIO_Init+0x20e>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a4b      	ldr	r2, [pc, #300]	; (8001304 <HAL_GPIO_Init+0x318>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d00d      	beq.n	80011f6 <HAL_GPIO_Init+0x20a>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a4a      	ldr	r2, [pc, #296]	; (8001308 <HAL_GPIO_Init+0x31c>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d007      	beq.n	80011f2 <HAL_GPIO_Init+0x206>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a49      	ldr	r2, [pc, #292]	; (800130c <HAL_GPIO_Init+0x320>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d101      	bne.n	80011ee <HAL_GPIO_Init+0x202>
 80011ea:	2306      	movs	r3, #6
 80011ec:	e00c      	b.n	8001208 <HAL_GPIO_Init+0x21c>
 80011ee:	2307      	movs	r3, #7
 80011f0:	e00a      	b.n	8001208 <HAL_GPIO_Init+0x21c>
 80011f2:	2305      	movs	r3, #5
 80011f4:	e008      	b.n	8001208 <HAL_GPIO_Init+0x21c>
 80011f6:	2304      	movs	r3, #4
 80011f8:	e006      	b.n	8001208 <HAL_GPIO_Init+0x21c>
 80011fa:	2303      	movs	r3, #3
 80011fc:	e004      	b.n	8001208 <HAL_GPIO_Init+0x21c>
 80011fe:	2302      	movs	r3, #2
 8001200:	e002      	b.n	8001208 <HAL_GPIO_Init+0x21c>
 8001202:	2301      	movs	r3, #1
 8001204:	e000      	b.n	8001208 <HAL_GPIO_Init+0x21c>
 8001206:	2300      	movs	r3, #0
 8001208:	69fa      	ldr	r2, [r7, #28]
 800120a:	f002 0203 	and.w	r2, r2, #3
 800120e:	0092      	lsls	r2, r2, #2
 8001210:	4093      	lsls	r3, r2
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4313      	orrs	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001218:	4935      	ldr	r1, [pc, #212]	; (80012f0 <HAL_GPIO_Init+0x304>)
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	089b      	lsrs	r3, r3, #2
 800121e:	3302      	adds	r3, #2
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001226:	4b3a      	ldr	r3, [pc, #232]	; (8001310 <HAL_GPIO_Init+0x324>)
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	43db      	mvns	r3, r3
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	4013      	ands	r3, r2
 8001234:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800123e:	2b00      	cmp	r3, #0
 8001240:	d003      	beq.n	800124a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001242:	69ba      	ldr	r2, [r7, #24]
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	4313      	orrs	r3, r2
 8001248:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800124a:	4a31      	ldr	r2, [pc, #196]	; (8001310 <HAL_GPIO_Init+0x324>)
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001250:	4b2f      	ldr	r3, [pc, #188]	; (8001310 <HAL_GPIO_Init+0x324>)
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	43db      	mvns	r3, r3
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	4013      	ands	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001268:	2b00      	cmp	r3, #0
 800126a:	d003      	beq.n	8001274 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	4313      	orrs	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001274:	4a26      	ldr	r2, [pc, #152]	; (8001310 <HAL_GPIO_Init+0x324>)
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800127a:	4b25      	ldr	r3, [pc, #148]	; (8001310 <HAL_GPIO_Init+0x324>)
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	43db      	mvns	r3, r3
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	4013      	ands	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001292:	2b00      	cmp	r3, #0
 8001294:	d003      	beq.n	800129e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	4313      	orrs	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800129e:	4a1c      	ldr	r2, [pc, #112]	; (8001310 <HAL_GPIO_Init+0x324>)
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012a4:	4b1a      	ldr	r3, [pc, #104]	; (8001310 <HAL_GPIO_Init+0x324>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	43db      	mvns	r3, r3
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	4013      	ands	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d003      	beq.n	80012c8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012c8:	4a11      	ldr	r2, [pc, #68]	; (8001310 <HAL_GPIO_Init+0x324>)
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	3301      	adds	r3, #1
 80012d2:	61fb      	str	r3, [r7, #28]
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	2b0f      	cmp	r3, #15
 80012d8:	f67f ae96 	bls.w	8001008 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012dc:	bf00      	nop
 80012de:	bf00      	nop
 80012e0:	3724      	adds	r7, #36	; 0x24
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	40023800 	.word	0x40023800
 80012f0:	40013800 	.word	0x40013800
 80012f4:	40020000 	.word	0x40020000
 80012f8:	40020400 	.word	0x40020400
 80012fc:	40020800 	.word	0x40020800
 8001300:	40020c00 	.word	0x40020c00
 8001304:	40021000 	.word	0x40021000
 8001308:	40021400 	.word	0x40021400
 800130c:	40021800 	.word	0x40021800
 8001310:	40013c00 	.word	0x40013c00

08001314 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	460b      	mov	r3, r1
 800131e:	807b      	strh	r3, [r7, #2]
 8001320:	4613      	mov	r3, r2
 8001322:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001324:	787b      	ldrb	r3, [r7, #1]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d003      	beq.n	8001332 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800132a:	887a      	ldrh	r2, [r7, #2]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001330:	e003      	b.n	800133a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001332:	887b      	ldrh	r3, [r7, #2]
 8001334:	041a      	lsls	r2, r3, #16
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	619a      	str	r2, [r3, #24]
}
 800133a:	bf00      	nop
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
	...

08001348 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d101      	bne.n	800135a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e12b      	b.n	80015b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001360:	b2db      	uxtb	r3, r3
 8001362:	2b00      	cmp	r3, #0
 8001364:	d106      	bne.n	8001374 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2200      	movs	r2, #0
 800136a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f7ff f9bc 	bl	80006ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2224      	movs	r2, #36	; 0x24
 8001378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f022 0201 	bic.w	r2, r2, #1
 800138a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800139a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80013aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80013ac:	f001 f87e 	bl	80024ac <HAL_RCC_GetPCLK1Freq>
 80013b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	4a81      	ldr	r2, [pc, #516]	; (80015bc <HAL_I2C_Init+0x274>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d807      	bhi.n	80013cc <HAL_I2C_Init+0x84>
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	4a80      	ldr	r2, [pc, #512]	; (80015c0 <HAL_I2C_Init+0x278>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	bf94      	ite	ls
 80013c4:	2301      	movls	r3, #1
 80013c6:	2300      	movhi	r3, #0
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	e006      	b.n	80013da <HAL_I2C_Init+0x92>
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	4a7d      	ldr	r2, [pc, #500]	; (80015c4 <HAL_I2C_Init+0x27c>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	bf94      	ite	ls
 80013d4:	2301      	movls	r3, #1
 80013d6:	2300      	movhi	r3, #0
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e0e7      	b.n	80015b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	4a78      	ldr	r2, [pc, #480]	; (80015c8 <HAL_I2C_Init+0x280>)
 80013e6:	fba2 2303 	umull	r2, r3, r2, r3
 80013ea:	0c9b      	lsrs	r3, r3, #18
 80013ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	68ba      	ldr	r2, [r7, #8]
 80013fe:	430a      	orrs	r2, r1
 8001400:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	6a1b      	ldr	r3, [r3, #32]
 8001408:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	4a6a      	ldr	r2, [pc, #424]	; (80015bc <HAL_I2C_Init+0x274>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d802      	bhi.n	800141c <HAL_I2C_Init+0xd4>
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	3301      	adds	r3, #1
 800141a:	e009      	b.n	8001430 <HAL_I2C_Init+0xe8>
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001422:	fb02 f303 	mul.w	r3, r2, r3
 8001426:	4a69      	ldr	r2, [pc, #420]	; (80015cc <HAL_I2C_Init+0x284>)
 8001428:	fba2 2303 	umull	r2, r3, r2, r3
 800142c:	099b      	lsrs	r3, r3, #6
 800142e:	3301      	adds	r3, #1
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	6812      	ldr	r2, [r2, #0]
 8001434:	430b      	orrs	r3, r1
 8001436:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	69db      	ldr	r3, [r3, #28]
 800143e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001442:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	495c      	ldr	r1, [pc, #368]	; (80015bc <HAL_I2C_Init+0x274>)
 800144c:	428b      	cmp	r3, r1
 800144e:	d819      	bhi.n	8001484 <HAL_I2C_Init+0x13c>
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	1e59      	subs	r1, r3, #1
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	fbb1 f3f3 	udiv	r3, r1, r3
 800145e:	1c59      	adds	r1, r3, #1
 8001460:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001464:	400b      	ands	r3, r1
 8001466:	2b00      	cmp	r3, #0
 8001468:	d00a      	beq.n	8001480 <HAL_I2C_Init+0x138>
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	1e59      	subs	r1, r3, #1
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	fbb1 f3f3 	udiv	r3, r1, r3
 8001478:	3301      	adds	r3, #1
 800147a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800147e:	e051      	b.n	8001524 <HAL_I2C_Init+0x1dc>
 8001480:	2304      	movs	r3, #4
 8001482:	e04f      	b.n	8001524 <HAL_I2C_Init+0x1dc>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d111      	bne.n	80014b0 <HAL_I2C_Init+0x168>
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	1e58      	subs	r0, r3, #1
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6859      	ldr	r1, [r3, #4]
 8001494:	460b      	mov	r3, r1
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	440b      	add	r3, r1
 800149a:	fbb0 f3f3 	udiv	r3, r0, r3
 800149e:	3301      	adds	r3, #1
 80014a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	bf0c      	ite	eq
 80014a8:	2301      	moveq	r3, #1
 80014aa:	2300      	movne	r3, #0
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	e012      	b.n	80014d6 <HAL_I2C_Init+0x18e>
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	1e58      	subs	r0, r3, #1
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6859      	ldr	r1, [r3, #4]
 80014b8:	460b      	mov	r3, r1
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	440b      	add	r3, r1
 80014be:	0099      	lsls	r1, r3, #2
 80014c0:	440b      	add	r3, r1
 80014c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80014c6:	3301      	adds	r3, #1
 80014c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	bf0c      	ite	eq
 80014d0:	2301      	moveq	r3, #1
 80014d2:	2300      	movne	r3, #0
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <HAL_I2C_Init+0x196>
 80014da:	2301      	movs	r3, #1
 80014dc:	e022      	b.n	8001524 <HAL_I2C_Init+0x1dc>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d10e      	bne.n	8001504 <HAL_I2C_Init+0x1bc>
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	1e58      	subs	r0, r3, #1
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6859      	ldr	r1, [r3, #4]
 80014ee:	460b      	mov	r3, r1
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	440b      	add	r3, r1
 80014f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80014f8:	3301      	adds	r3, #1
 80014fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001502:	e00f      	b.n	8001524 <HAL_I2C_Init+0x1dc>
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	1e58      	subs	r0, r3, #1
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6859      	ldr	r1, [r3, #4]
 800150c:	460b      	mov	r3, r1
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	440b      	add	r3, r1
 8001512:	0099      	lsls	r1, r3, #2
 8001514:	440b      	add	r3, r1
 8001516:	fbb0 f3f3 	udiv	r3, r0, r3
 800151a:	3301      	adds	r3, #1
 800151c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001520:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001524:	6879      	ldr	r1, [r7, #4]
 8001526:	6809      	ldr	r1, [r1, #0]
 8001528:	4313      	orrs	r3, r2
 800152a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	69da      	ldr	r2, [r3, #28]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6a1b      	ldr	r3, [r3, #32]
 800153e:	431a      	orrs	r2, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	430a      	orrs	r2, r1
 8001546:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001552:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	6911      	ldr	r1, [r2, #16]
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	68d2      	ldr	r2, [r2, #12]
 800155e:	4311      	orrs	r1, r2
 8001560:	687a      	ldr	r2, [r7, #4]
 8001562:	6812      	ldr	r2, [r2, #0]
 8001564:	430b      	orrs	r3, r1
 8001566:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	68db      	ldr	r3, [r3, #12]
 800156e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	695a      	ldr	r2, [r3, #20]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	699b      	ldr	r3, [r3, #24]
 800157a:	431a      	orrs	r2, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	430a      	orrs	r2, r1
 8001582:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f042 0201 	orr.w	r2, r2, #1
 8001592:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2200      	movs	r2, #0
 8001598:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2220      	movs	r2, #32
 800159e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2200      	movs	r2, #0
 80015a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2200      	movs	r2, #0
 80015ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80015b0:	2300      	movs	r3, #0
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3710      	adds	r7, #16
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	000186a0 	.word	0x000186a0
 80015c0:	001e847f 	.word	0x001e847f
 80015c4:	003d08ff 	.word	0x003d08ff
 80015c8:	431bde83 	.word	0x431bde83
 80015cc:	10624dd3 	.word	0x10624dd3

080015d0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b088      	sub	sp, #32
 80015d4:	af02      	add	r7, sp, #8
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	4608      	mov	r0, r1
 80015da:	4611      	mov	r1, r2
 80015dc:	461a      	mov	r2, r3
 80015de:	4603      	mov	r3, r0
 80015e0:	817b      	strh	r3, [r7, #10]
 80015e2:	460b      	mov	r3, r1
 80015e4:	813b      	strh	r3, [r7, #8]
 80015e6:	4613      	mov	r3, r2
 80015e8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80015ea:	f7ff fbe9 	bl	8000dc0 <HAL_GetTick>
 80015ee:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	2b20      	cmp	r3, #32
 80015fa:	f040 80d9 	bne.w	80017b0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	9300      	str	r3, [sp, #0]
 8001602:	2319      	movs	r3, #25
 8001604:	2201      	movs	r2, #1
 8001606:	496d      	ldr	r1, [pc, #436]	; (80017bc <HAL_I2C_Mem_Write+0x1ec>)
 8001608:	68f8      	ldr	r0, [r7, #12]
 800160a:	f000 fc7f 	bl	8001f0c <I2C_WaitOnFlagUntilTimeout>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001614:	2302      	movs	r3, #2
 8001616:	e0cc      	b.n	80017b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800161e:	2b01      	cmp	r3, #1
 8001620:	d101      	bne.n	8001626 <HAL_I2C_Mem_Write+0x56>
 8001622:	2302      	movs	r3, #2
 8001624:	e0c5      	b.n	80017b2 <HAL_I2C_Mem_Write+0x1e2>
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	2201      	movs	r2, #1
 800162a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 0301 	and.w	r3, r3, #1
 8001638:	2b01      	cmp	r3, #1
 800163a:	d007      	beq.n	800164c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f042 0201 	orr.w	r2, r2, #1
 800164a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800165a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	2221      	movs	r2, #33	; 0x21
 8001660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	2240      	movs	r2, #64	; 0x40
 8001668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	2200      	movs	r2, #0
 8001670:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	6a3a      	ldr	r2, [r7, #32]
 8001676:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800167c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001682:	b29a      	uxth	r2, r3
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	4a4d      	ldr	r2, [pc, #308]	; (80017c0 <HAL_I2C_Mem_Write+0x1f0>)
 800168c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800168e:	88f8      	ldrh	r0, [r7, #6]
 8001690:	893a      	ldrh	r2, [r7, #8]
 8001692:	8979      	ldrh	r1, [r7, #10]
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	9301      	str	r3, [sp, #4]
 8001698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800169a:	9300      	str	r3, [sp, #0]
 800169c:	4603      	mov	r3, r0
 800169e:	68f8      	ldr	r0, [r7, #12]
 80016a0:	f000 fab6 	bl	8001c10 <I2C_RequestMemoryWrite>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d052      	beq.n	8001750 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e081      	b.n	80017b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016ae:	697a      	ldr	r2, [r7, #20]
 80016b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80016b2:	68f8      	ldr	r0, [r7, #12]
 80016b4:	f000 fd00 	bl	80020b8 <I2C_WaitOnTXEFlagUntilTimeout>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d00d      	beq.n	80016da <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c2:	2b04      	cmp	r3, #4
 80016c4:	d107      	bne.n	80016d6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e06b      	b.n	80017b2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016de:	781a      	ldrb	r2, [r3, #0]
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ea:	1c5a      	adds	r2, r3, #1
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016f4:	3b01      	subs	r3, #1
 80016f6:	b29a      	uxth	r2, r3
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001700:	b29b      	uxth	r3, r3
 8001702:	3b01      	subs	r3, #1
 8001704:	b29a      	uxth	r2, r3
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	695b      	ldr	r3, [r3, #20]
 8001710:	f003 0304 	and.w	r3, r3, #4
 8001714:	2b04      	cmp	r3, #4
 8001716:	d11b      	bne.n	8001750 <HAL_I2C_Mem_Write+0x180>
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800171c:	2b00      	cmp	r3, #0
 800171e:	d017      	beq.n	8001750 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001724:	781a      	ldrb	r2, [r3, #0]
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001730:	1c5a      	adds	r2, r3, #1
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800173a:	3b01      	subs	r3, #1
 800173c:	b29a      	uxth	r2, r3
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001746:	b29b      	uxth	r3, r3
 8001748:	3b01      	subs	r3, #1
 800174a:	b29a      	uxth	r2, r3
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001754:	2b00      	cmp	r3, #0
 8001756:	d1aa      	bne.n	80016ae <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001758:	697a      	ldr	r2, [r7, #20]
 800175a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800175c:	68f8      	ldr	r0, [r7, #12]
 800175e:	f000 fcec 	bl	800213a <I2C_WaitOnBTFFlagUntilTimeout>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d00d      	beq.n	8001784 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176c:	2b04      	cmp	r3, #4
 800176e:	d107      	bne.n	8001780 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800177e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e016      	b.n	80017b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001792:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	2220      	movs	r2, #32
 8001798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	2200      	movs	r2, #0
 80017a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	2200      	movs	r2, #0
 80017a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80017ac:	2300      	movs	r3, #0
 80017ae:	e000      	b.n	80017b2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80017b0:	2302      	movs	r3, #2
  }
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3718      	adds	r7, #24
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	00100002 	.word	0x00100002
 80017c0:	ffff0000 	.word	0xffff0000

080017c4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b08c      	sub	sp, #48	; 0x30
 80017c8:	af02      	add	r7, sp, #8
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	4608      	mov	r0, r1
 80017ce:	4611      	mov	r1, r2
 80017d0:	461a      	mov	r2, r3
 80017d2:	4603      	mov	r3, r0
 80017d4:	817b      	strh	r3, [r7, #10]
 80017d6:	460b      	mov	r3, r1
 80017d8:	813b      	strh	r3, [r7, #8]
 80017da:	4613      	mov	r3, r2
 80017dc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80017de:	f7ff faef 	bl	8000dc0 <HAL_GetTick>
 80017e2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	2b20      	cmp	r3, #32
 80017ee:	f040 8208 	bne.w	8001c02 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80017f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f4:	9300      	str	r3, [sp, #0]
 80017f6:	2319      	movs	r3, #25
 80017f8:	2201      	movs	r2, #1
 80017fa:	497b      	ldr	r1, [pc, #492]	; (80019e8 <HAL_I2C_Mem_Read+0x224>)
 80017fc:	68f8      	ldr	r0, [r7, #12]
 80017fe:	f000 fb85 	bl	8001f0c <I2C_WaitOnFlagUntilTimeout>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001808:	2302      	movs	r3, #2
 800180a:	e1fb      	b.n	8001c04 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001812:	2b01      	cmp	r3, #1
 8001814:	d101      	bne.n	800181a <HAL_I2C_Mem_Read+0x56>
 8001816:	2302      	movs	r3, #2
 8001818:	e1f4      	b.n	8001c04 <HAL_I2C_Mem_Read+0x440>
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	2201      	movs	r2, #1
 800181e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0301 	and.w	r3, r3, #1
 800182c:	2b01      	cmp	r3, #1
 800182e:	d007      	beq.n	8001840 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f042 0201 	orr.w	r2, r2, #1
 800183e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800184e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	2222      	movs	r2, #34	; 0x22
 8001854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2240      	movs	r2, #64	; 0x40
 800185c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	2200      	movs	r2, #0
 8001864:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800186a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001870:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001876:	b29a      	uxth	r2, r3
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	4a5b      	ldr	r2, [pc, #364]	; (80019ec <HAL_I2C_Mem_Read+0x228>)
 8001880:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001882:	88f8      	ldrh	r0, [r7, #6]
 8001884:	893a      	ldrh	r2, [r7, #8]
 8001886:	8979      	ldrh	r1, [r7, #10]
 8001888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188a:	9301      	str	r3, [sp, #4]
 800188c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800188e:	9300      	str	r3, [sp, #0]
 8001890:	4603      	mov	r3, r0
 8001892:	68f8      	ldr	r0, [r7, #12]
 8001894:	f000 fa52 	bl	8001d3c <I2C_RequestMemoryRead>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e1b0      	b.n	8001c04 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d113      	bne.n	80018d2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018aa:	2300      	movs	r3, #0
 80018ac:	623b      	str	r3, [r7, #32]
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	695b      	ldr	r3, [r3, #20]
 80018b4:	623b      	str	r3, [r7, #32]
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	699b      	ldr	r3, [r3, #24]
 80018bc:	623b      	str	r3, [r7, #32]
 80018be:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	e184      	b.n	8001bdc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d11b      	bne.n	8001912 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018ea:	2300      	movs	r3, #0
 80018ec:	61fb      	str	r3, [r7, #28]
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	695b      	ldr	r3, [r3, #20]
 80018f4:	61fb      	str	r3, [r7, #28]
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	699b      	ldr	r3, [r3, #24]
 80018fc:	61fb      	str	r3, [r7, #28]
 80018fe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	e164      	b.n	8001bdc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001916:	2b02      	cmp	r3, #2
 8001918:	d11b      	bne.n	8001952 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001928:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001938:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800193a:	2300      	movs	r3, #0
 800193c:	61bb      	str	r3, [r7, #24]
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	695b      	ldr	r3, [r3, #20]
 8001944:	61bb      	str	r3, [r7, #24]
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	699b      	ldr	r3, [r3, #24]
 800194c:	61bb      	str	r3, [r7, #24]
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	e144      	b.n	8001bdc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001952:	2300      	movs	r3, #0
 8001954:	617b      	str	r3, [r7, #20]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	695b      	ldr	r3, [r3, #20]
 800195c:	617b      	str	r3, [r7, #20]
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	699b      	ldr	r3, [r3, #24]
 8001964:	617b      	str	r3, [r7, #20]
 8001966:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001968:	e138      	b.n	8001bdc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800196e:	2b03      	cmp	r3, #3
 8001970:	f200 80f1 	bhi.w	8001b56 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001978:	2b01      	cmp	r3, #1
 800197a:	d123      	bne.n	80019c4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800197c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800197e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001980:	68f8      	ldr	r0, [r7, #12]
 8001982:	f000 fc1b 	bl	80021bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e139      	b.n	8001c04 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	691a      	ldr	r2, [r3, #16]
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199a:	b2d2      	uxtb	r2, r2
 800199c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a2:	1c5a      	adds	r2, r3, #1
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019ac:	3b01      	subs	r3, #1
 80019ae:	b29a      	uxth	r2, r3
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019b8:	b29b      	uxth	r3, r3
 80019ba:	3b01      	subs	r3, #1
 80019bc:	b29a      	uxth	r2, r3
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80019c2:	e10b      	b.n	8001bdc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d14e      	bne.n	8001a6a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80019cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ce:	9300      	str	r3, [sp, #0]
 80019d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019d2:	2200      	movs	r2, #0
 80019d4:	4906      	ldr	r1, [pc, #24]	; (80019f0 <HAL_I2C_Mem_Read+0x22c>)
 80019d6:	68f8      	ldr	r0, [r7, #12]
 80019d8:	f000 fa98 	bl	8001f0c <I2C_WaitOnFlagUntilTimeout>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d008      	beq.n	80019f4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e10e      	b.n	8001c04 <HAL_I2C_Mem_Read+0x440>
 80019e6:	bf00      	nop
 80019e8:	00100002 	.word	0x00100002
 80019ec:	ffff0000 	.word	0xffff0000
 80019f0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	691a      	ldr	r2, [r3, #16]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0e:	b2d2      	uxtb	r2, r2
 8001a10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a16:	1c5a      	adds	r2, r3, #1
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a20:	3b01      	subs	r3, #1
 8001a22:	b29a      	uxth	r2, r3
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	b29a      	uxth	r2, r3
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	691a      	ldr	r2, [r3, #16]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a40:	b2d2      	uxtb	r2, r2
 8001a42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a48:	1c5a      	adds	r2, r3, #1
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a52:	3b01      	subs	r3, #1
 8001a54:	b29a      	uxth	r2, r3
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a5e:	b29b      	uxth	r3, r3
 8001a60:	3b01      	subs	r3, #1
 8001a62:	b29a      	uxth	r2, r3
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001a68:	e0b8      	b.n	8001bdc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6c:	9300      	str	r3, [sp, #0]
 8001a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a70:	2200      	movs	r2, #0
 8001a72:	4966      	ldr	r1, [pc, #408]	; (8001c0c <HAL_I2C_Mem_Read+0x448>)
 8001a74:	68f8      	ldr	r0, [r7, #12]
 8001a76:	f000 fa49 	bl	8001f0c <I2C_WaitOnFlagUntilTimeout>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e0bf      	b.n	8001c04 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	691a      	ldr	r2, [r3, #16]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9e:	b2d2      	uxtb	r2, r2
 8001aa0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa6:	1c5a      	adds	r2, r3, #1
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ab0:	3b01      	subs	r3, #1
 8001ab2:	b29a      	uxth	r2, r3
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	3b01      	subs	r3, #1
 8001ac0:	b29a      	uxth	r2, r3
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac8:	9300      	str	r3, [sp, #0]
 8001aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001acc:	2200      	movs	r2, #0
 8001ace:	494f      	ldr	r1, [pc, #316]	; (8001c0c <HAL_I2C_Mem_Read+0x448>)
 8001ad0:	68f8      	ldr	r0, [r7, #12]
 8001ad2:	f000 fa1b 	bl	8001f0c <I2C_WaitOnFlagUntilTimeout>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e091      	b.n	8001c04 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001aee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	691a      	ldr	r2, [r3, #16]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afa:	b2d2      	uxtb	r2, r2
 8001afc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b02:	1c5a      	adds	r2, r3, #1
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b0c:	3b01      	subs	r3, #1
 8001b0e:	b29a      	uxth	r2, r3
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	b29a      	uxth	r2, r3
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	691a      	ldr	r2, [r3, #16]
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2c:	b2d2      	uxtb	r2, r2
 8001b2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b34:	1c5a      	adds	r2, r3, #1
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b3e:	3b01      	subs	r3, #1
 8001b40:	b29a      	uxth	r2, r3
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	3b01      	subs	r3, #1
 8001b4e:	b29a      	uxth	r2, r3
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001b54:	e042      	b.n	8001bdc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b58:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001b5a:	68f8      	ldr	r0, [r7, #12]
 8001b5c:	f000 fb2e 	bl	80021bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e04c      	b.n	8001c04 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	691a      	ldr	r2, [r3, #16]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b74:	b2d2      	uxtb	r2, r2
 8001b76:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7c:	1c5a      	adds	r2, r3, #1
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b86:	3b01      	subs	r3, #1
 8001b88:	b29a      	uxth	r2, r3
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	3b01      	subs	r3, #1
 8001b96:	b29a      	uxth	r2, r3
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	695b      	ldr	r3, [r3, #20]
 8001ba2:	f003 0304 	and.w	r3, r3, #4
 8001ba6:	2b04      	cmp	r3, #4
 8001ba8:	d118      	bne.n	8001bdc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	691a      	ldr	r2, [r3, #16]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb4:	b2d2      	uxtb	r2, r2
 8001bb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bbc:	1c5a      	adds	r2, r3, #1
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	b29a      	uxth	r2, r3
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	3b01      	subs	r3, #1
 8001bd6:	b29a      	uxth	r2, r3
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	f47f aec2 	bne.w	800196a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2220      	movs	r2, #32
 8001bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	e000      	b.n	8001c04 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001c02:	2302      	movs	r3, #2
  }
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3728      	adds	r7, #40	; 0x28
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	00010004 	.word	0x00010004

08001c10 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b088      	sub	sp, #32
 8001c14:	af02      	add	r7, sp, #8
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	4608      	mov	r0, r1
 8001c1a:	4611      	mov	r1, r2
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	4603      	mov	r3, r0
 8001c20:	817b      	strh	r3, [r7, #10]
 8001c22:	460b      	mov	r3, r1
 8001c24:	813b      	strh	r3, [r7, #8]
 8001c26:	4613      	mov	r3, r2
 8001c28:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c38:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3c:	9300      	str	r3, [sp, #0]
 8001c3e:	6a3b      	ldr	r3, [r7, #32]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001c46:	68f8      	ldr	r0, [r7, #12]
 8001c48:	f000 f960 	bl	8001f0c <I2C_WaitOnFlagUntilTimeout>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d00d      	beq.n	8001c6e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c60:	d103      	bne.n	8001c6a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c68:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e05f      	b.n	8001d2e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001c6e:	897b      	ldrh	r3, [r7, #10]
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	461a      	mov	r2, r3
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001c7c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c80:	6a3a      	ldr	r2, [r7, #32]
 8001c82:	492d      	ldr	r1, [pc, #180]	; (8001d38 <I2C_RequestMemoryWrite+0x128>)
 8001c84:	68f8      	ldr	r0, [r7, #12]
 8001c86:	f000 f998 	bl	8001fba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e04c      	b.n	8001d2e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c94:	2300      	movs	r3, #0
 8001c96:	617b      	str	r3, [r7, #20]
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	695b      	ldr	r3, [r3, #20]
 8001c9e:	617b      	str	r3, [r7, #20]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	699b      	ldr	r3, [r3, #24]
 8001ca6:	617b      	str	r3, [r7, #20]
 8001ca8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001caa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cac:	6a39      	ldr	r1, [r7, #32]
 8001cae:	68f8      	ldr	r0, [r7, #12]
 8001cb0:	f000 fa02 	bl	80020b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d00d      	beq.n	8001cd6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbe:	2b04      	cmp	r3, #4
 8001cc0:	d107      	bne.n	8001cd2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cd0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e02b      	b.n	8001d2e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001cd6:	88fb      	ldrh	r3, [r7, #6]
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d105      	bne.n	8001ce8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001cdc:	893b      	ldrh	r3, [r7, #8]
 8001cde:	b2da      	uxtb	r2, r3
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	611a      	str	r2, [r3, #16]
 8001ce6:	e021      	b.n	8001d2c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001ce8:	893b      	ldrh	r3, [r7, #8]
 8001cea:	0a1b      	lsrs	r3, r3, #8
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	b2da      	uxtb	r2, r3
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cf8:	6a39      	ldr	r1, [r7, #32]
 8001cfa:	68f8      	ldr	r0, [r7, #12]
 8001cfc:	f000 f9dc 	bl	80020b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d00d      	beq.n	8001d22 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0a:	2b04      	cmp	r3, #4
 8001d0c:	d107      	bne.n	8001d1e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d1c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e005      	b.n	8001d2e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001d22:	893b      	ldrh	r3, [r7, #8]
 8001d24:	b2da      	uxtb	r2, r3
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3718      	adds	r7, #24
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	00010002 	.word	0x00010002

08001d3c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b088      	sub	sp, #32
 8001d40:	af02      	add	r7, sp, #8
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	4608      	mov	r0, r1
 8001d46:	4611      	mov	r1, r2
 8001d48:	461a      	mov	r2, r3
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	817b      	strh	r3, [r7, #10]
 8001d4e:	460b      	mov	r3, r1
 8001d50:	813b      	strh	r3, [r7, #8]
 8001d52:	4613      	mov	r3, r2
 8001d54:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d64:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d74:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d78:	9300      	str	r3, [sp, #0]
 8001d7a:	6a3b      	ldr	r3, [r7, #32]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001d82:	68f8      	ldr	r0, [r7, #12]
 8001d84:	f000 f8c2 	bl	8001f0c <I2C_WaitOnFlagUntilTimeout>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d00d      	beq.n	8001daa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d9c:	d103      	bne.n	8001da6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001da4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e0aa      	b.n	8001f00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001daa:	897b      	ldrh	r3, [r7, #10]
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	461a      	mov	r2, r3
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001db8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbc:	6a3a      	ldr	r2, [r7, #32]
 8001dbe:	4952      	ldr	r1, [pc, #328]	; (8001f08 <I2C_RequestMemoryRead+0x1cc>)
 8001dc0:	68f8      	ldr	r0, [r7, #12]
 8001dc2:	f000 f8fa 	bl	8001fba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e097      	b.n	8001f00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	617b      	str	r3, [r7, #20]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	695b      	ldr	r3, [r3, #20]
 8001dda:	617b      	str	r3, [r7, #20]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	699b      	ldr	r3, [r3, #24]
 8001de2:	617b      	str	r3, [r7, #20]
 8001de4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001de6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001de8:	6a39      	ldr	r1, [r7, #32]
 8001dea:	68f8      	ldr	r0, [r7, #12]
 8001dec:	f000 f964 	bl	80020b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d00d      	beq.n	8001e12 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfa:	2b04      	cmp	r3, #4
 8001dfc:	d107      	bne.n	8001e0e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e0c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e076      	b.n	8001f00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001e12:	88fb      	ldrh	r3, [r7, #6]
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d105      	bne.n	8001e24 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001e18:	893b      	ldrh	r3, [r7, #8]
 8001e1a:	b2da      	uxtb	r2, r3
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	611a      	str	r2, [r3, #16]
 8001e22:	e021      	b.n	8001e68 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001e24:	893b      	ldrh	r3, [r7, #8]
 8001e26:	0a1b      	lsrs	r3, r3, #8
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	b2da      	uxtb	r2, r3
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e34:	6a39      	ldr	r1, [r7, #32]
 8001e36:	68f8      	ldr	r0, [r7, #12]
 8001e38:	f000 f93e 	bl	80020b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d00d      	beq.n	8001e5e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e46:	2b04      	cmp	r3, #4
 8001e48:	d107      	bne.n	8001e5a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e58:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e050      	b.n	8001f00 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001e5e:	893b      	ldrh	r3, [r7, #8]
 8001e60:	b2da      	uxtb	r2, r3
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e6a:	6a39      	ldr	r1, [r7, #32]
 8001e6c:	68f8      	ldr	r0, [r7, #12]
 8001e6e:	f000 f923 	bl	80020b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d00d      	beq.n	8001e94 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7c:	2b04      	cmp	r3, #4
 8001e7e:	d107      	bne.n	8001e90 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e8e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e035      	b.n	8001f00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ea2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea6:	9300      	str	r3, [sp, #0]
 8001ea8:	6a3b      	ldr	r3, [r7, #32]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001eb0:	68f8      	ldr	r0, [r7, #12]
 8001eb2:	f000 f82b 	bl	8001f0c <I2C_WaitOnFlagUntilTimeout>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d00d      	beq.n	8001ed8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001eca:	d103      	bne.n	8001ed4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ed2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e013      	b.n	8001f00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001ed8:	897b      	ldrh	r3, [r7, #10]
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	f043 0301 	orr.w	r3, r3, #1
 8001ee0:	b2da      	uxtb	r2, r3
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eea:	6a3a      	ldr	r2, [r7, #32]
 8001eec:	4906      	ldr	r1, [pc, #24]	; (8001f08 <I2C_RequestMemoryRead+0x1cc>)
 8001eee:	68f8      	ldr	r0, [r7, #12]
 8001ef0:	f000 f863 	bl	8001fba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e000      	b.n	8001f00 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3718      	adds	r7, #24
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	00010002 	.word	0x00010002

08001f0c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	60f8      	str	r0, [r7, #12]
 8001f14:	60b9      	str	r1, [r7, #8]
 8001f16:	603b      	str	r3, [r7, #0]
 8001f18:	4613      	mov	r3, r2
 8001f1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f1c:	e025      	b.n	8001f6a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f24:	d021      	beq.n	8001f6a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f26:	f7fe ff4b 	bl	8000dc0 <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	683a      	ldr	r2, [r7, #0]
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d302      	bcc.n	8001f3c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d116      	bne.n	8001f6a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2220      	movs	r2, #32
 8001f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f56:	f043 0220 	orr.w	r2, r3, #32
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2200      	movs	r2, #0
 8001f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e023      	b.n	8001fb2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	0c1b      	lsrs	r3, r3, #16
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d10d      	bne.n	8001f90 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	695b      	ldr	r3, [r3, #20]
 8001f7a:	43da      	mvns	r2, r3
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	bf0c      	ite	eq
 8001f86:	2301      	moveq	r3, #1
 8001f88:	2300      	movne	r3, #0
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	e00c      	b.n	8001faa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	699b      	ldr	r3, [r3, #24]
 8001f96:	43da      	mvns	r2, r3
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	bf0c      	ite	eq
 8001fa2:	2301      	moveq	r3, #1
 8001fa4:	2300      	movne	r3, #0
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	461a      	mov	r2, r3
 8001faa:	79fb      	ldrb	r3, [r7, #7]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d0b6      	beq.n	8001f1e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3710      	adds	r7, #16
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	b084      	sub	sp, #16
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	60f8      	str	r0, [r7, #12]
 8001fc2:	60b9      	str	r1, [r7, #8]
 8001fc4:	607a      	str	r2, [r7, #4]
 8001fc6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001fc8:	e051      	b.n	800206e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	695b      	ldr	r3, [r3, #20]
 8001fd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fd8:	d123      	bne.n	8002022 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fe8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001ff2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2220      	movs	r2, #32
 8001ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2200      	movs	r2, #0
 8002006:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	f043 0204 	orr.w	r2, r3, #4
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2200      	movs	r2, #0
 800201a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e046      	b.n	80020b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002028:	d021      	beq.n	800206e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800202a:	f7fe fec9 	bl	8000dc0 <HAL_GetTick>
 800202e:	4602      	mov	r2, r0
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	429a      	cmp	r2, r3
 8002038:	d302      	bcc.n	8002040 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d116      	bne.n	800206e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2200      	movs	r2, #0
 8002044:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2220      	movs	r2, #32
 800204a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205a:	f043 0220 	orr.w	r2, r3, #32
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2200      	movs	r2, #0
 8002066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e020      	b.n	80020b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	0c1b      	lsrs	r3, r3, #16
 8002072:	b2db      	uxtb	r3, r3
 8002074:	2b01      	cmp	r3, #1
 8002076:	d10c      	bne.n	8002092 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	695b      	ldr	r3, [r3, #20]
 800207e:	43da      	mvns	r2, r3
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	4013      	ands	r3, r2
 8002084:	b29b      	uxth	r3, r3
 8002086:	2b00      	cmp	r3, #0
 8002088:	bf14      	ite	ne
 800208a:	2301      	movne	r3, #1
 800208c:	2300      	moveq	r3, #0
 800208e:	b2db      	uxtb	r3, r3
 8002090:	e00b      	b.n	80020aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	43da      	mvns	r2, r3
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	4013      	ands	r3, r2
 800209e:	b29b      	uxth	r3, r3
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	bf14      	ite	ne
 80020a4:	2301      	movne	r3, #1
 80020a6:	2300      	moveq	r3, #0
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d18d      	bne.n	8001fca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80020ae:	2300      	movs	r3, #0
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3710      	adds	r7, #16
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	60b9      	str	r1, [r7, #8]
 80020c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020c4:	e02d      	b.n	8002122 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80020c6:	68f8      	ldr	r0, [r7, #12]
 80020c8:	f000 f8ce 	bl	8002268 <I2C_IsAcknowledgeFailed>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e02d      	b.n	8002132 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020dc:	d021      	beq.n	8002122 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020de:	f7fe fe6f 	bl	8000dc0 <HAL_GetTick>
 80020e2:	4602      	mov	r2, r0
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	68ba      	ldr	r2, [r7, #8]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d302      	bcc.n	80020f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d116      	bne.n	8002122 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2200      	movs	r2, #0
 80020f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2220      	movs	r2, #32
 80020fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2200      	movs	r2, #0
 8002106:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210e:	f043 0220 	orr.w	r2, r3, #32
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2200      	movs	r2, #0
 800211a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e007      	b.n	8002132 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	695b      	ldr	r3, [r3, #20]
 8002128:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800212c:	2b80      	cmp	r3, #128	; 0x80
 800212e:	d1ca      	bne.n	80020c6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3710      	adds	r7, #16
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}

0800213a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800213a:	b580      	push	{r7, lr}
 800213c:	b084      	sub	sp, #16
 800213e:	af00      	add	r7, sp, #0
 8002140:	60f8      	str	r0, [r7, #12]
 8002142:	60b9      	str	r1, [r7, #8]
 8002144:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002146:	e02d      	b.n	80021a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002148:	68f8      	ldr	r0, [r7, #12]
 800214a:	f000 f88d 	bl	8002268 <I2C_IsAcknowledgeFailed>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e02d      	b.n	80021b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800215e:	d021      	beq.n	80021a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002160:	f7fe fe2e 	bl	8000dc0 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	68ba      	ldr	r2, [r7, #8]
 800216c:	429a      	cmp	r2, r3
 800216e:	d302      	bcc.n	8002176 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d116      	bne.n	80021a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2200      	movs	r2, #0
 800217a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2220      	movs	r2, #32
 8002180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2200      	movs	r2, #0
 8002188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002190:	f043 0220 	orr.w	r2, r3, #32
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2200      	movs	r2, #0
 800219c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e007      	b.n	80021b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	695b      	ldr	r3, [r3, #20]
 80021aa:	f003 0304 	and.w	r3, r3, #4
 80021ae:	2b04      	cmp	r3, #4
 80021b0:	d1ca      	bne.n	8002148 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80021b2:	2300      	movs	r3, #0
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3710      	adds	r7, #16
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}

080021bc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80021c8:	e042      	b.n	8002250 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	695b      	ldr	r3, [r3, #20]
 80021d0:	f003 0310 	and.w	r3, r3, #16
 80021d4:	2b10      	cmp	r3, #16
 80021d6:	d119      	bne.n	800220c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f06f 0210 	mvn.w	r2, #16
 80021e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2200      	movs	r2, #0
 80021e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2220      	movs	r2, #32
 80021ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2200      	movs	r2, #0
 80021f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2200      	movs	r2, #0
 8002204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e029      	b.n	8002260 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800220c:	f7fe fdd8 	bl	8000dc0 <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	68ba      	ldr	r2, [r7, #8]
 8002218:	429a      	cmp	r2, r3
 800221a:	d302      	bcc.n	8002222 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d116      	bne.n	8002250 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2200      	movs	r2, #0
 8002226:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2220      	movs	r2, #32
 800222c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2200      	movs	r2, #0
 8002234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223c:	f043 0220 	orr.w	r2, r3, #32
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2200      	movs	r2, #0
 8002248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e007      	b.n	8002260 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	695b      	ldr	r3, [r3, #20]
 8002256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800225a:	2b40      	cmp	r3, #64	; 0x40
 800225c:	d1b5      	bne.n	80021ca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800225e:	2300      	movs	r3, #0
}
 8002260:	4618      	mov	r0, r3
 8002262:	3710      	adds	r7, #16
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}

08002268 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	695b      	ldr	r3, [r3, #20]
 8002276:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800227a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800227e:	d11b      	bne.n	80022b8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002288:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2220      	movs	r2, #32
 8002294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a4:	f043 0204 	orr.w	r2, r3, #4
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e000      	b.n	80022ba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
	...

080022c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d101      	bne.n	80022dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e0cc      	b.n	8002476 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022dc:	4b68      	ldr	r3, [pc, #416]	; (8002480 <HAL_RCC_ClockConfig+0x1b8>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 030f 	and.w	r3, r3, #15
 80022e4:	683a      	ldr	r2, [r7, #0]
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d90c      	bls.n	8002304 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ea:	4b65      	ldr	r3, [pc, #404]	; (8002480 <HAL_RCC_ClockConfig+0x1b8>)
 80022ec:	683a      	ldr	r2, [r7, #0]
 80022ee:	b2d2      	uxtb	r2, r2
 80022f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022f2:	4b63      	ldr	r3, [pc, #396]	; (8002480 <HAL_RCC_ClockConfig+0x1b8>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 030f 	and.w	r3, r3, #15
 80022fa:	683a      	ldr	r2, [r7, #0]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d001      	beq.n	8002304 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e0b8      	b.n	8002476 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0302 	and.w	r3, r3, #2
 800230c:	2b00      	cmp	r3, #0
 800230e:	d020      	beq.n	8002352 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0304 	and.w	r3, r3, #4
 8002318:	2b00      	cmp	r3, #0
 800231a:	d005      	beq.n	8002328 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800231c:	4b59      	ldr	r3, [pc, #356]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	4a58      	ldr	r2, [pc, #352]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 8002322:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002326:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0308 	and.w	r3, r3, #8
 8002330:	2b00      	cmp	r3, #0
 8002332:	d005      	beq.n	8002340 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002334:	4b53      	ldr	r3, [pc, #332]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	4a52      	ldr	r2, [pc, #328]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 800233a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800233e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002340:	4b50      	ldr	r3, [pc, #320]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	494d      	ldr	r1, [pc, #308]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 800234e:	4313      	orrs	r3, r2
 8002350:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	2b00      	cmp	r3, #0
 800235c:	d044      	beq.n	80023e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	2b01      	cmp	r3, #1
 8002364:	d107      	bne.n	8002376 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002366:	4b47      	ldr	r3, [pc, #284]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d119      	bne.n	80023a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e07f      	b.n	8002476 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	2b02      	cmp	r3, #2
 800237c:	d003      	beq.n	8002386 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002382:	2b03      	cmp	r3, #3
 8002384:	d107      	bne.n	8002396 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002386:	4b3f      	ldr	r3, [pc, #252]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d109      	bne.n	80023a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e06f      	b.n	8002476 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002396:	4b3b      	ldr	r3, [pc, #236]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0302 	and.w	r3, r3, #2
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d101      	bne.n	80023a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e067      	b.n	8002476 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023a6:	4b37      	ldr	r3, [pc, #220]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	f023 0203 	bic.w	r2, r3, #3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	4934      	ldr	r1, [pc, #208]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023b8:	f7fe fd02 	bl	8000dc0 <HAL_GetTick>
 80023bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023be:	e00a      	b.n	80023d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023c0:	f7fe fcfe 	bl	8000dc0 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d901      	bls.n	80023d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e04f      	b.n	8002476 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023d6:	4b2b      	ldr	r3, [pc, #172]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f003 020c 	and.w	r2, r3, #12
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d1eb      	bne.n	80023c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023e8:	4b25      	ldr	r3, [pc, #148]	; (8002480 <HAL_RCC_ClockConfig+0x1b8>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 030f 	and.w	r3, r3, #15
 80023f0:	683a      	ldr	r2, [r7, #0]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d20c      	bcs.n	8002410 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023f6:	4b22      	ldr	r3, [pc, #136]	; (8002480 <HAL_RCC_ClockConfig+0x1b8>)
 80023f8:	683a      	ldr	r2, [r7, #0]
 80023fa:	b2d2      	uxtb	r2, r2
 80023fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023fe:	4b20      	ldr	r3, [pc, #128]	; (8002480 <HAL_RCC_ClockConfig+0x1b8>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 030f 	and.w	r3, r3, #15
 8002406:	683a      	ldr	r2, [r7, #0]
 8002408:	429a      	cmp	r2, r3
 800240a:	d001      	beq.n	8002410 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e032      	b.n	8002476 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0304 	and.w	r3, r3, #4
 8002418:	2b00      	cmp	r3, #0
 800241a:	d008      	beq.n	800242e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800241c:	4b19      	ldr	r3, [pc, #100]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	4916      	ldr	r1, [pc, #88]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 800242a:	4313      	orrs	r3, r2
 800242c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0308 	and.w	r3, r3, #8
 8002436:	2b00      	cmp	r3, #0
 8002438:	d009      	beq.n	800244e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800243a:	4b12      	ldr	r3, [pc, #72]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	490e      	ldr	r1, [pc, #56]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 800244a:	4313      	orrs	r3, r2
 800244c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800244e:	f000 f855 	bl	80024fc <HAL_RCC_GetSysClockFreq>
 8002452:	4602      	mov	r2, r0
 8002454:	4b0b      	ldr	r3, [pc, #44]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	091b      	lsrs	r3, r3, #4
 800245a:	f003 030f 	and.w	r3, r3, #15
 800245e:	490a      	ldr	r1, [pc, #40]	; (8002488 <HAL_RCC_ClockConfig+0x1c0>)
 8002460:	5ccb      	ldrb	r3, [r1, r3]
 8002462:	fa22 f303 	lsr.w	r3, r2, r3
 8002466:	4a09      	ldr	r2, [pc, #36]	; (800248c <HAL_RCC_ClockConfig+0x1c4>)
 8002468:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800246a:	4b09      	ldr	r3, [pc, #36]	; (8002490 <HAL_RCC_ClockConfig+0x1c8>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4618      	mov	r0, r3
 8002470:	f7fe fc62 	bl	8000d38 <HAL_InitTick>

  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3710      	adds	r7, #16
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	40023c00 	.word	0x40023c00
 8002484:	40023800 	.word	0x40023800
 8002488:	0800472c 	.word	0x0800472c
 800248c:	20000000 	.word	0x20000000
 8002490:	20000004 	.word	0x20000004

08002494 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002498:	4b03      	ldr	r3, [pc, #12]	; (80024a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800249a:	681b      	ldr	r3, [r3, #0]
}
 800249c:	4618      	mov	r0, r3
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	20000000 	.word	0x20000000

080024ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80024b0:	f7ff fff0 	bl	8002494 <HAL_RCC_GetHCLKFreq>
 80024b4:	4602      	mov	r2, r0
 80024b6:	4b05      	ldr	r3, [pc, #20]	; (80024cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	0a9b      	lsrs	r3, r3, #10
 80024bc:	f003 0307 	and.w	r3, r3, #7
 80024c0:	4903      	ldr	r1, [pc, #12]	; (80024d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024c2:	5ccb      	ldrb	r3, [r1, r3]
 80024c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	40023800 	.word	0x40023800
 80024d0:	0800473c 	.word	0x0800473c

080024d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80024d8:	f7ff ffdc 	bl	8002494 <HAL_RCC_GetHCLKFreq>
 80024dc:	4602      	mov	r2, r0
 80024de:	4b05      	ldr	r3, [pc, #20]	; (80024f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	0b5b      	lsrs	r3, r3, #13
 80024e4:	f003 0307 	and.w	r3, r3, #7
 80024e8:	4903      	ldr	r1, [pc, #12]	; (80024f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024ea:	5ccb      	ldrb	r3, [r1, r3]
 80024ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	40023800 	.word	0x40023800
 80024f8:	0800473c 	.word	0x0800473c

080024fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002500:	b0ae      	sub	sp, #184	; 0xb8
 8002502:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002504:	2300      	movs	r3, #0
 8002506:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800250a:	2300      	movs	r3, #0
 800250c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002510:	2300      	movs	r3, #0
 8002512:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002516:	2300      	movs	r3, #0
 8002518:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800251c:	2300      	movs	r3, #0
 800251e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002522:	4bcb      	ldr	r3, [pc, #812]	; (8002850 <HAL_RCC_GetSysClockFreq+0x354>)
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f003 030c 	and.w	r3, r3, #12
 800252a:	2b0c      	cmp	r3, #12
 800252c:	f200 8206 	bhi.w	800293c <HAL_RCC_GetSysClockFreq+0x440>
 8002530:	a201      	add	r2, pc, #4	; (adr r2, 8002538 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002536:	bf00      	nop
 8002538:	0800256d 	.word	0x0800256d
 800253c:	0800293d 	.word	0x0800293d
 8002540:	0800293d 	.word	0x0800293d
 8002544:	0800293d 	.word	0x0800293d
 8002548:	08002575 	.word	0x08002575
 800254c:	0800293d 	.word	0x0800293d
 8002550:	0800293d 	.word	0x0800293d
 8002554:	0800293d 	.word	0x0800293d
 8002558:	0800257d 	.word	0x0800257d
 800255c:	0800293d 	.word	0x0800293d
 8002560:	0800293d 	.word	0x0800293d
 8002564:	0800293d 	.word	0x0800293d
 8002568:	0800276d 	.word	0x0800276d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800256c:	4bb9      	ldr	r3, [pc, #740]	; (8002854 <HAL_RCC_GetSysClockFreq+0x358>)
 800256e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002572:	e1e7      	b.n	8002944 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002574:	4bb8      	ldr	r3, [pc, #736]	; (8002858 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002576:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800257a:	e1e3      	b.n	8002944 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800257c:	4bb4      	ldr	r3, [pc, #720]	; (8002850 <HAL_RCC_GetSysClockFreq+0x354>)
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002584:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002588:	4bb1      	ldr	r3, [pc, #708]	; (8002850 <HAL_RCC_GetSysClockFreq+0x354>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d071      	beq.n	8002678 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002594:	4bae      	ldr	r3, [pc, #696]	; (8002850 <HAL_RCC_GetSysClockFreq+0x354>)
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	099b      	lsrs	r3, r3, #6
 800259a:	2200      	movs	r2, #0
 800259c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80025a0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80025a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80025a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80025b0:	2300      	movs	r3, #0
 80025b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80025b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80025ba:	4622      	mov	r2, r4
 80025bc:	462b      	mov	r3, r5
 80025be:	f04f 0000 	mov.w	r0, #0
 80025c2:	f04f 0100 	mov.w	r1, #0
 80025c6:	0159      	lsls	r1, r3, #5
 80025c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025cc:	0150      	lsls	r0, r2, #5
 80025ce:	4602      	mov	r2, r0
 80025d0:	460b      	mov	r3, r1
 80025d2:	4621      	mov	r1, r4
 80025d4:	1a51      	subs	r1, r2, r1
 80025d6:	6439      	str	r1, [r7, #64]	; 0x40
 80025d8:	4629      	mov	r1, r5
 80025da:	eb63 0301 	sbc.w	r3, r3, r1
 80025de:	647b      	str	r3, [r7, #68]	; 0x44
 80025e0:	f04f 0200 	mov.w	r2, #0
 80025e4:	f04f 0300 	mov.w	r3, #0
 80025e8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80025ec:	4649      	mov	r1, r9
 80025ee:	018b      	lsls	r3, r1, #6
 80025f0:	4641      	mov	r1, r8
 80025f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025f6:	4641      	mov	r1, r8
 80025f8:	018a      	lsls	r2, r1, #6
 80025fa:	4641      	mov	r1, r8
 80025fc:	1a51      	subs	r1, r2, r1
 80025fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8002600:	4649      	mov	r1, r9
 8002602:	eb63 0301 	sbc.w	r3, r3, r1
 8002606:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002608:	f04f 0200 	mov.w	r2, #0
 800260c:	f04f 0300 	mov.w	r3, #0
 8002610:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002614:	4649      	mov	r1, r9
 8002616:	00cb      	lsls	r3, r1, #3
 8002618:	4641      	mov	r1, r8
 800261a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800261e:	4641      	mov	r1, r8
 8002620:	00ca      	lsls	r2, r1, #3
 8002622:	4610      	mov	r0, r2
 8002624:	4619      	mov	r1, r3
 8002626:	4603      	mov	r3, r0
 8002628:	4622      	mov	r2, r4
 800262a:	189b      	adds	r3, r3, r2
 800262c:	633b      	str	r3, [r7, #48]	; 0x30
 800262e:	462b      	mov	r3, r5
 8002630:	460a      	mov	r2, r1
 8002632:	eb42 0303 	adc.w	r3, r2, r3
 8002636:	637b      	str	r3, [r7, #52]	; 0x34
 8002638:	f04f 0200 	mov.w	r2, #0
 800263c:	f04f 0300 	mov.w	r3, #0
 8002640:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002644:	4629      	mov	r1, r5
 8002646:	024b      	lsls	r3, r1, #9
 8002648:	4621      	mov	r1, r4
 800264a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800264e:	4621      	mov	r1, r4
 8002650:	024a      	lsls	r2, r1, #9
 8002652:	4610      	mov	r0, r2
 8002654:	4619      	mov	r1, r3
 8002656:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800265a:	2200      	movs	r2, #0
 800265c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002660:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002664:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002668:	f7fd fe22 	bl	80002b0 <__aeabi_uldivmod>
 800266c:	4602      	mov	r2, r0
 800266e:	460b      	mov	r3, r1
 8002670:	4613      	mov	r3, r2
 8002672:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002676:	e067      	b.n	8002748 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002678:	4b75      	ldr	r3, [pc, #468]	; (8002850 <HAL_RCC_GetSysClockFreq+0x354>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	099b      	lsrs	r3, r3, #6
 800267e:	2200      	movs	r2, #0
 8002680:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002684:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002688:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800268c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002690:	67bb      	str	r3, [r7, #120]	; 0x78
 8002692:	2300      	movs	r3, #0
 8002694:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002696:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800269a:	4622      	mov	r2, r4
 800269c:	462b      	mov	r3, r5
 800269e:	f04f 0000 	mov.w	r0, #0
 80026a2:	f04f 0100 	mov.w	r1, #0
 80026a6:	0159      	lsls	r1, r3, #5
 80026a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026ac:	0150      	lsls	r0, r2, #5
 80026ae:	4602      	mov	r2, r0
 80026b0:	460b      	mov	r3, r1
 80026b2:	4621      	mov	r1, r4
 80026b4:	1a51      	subs	r1, r2, r1
 80026b6:	62b9      	str	r1, [r7, #40]	; 0x28
 80026b8:	4629      	mov	r1, r5
 80026ba:	eb63 0301 	sbc.w	r3, r3, r1
 80026be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026c0:	f04f 0200 	mov.w	r2, #0
 80026c4:	f04f 0300 	mov.w	r3, #0
 80026c8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80026cc:	4649      	mov	r1, r9
 80026ce:	018b      	lsls	r3, r1, #6
 80026d0:	4641      	mov	r1, r8
 80026d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026d6:	4641      	mov	r1, r8
 80026d8:	018a      	lsls	r2, r1, #6
 80026da:	4641      	mov	r1, r8
 80026dc:	ebb2 0a01 	subs.w	sl, r2, r1
 80026e0:	4649      	mov	r1, r9
 80026e2:	eb63 0b01 	sbc.w	fp, r3, r1
 80026e6:	f04f 0200 	mov.w	r2, #0
 80026ea:	f04f 0300 	mov.w	r3, #0
 80026ee:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80026f2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80026f6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80026fa:	4692      	mov	sl, r2
 80026fc:	469b      	mov	fp, r3
 80026fe:	4623      	mov	r3, r4
 8002700:	eb1a 0303 	adds.w	r3, sl, r3
 8002704:	623b      	str	r3, [r7, #32]
 8002706:	462b      	mov	r3, r5
 8002708:	eb4b 0303 	adc.w	r3, fp, r3
 800270c:	627b      	str	r3, [r7, #36]	; 0x24
 800270e:	f04f 0200 	mov.w	r2, #0
 8002712:	f04f 0300 	mov.w	r3, #0
 8002716:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800271a:	4629      	mov	r1, r5
 800271c:	028b      	lsls	r3, r1, #10
 800271e:	4621      	mov	r1, r4
 8002720:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002724:	4621      	mov	r1, r4
 8002726:	028a      	lsls	r2, r1, #10
 8002728:	4610      	mov	r0, r2
 800272a:	4619      	mov	r1, r3
 800272c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002730:	2200      	movs	r2, #0
 8002732:	673b      	str	r3, [r7, #112]	; 0x70
 8002734:	677a      	str	r2, [r7, #116]	; 0x74
 8002736:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800273a:	f7fd fdb9 	bl	80002b0 <__aeabi_uldivmod>
 800273e:	4602      	mov	r2, r0
 8002740:	460b      	mov	r3, r1
 8002742:	4613      	mov	r3, r2
 8002744:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002748:	4b41      	ldr	r3, [pc, #260]	; (8002850 <HAL_RCC_GetSysClockFreq+0x354>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	0c1b      	lsrs	r3, r3, #16
 800274e:	f003 0303 	and.w	r3, r3, #3
 8002752:	3301      	adds	r3, #1
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800275a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800275e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002762:	fbb2 f3f3 	udiv	r3, r2, r3
 8002766:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800276a:	e0eb      	b.n	8002944 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800276c:	4b38      	ldr	r3, [pc, #224]	; (8002850 <HAL_RCC_GetSysClockFreq+0x354>)
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002774:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002778:	4b35      	ldr	r3, [pc, #212]	; (8002850 <HAL_RCC_GetSysClockFreq+0x354>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d06b      	beq.n	800285c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002784:	4b32      	ldr	r3, [pc, #200]	; (8002850 <HAL_RCC_GetSysClockFreq+0x354>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	099b      	lsrs	r3, r3, #6
 800278a:	2200      	movs	r2, #0
 800278c:	66bb      	str	r3, [r7, #104]	; 0x68
 800278e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002790:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002792:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002796:	663b      	str	r3, [r7, #96]	; 0x60
 8002798:	2300      	movs	r3, #0
 800279a:	667b      	str	r3, [r7, #100]	; 0x64
 800279c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80027a0:	4622      	mov	r2, r4
 80027a2:	462b      	mov	r3, r5
 80027a4:	f04f 0000 	mov.w	r0, #0
 80027a8:	f04f 0100 	mov.w	r1, #0
 80027ac:	0159      	lsls	r1, r3, #5
 80027ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027b2:	0150      	lsls	r0, r2, #5
 80027b4:	4602      	mov	r2, r0
 80027b6:	460b      	mov	r3, r1
 80027b8:	4621      	mov	r1, r4
 80027ba:	1a51      	subs	r1, r2, r1
 80027bc:	61b9      	str	r1, [r7, #24]
 80027be:	4629      	mov	r1, r5
 80027c0:	eb63 0301 	sbc.w	r3, r3, r1
 80027c4:	61fb      	str	r3, [r7, #28]
 80027c6:	f04f 0200 	mov.w	r2, #0
 80027ca:	f04f 0300 	mov.w	r3, #0
 80027ce:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80027d2:	4659      	mov	r1, fp
 80027d4:	018b      	lsls	r3, r1, #6
 80027d6:	4651      	mov	r1, sl
 80027d8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027dc:	4651      	mov	r1, sl
 80027de:	018a      	lsls	r2, r1, #6
 80027e0:	4651      	mov	r1, sl
 80027e2:	ebb2 0801 	subs.w	r8, r2, r1
 80027e6:	4659      	mov	r1, fp
 80027e8:	eb63 0901 	sbc.w	r9, r3, r1
 80027ec:	f04f 0200 	mov.w	r2, #0
 80027f0:	f04f 0300 	mov.w	r3, #0
 80027f4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027f8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027fc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002800:	4690      	mov	r8, r2
 8002802:	4699      	mov	r9, r3
 8002804:	4623      	mov	r3, r4
 8002806:	eb18 0303 	adds.w	r3, r8, r3
 800280a:	613b      	str	r3, [r7, #16]
 800280c:	462b      	mov	r3, r5
 800280e:	eb49 0303 	adc.w	r3, r9, r3
 8002812:	617b      	str	r3, [r7, #20]
 8002814:	f04f 0200 	mov.w	r2, #0
 8002818:	f04f 0300 	mov.w	r3, #0
 800281c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002820:	4629      	mov	r1, r5
 8002822:	024b      	lsls	r3, r1, #9
 8002824:	4621      	mov	r1, r4
 8002826:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800282a:	4621      	mov	r1, r4
 800282c:	024a      	lsls	r2, r1, #9
 800282e:	4610      	mov	r0, r2
 8002830:	4619      	mov	r1, r3
 8002832:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002836:	2200      	movs	r2, #0
 8002838:	65bb      	str	r3, [r7, #88]	; 0x58
 800283a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800283c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002840:	f7fd fd36 	bl	80002b0 <__aeabi_uldivmod>
 8002844:	4602      	mov	r2, r0
 8002846:	460b      	mov	r3, r1
 8002848:	4613      	mov	r3, r2
 800284a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800284e:	e065      	b.n	800291c <HAL_RCC_GetSysClockFreq+0x420>
 8002850:	40023800 	.word	0x40023800
 8002854:	00f42400 	.word	0x00f42400
 8002858:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800285c:	4b3d      	ldr	r3, [pc, #244]	; (8002954 <HAL_RCC_GetSysClockFreq+0x458>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	099b      	lsrs	r3, r3, #6
 8002862:	2200      	movs	r2, #0
 8002864:	4618      	mov	r0, r3
 8002866:	4611      	mov	r1, r2
 8002868:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800286c:	653b      	str	r3, [r7, #80]	; 0x50
 800286e:	2300      	movs	r3, #0
 8002870:	657b      	str	r3, [r7, #84]	; 0x54
 8002872:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002876:	4642      	mov	r2, r8
 8002878:	464b      	mov	r3, r9
 800287a:	f04f 0000 	mov.w	r0, #0
 800287e:	f04f 0100 	mov.w	r1, #0
 8002882:	0159      	lsls	r1, r3, #5
 8002884:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002888:	0150      	lsls	r0, r2, #5
 800288a:	4602      	mov	r2, r0
 800288c:	460b      	mov	r3, r1
 800288e:	4641      	mov	r1, r8
 8002890:	1a51      	subs	r1, r2, r1
 8002892:	60b9      	str	r1, [r7, #8]
 8002894:	4649      	mov	r1, r9
 8002896:	eb63 0301 	sbc.w	r3, r3, r1
 800289a:	60fb      	str	r3, [r7, #12]
 800289c:	f04f 0200 	mov.w	r2, #0
 80028a0:	f04f 0300 	mov.w	r3, #0
 80028a4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80028a8:	4659      	mov	r1, fp
 80028aa:	018b      	lsls	r3, r1, #6
 80028ac:	4651      	mov	r1, sl
 80028ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028b2:	4651      	mov	r1, sl
 80028b4:	018a      	lsls	r2, r1, #6
 80028b6:	4651      	mov	r1, sl
 80028b8:	1a54      	subs	r4, r2, r1
 80028ba:	4659      	mov	r1, fp
 80028bc:	eb63 0501 	sbc.w	r5, r3, r1
 80028c0:	f04f 0200 	mov.w	r2, #0
 80028c4:	f04f 0300 	mov.w	r3, #0
 80028c8:	00eb      	lsls	r3, r5, #3
 80028ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028ce:	00e2      	lsls	r2, r4, #3
 80028d0:	4614      	mov	r4, r2
 80028d2:	461d      	mov	r5, r3
 80028d4:	4643      	mov	r3, r8
 80028d6:	18e3      	adds	r3, r4, r3
 80028d8:	603b      	str	r3, [r7, #0]
 80028da:	464b      	mov	r3, r9
 80028dc:	eb45 0303 	adc.w	r3, r5, r3
 80028e0:	607b      	str	r3, [r7, #4]
 80028e2:	f04f 0200 	mov.w	r2, #0
 80028e6:	f04f 0300 	mov.w	r3, #0
 80028ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80028ee:	4629      	mov	r1, r5
 80028f0:	028b      	lsls	r3, r1, #10
 80028f2:	4621      	mov	r1, r4
 80028f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028f8:	4621      	mov	r1, r4
 80028fa:	028a      	lsls	r2, r1, #10
 80028fc:	4610      	mov	r0, r2
 80028fe:	4619      	mov	r1, r3
 8002900:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002904:	2200      	movs	r2, #0
 8002906:	64bb      	str	r3, [r7, #72]	; 0x48
 8002908:	64fa      	str	r2, [r7, #76]	; 0x4c
 800290a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800290e:	f7fd fccf 	bl	80002b0 <__aeabi_uldivmod>
 8002912:	4602      	mov	r2, r0
 8002914:	460b      	mov	r3, r1
 8002916:	4613      	mov	r3, r2
 8002918:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800291c:	4b0d      	ldr	r3, [pc, #52]	; (8002954 <HAL_RCC_GetSysClockFreq+0x458>)
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	0f1b      	lsrs	r3, r3, #28
 8002922:	f003 0307 	and.w	r3, r3, #7
 8002926:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800292a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800292e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002932:	fbb2 f3f3 	udiv	r3, r2, r3
 8002936:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800293a:	e003      	b.n	8002944 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800293c:	4b06      	ldr	r3, [pc, #24]	; (8002958 <HAL_RCC_GetSysClockFreq+0x45c>)
 800293e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002942:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002944:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002948:	4618      	mov	r0, r3
 800294a:	37b8      	adds	r7, #184	; 0xb8
 800294c:	46bd      	mov	sp, r7
 800294e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002952:	bf00      	nop
 8002954:	40023800 	.word	0x40023800
 8002958:	00f42400 	.word	0x00f42400

0800295c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b086      	sub	sp, #24
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d101      	bne.n	800296e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e28d      	b.n	8002e8a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0301 	and.w	r3, r3, #1
 8002976:	2b00      	cmp	r3, #0
 8002978:	f000 8083 	beq.w	8002a82 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800297c:	4b94      	ldr	r3, [pc, #592]	; (8002bd0 <HAL_RCC_OscConfig+0x274>)
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f003 030c 	and.w	r3, r3, #12
 8002984:	2b04      	cmp	r3, #4
 8002986:	d019      	beq.n	80029bc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002988:	4b91      	ldr	r3, [pc, #580]	; (8002bd0 <HAL_RCC_OscConfig+0x274>)
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002990:	2b08      	cmp	r3, #8
 8002992:	d106      	bne.n	80029a2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002994:	4b8e      	ldr	r3, [pc, #568]	; (8002bd0 <HAL_RCC_OscConfig+0x274>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800299c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029a0:	d00c      	beq.n	80029bc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029a2:	4b8b      	ldr	r3, [pc, #556]	; (8002bd0 <HAL_RCC_OscConfig+0x274>)
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80029aa:	2b0c      	cmp	r3, #12
 80029ac:	d112      	bne.n	80029d4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029ae:	4b88      	ldr	r3, [pc, #544]	; (8002bd0 <HAL_RCC_OscConfig+0x274>)
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029ba:	d10b      	bne.n	80029d4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029bc:	4b84      	ldr	r3, [pc, #528]	; (8002bd0 <HAL_RCC_OscConfig+0x274>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d05b      	beq.n	8002a80 <HAL_RCC_OscConfig+0x124>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d157      	bne.n	8002a80 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e25a      	b.n	8002e8a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029dc:	d106      	bne.n	80029ec <HAL_RCC_OscConfig+0x90>
 80029de:	4b7c      	ldr	r3, [pc, #496]	; (8002bd0 <HAL_RCC_OscConfig+0x274>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a7b      	ldr	r2, [pc, #492]	; (8002bd0 <HAL_RCC_OscConfig+0x274>)
 80029e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029e8:	6013      	str	r3, [r2, #0]
 80029ea:	e01d      	b.n	8002a28 <HAL_RCC_OscConfig+0xcc>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029f4:	d10c      	bne.n	8002a10 <HAL_RCC_OscConfig+0xb4>
 80029f6:	4b76      	ldr	r3, [pc, #472]	; (8002bd0 <HAL_RCC_OscConfig+0x274>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a75      	ldr	r2, [pc, #468]	; (8002bd0 <HAL_RCC_OscConfig+0x274>)
 80029fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a00:	6013      	str	r3, [r2, #0]
 8002a02:	4b73      	ldr	r3, [pc, #460]	; (8002bd0 <HAL_RCC_OscConfig+0x274>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a72      	ldr	r2, [pc, #456]	; (8002bd0 <HAL_RCC_OscConfig+0x274>)
 8002a08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a0c:	6013      	str	r3, [r2, #0]
 8002a0e:	e00b      	b.n	8002a28 <HAL_RCC_OscConfig+0xcc>
 8002a10:	4b6f      	ldr	r3, [pc, #444]	; (8002bd0 <HAL_RCC_OscConfig+0x274>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a6e      	ldr	r2, [pc, #440]	; (8002bd0 <HAL_RCC_OscConfig+0x274>)
 8002a16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a1a:	6013      	str	r3, [r2, #0]
 8002a1c:	4b6c      	ldr	r3, [pc, #432]	; (8002bd0 <HAL_RCC_OscConfig+0x274>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a6b      	ldr	r2, [pc, #428]	; (8002bd0 <HAL_RCC_OscConfig+0x274>)
 8002a22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d013      	beq.n	8002a58 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a30:	f7fe f9c6 	bl	8000dc0 <HAL_GetTick>
 8002a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a36:	e008      	b.n	8002a4a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a38:	f7fe f9c2 	bl	8000dc0 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b64      	cmp	r3, #100	; 0x64
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e21f      	b.n	8002e8a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a4a:	4b61      	ldr	r3, [pc, #388]	; (8002bd0 <HAL_RCC_OscConfig+0x274>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d0f0      	beq.n	8002a38 <HAL_RCC_OscConfig+0xdc>
 8002a56:	e014      	b.n	8002a82 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a58:	f7fe f9b2 	bl	8000dc0 <HAL_GetTick>
 8002a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a5e:	e008      	b.n	8002a72 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a60:	f7fe f9ae 	bl	8000dc0 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	2b64      	cmp	r3, #100	; 0x64
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e20b      	b.n	8002e8a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a72:	4b57      	ldr	r3, [pc, #348]	; (8002bd0 <HAL_RCC_OscConfig+0x274>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d1f0      	bne.n	8002a60 <HAL_RCC_OscConfig+0x104>
 8002a7e:	e000      	b.n	8002a82 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0302 	and.w	r3, r3, #2
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d06f      	beq.n	8002b6e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002a8e:	4b50      	ldr	r3, [pc, #320]	; (8002bd0 <HAL_RCC_OscConfig+0x274>)
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f003 030c 	and.w	r3, r3, #12
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d017      	beq.n	8002aca <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002a9a:	4b4d      	ldr	r3, [pc, #308]	; (8002bd0 <HAL_RCC_OscConfig+0x274>)
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002aa2:	2b08      	cmp	r3, #8
 8002aa4:	d105      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002aa6:	4b4a      	ldr	r3, [pc, #296]	; (8002bd0 <HAL_RCC_OscConfig+0x274>)
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00b      	beq.n	8002aca <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ab2:	4b47      	ldr	r3, [pc, #284]	; (8002bd0 <HAL_RCC_OscConfig+0x274>)
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002aba:	2b0c      	cmp	r3, #12
 8002abc:	d11c      	bne.n	8002af8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002abe:	4b44      	ldr	r3, [pc, #272]	; (8002bd0 <HAL_RCC_OscConfig+0x274>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d116      	bne.n	8002af8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aca:	4b41      	ldr	r3, [pc, #260]	; (8002bd0 <HAL_RCC_OscConfig+0x274>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d005      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x186>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d001      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e1d3      	b.n	8002e8a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ae2:	4b3b      	ldr	r3, [pc, #236]	; (8002bd0 <HAL_RCC_OscConfig+0x274>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	00db      	lsls	r3, r3, #3
 8002af0:	4937      	ldr	r1, [pc, #220]	; (8002bd0 <HAL_RCC_OscConfig+0x274>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002af6:	e03a      	b.n	8002b6e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d020      	beq.n	8002b42 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b00:	4b34      	ldr	r3, [pc, #208]	; (8002bd4 <HAL_RCC_OscConfig+0x278>)
 8002b02:	2201      	movs	r2, #1
 8002b04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b06:	f7fe f95b 	bl	8000dc0 <HAL_GetTick>
 8002b0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b0c:	e008      	b.n	8002b20 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b0e:	f7fe f957 	bl	8000dc0 <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d901      	bls.n	8002b20 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e1b4      	b.n	8002e8a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b20:	4b2b      	ldr	r3, [pc, #172]	; (8002bd0 <HAL_RCC_OscConfig+0x274>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0302 	and.w	r3, r3, #2
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d0f0      	beq.n	8002b0e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b2c:	4b28      	ldr	r3, [pc, #160]	; (8002bd0 <HAL_RCC_OscConfig+0x274>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	691b      	ldr	r3, [r3, #16]
 8002b38:	00db      	lsls	r3, r3, #3
 8002b3a:	4925      	ldr	r1, [pc, #148]	; (8002bd0 <HAL_RCC_OscConfig+0x274>)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	600b      	str	r3, [r1, #0]
 8002b40:	e015      	b.n	8002b6e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b42:	4b24      	ldr	r3, [pc, #144]	; (8002bd4 <HAL_RCC_OscConfig+0x278>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b48:	f7fe f93a 	bl	8000dc0 <HAL_GetTick>
 8002b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b4e:	e008      	b.n	8002b62 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b50:	f7fe f936 	bl	8000dc0 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d901      	bls.n	8002b62 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e193      	b.n	8002e8a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b62:	4b1b      	ldr	r3, [pc, #108]	; (8002bd0 <HAL_RCC_OscConfig+0x274>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d1f0      	bne.n	8002b50 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0308 	and.w	r3, r3, #8
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d036      	beq.n	8002be8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	695b      	ldr	r3, [r3, #20]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d016      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b82:	4b15      	ldr	r3, [pc, #84]	; (8002bd8 <HAL_RCC_OscConfig+0x27c>)
 8002b84:	2201      	movs	r2, #1
 8002b86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b88:	f7fe f91a 	bl	8000dc0 <HAL_GetTick>
 8002b8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b8e:	e008      	b.n	8002ba2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b90:	f7fe f916 	bl	8000dc0 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e173      	b.n	8002e8a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ba2:	4b0b      	ldr	r3, [pc, #44]	; (8002bd0 <HAL_RCC_OscConfig+0x274>)
 8002ba4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d0f0      	beq.n	8002b90 <HAL_RCC_OscConfig+0x234>
 8002bae:	e01b      	b.n	8002be8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bb0:	4b09      	ldr	r3, [pc, #36]	; (8002bd8 <HAL_RCC_OscConfig+0x27c>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bb6:	f7fe f903 	bl	8000dc0 <HAL_GetTick>
 8002bba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bbc:	e00e      	b.n	8002bdc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bbe:	f7fe f8ff 	bl	8000dc0 <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d907      	bls.n	8002bdc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e15c      	b.n	8002e8a <HAL_RCC_OscConfig+0x52e>
 8002bd0:	40023800 	.word	0x40023800
 8002bd4:	42470000 	.word	0x42470000
 8002bd8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bdc:	4b8a      	ldr	r3, [pc, #552]	; (8002e08 <HAL_RCC_OscConfig+0x4ac>)
 8002bde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002be0:	f003 0302 	and.w	r3, r3, #2
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d1ea      	bne.n	8002bbe <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0304 	and.w	r3, r3, #4
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	f000 8097 	beq.w	8002d24 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bfa:	4b83      	ldr	r3, [pc, #524]	; (8002e08 <HAL_RCC_OscConfig+0x4ac>)
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d10f      	bne.n	8002c26 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c06:	2300      	movs	r3, #0
 8002c08:	60bb      	str	r3, [r7, #8]
 8002c0a:	4b7f      	ldr	r3, [pc, #508]	; (8002e08 <HAL_RCC_OscConfig+0x4ac>)
 8002c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0e:	4a7e      	ldr	r2, [pc, #504]	; (8002e08 <HAL_RCC_OscConfig+0x4ac>)
 8002c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c14:	6413      	str	r3, [r2, #64]	; 0x40
 8002c16:	4b7c      	ldr	r3, [pc, #496]	; (8002e08 <HAL_RCC_OscConfig+0x4ac>)
 8002c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c1e:	60bb      	str	r3, [r7, #8]
 8002c20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c22:	2301      	movs	r3, #1
 8002c24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c26:	4b79      	ldr	r3, [pc, #484]	; (8002e0c <HAL_RCC_OscConfig+0x4b0>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d118      	bne.n	8002c64 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c32:	4b76      	ldr	r3, [pc, #472]	; (8002e0c <HAL_RCC_OscConfig+0x4b0>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a75      	ldr	r2, [pc, #468]	; (8002e0c <HAL_RCC_OscConfig+0x4b0>)
 8002c38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c3e:	f7fe f8bf 	bl	8000dc0 <HAL_GetTick>
 8002c42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c44:	e008      	b.n	8002c58 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c46:	f7fe f8bb 	bl	8000dc0 <HAL_GetTick>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d901      	bls.n	8002c58 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e118      	b.n	8002e8a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c58:	4b6c      	ldr	r3, [pc, #432]	; (8002e0c <HAL_RCC_OscConfig+0x4b0>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d0f0      	beq.n	8002c46 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d106      	bne.n	8002c7a <HAL_RCC_OscConfig+0x31e>
 8002c6c:	4b66      	ldr	r3, [pc, #408]	; (8002e08 <HAL_RCC_OscConfig+0x4ac>)
 8002c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c70:	4a65      	ldr	r2, [pc, #404]	; (8002e08 <HAL_RCC_OscConfig+0x4ac>)
 8002c72:	f043 0301 	orr.w	r3, r3, #1
 8002c76:	6713      	str	r3, [r2, #112]	; 0x70
 8002c78:	e01c      	b.n	8002cb4 <HAL_RCC_OscConfig+0x358>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	2b05      	cmp	r3, #5
 8002c80:	d10c      	bne.n	8002c9c <HAL_RCC_OscConfig+0x340>
 8002c82:	4b61      	ldr	r3, [pc, #388]	; (8002e08 <HAL_RCC_OscConfig+0x4ac>)
 8002c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c86:	4a60      	ldr	r2, [pc, #384]	; (8002e08 <HAL_RCC_OscConfig+0x4ac>)
 8002c88:	f043 0304 	orr.w	r3, r3, #4
 8002c8c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c8e:	4b5e      	ldr	r3, [pc, #376]	; (8002e08 <HAL_RCC_OscConfig+0x4ac>)
 8002c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c92:	4a5d      	ldr	r2, [pc, #372]	; (8002e08 <HAL_RCC_OscConfig+0x4ac>)
 8002c94:	f043 0301 	orr.w	r3, r3, #1
 8002c98:	6713      	str	r3, [r2, #112]	; 0x70
 8002c9a:	e00b      	b.n	8002cb4 <HAL_RCC_OscConfig+0x358>
 8002c9c:	4b5a      	ldr	r3, [pc, #360]	; (8002e08 <HAL_RCC_OscConfig+0x4ac>)
 8002c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca0:	4a59      	ldr	r2, [pc, #356]	; (8002e08 <HAL_RCC_OscConfig+0x4ac>)
 8002ca2:	f023 0301 	bic.w	r3, r3, #1
 8002ca6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ca8:	4b57      	ldr	r3, [pc, #348]	; (8002e08 <HAL_RCC_OscConfig+0x4ac>)
 8002caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cac:	4a56      	ldr	r2, [pc, #344]	; (8002e08 <HAL_RCC_OscConfig+0x4ac>)
 8002cae:	f023 0304 	bic.w	r3, r3, #4
 8002cb2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d015      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cbc:	f7fe f880 	bl	8000dc0 <HAL_GetTick>
 8002cc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cc2:	e00a      	b.n	8002cda <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cc4:	f7fe f87c 	bl	8000dc0 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e0d7      	b.n	8002e8a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cda:	4b4b      	ldr	r3, [pc, #300]	; (8002e08 <HAL_RCC_OscConfig+0x4ac>)
 8002cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d0ee      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x368>
 8002ce6:	e014      	b.n	8002d12 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ce8:	f7fe f86a 	bl	8000dc0 <HAL_GetTick>
 8002cec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cee:	e00a      	b.n	8002d06 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cf0:	f7fe f866 	bl	8000dc0 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e0c1      	b.n	8002e8a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d06:	4b40      	ldr	r3, [pc, #256]	; (8002e08 <HAL_RCC_OscConfig+0x4ac>)
 8002d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d1ee      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d12:	7dfb      	ldrb	r3, [r7, #23]
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d105      	bne.n	8002d24 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d18:	4b3b      	ldr	r3, [pc, #236]	; (8002e08 <HAL_RCC_OscConfig+0x4ac>)
 8002d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1c:	4a3a      	ldr	r2, [pc, #232]	; (8002e08 <HAL_RCC_OscConfig+0x4ac>)
 8002d1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d22:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	699b      	ldr	r3, [r3, #24]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	f000 80ad 	beq.w	8002e88 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d2e:	4b36      	ldr	r3, [pc, #216]	; (8002e08 <HAL_RCC_OscConfig+0x4ac>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f003 030c 	and.w	r3, r3, #12
 8002d36:	2b08      	cmp	r3, #8
 8002d38:	d060      	beq.n	8002dfc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	699b      	ldr	r3, [r3, #24]
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d145      	bne.n	8002dce <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d42:	4b33      	ldr	r3, [pc, #204]	; (8002e10 <HAL_RCC_OscConfig+0x4b4>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d48:	f7fe f83a 	bl	8000dc0 <HAL_GetTick>
 8002d4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d4e:	e008      	b.n	8002d62 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d50:	f7fe f836 	bl	8000dc0 <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e093      	b.n	8002e8a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d62:	4b29      	ldr	r3, [pc, #164]	; (8002e08 <HAL_RCC_OscConfig+0x4ac>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d1f0      	bne.n	8002d50 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	69da      	ldr	r2, [r3, #28]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a1b      	ldr	r3, [r3, #32]
 8002d76:	431a      	orrs	r2, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7c:	019b      	lsls	r3, r3, #6
 8002d7e:	431a      	orrs	r2, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d84:	085b      	lsrs	r3, r3, #1
 8002d86:	3b01      	subs	r3, #1
 8002d88:	041b      	lsls	r3, r3, #16
 8002d8a:	431a      	orrs	r2, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d90:	061b      	lsls	r3, r3, #24
 8002d92:	431a      	orrs	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d98:	071b      	lsls	r3, r3, #28
 8002d9a:	491b      	ldr	r1, [pc, #108]	; (8002e08 <HAL_RCC_OscConfig+0x4ac>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002da0:	4b1b      	ldr	r3, [pc, #108]	; (8002e10 <HAL_RCC_OscConfig+0x4b4>)
 8002da2:	2201      	movs	r2, #1
 8002da4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da6:	f7fe f80b 	bl	8000dc0 <HAL_GetTick>
 8002daa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dac:	e008      	b.n	8002dc0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dae:	f7fe f807 	bl	8000dc0 <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d901      	bls.n	8002dc0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e064      	b.n	8002e8a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dc0:	4b11      	ldr	r3, [pc, #68]	; (8002e08 <HAL_RCC_OscConfig+0x4ac>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d0f0      	beq.n	8002dae <HAL_RCC_OscConfig+0x452>
 8002dcc:	e05c      	b.n	8002e88 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dce:	4b10      	ldr	r3, [pc, #64]	; (8002e10 <HAL_RCC_OscConfig+0x4b4>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd4:	f7fd fff4 	bl	8000dc0 <HAL_GetTick>
 8002dd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dda:	e008      	b.n	8002dee <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ddc:	f7fd fff0 	bl	8000dc0 <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e04d      	b.n	8002e8a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dee:	4b06      	ldr	r3, [pc, #24]	; (8002e08 <HAL_RCC_OscConfig+0x4ac>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d1f0      	bne.n	8002ddc <HAL_RCC_OscConfig+0x480>
 8002dfa:	e045      	b.n	8002e88 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	699b      	ldr	r3, [r3, #24]
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d107      	bne.n	8002e14 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e040      	b.n	8002e8a <HAL_RCC_OscConfig+0x52e>
 8002e08:	40023800 	.word	0x40023800
 8002e0c:	40007000 	.word	0x40007000
 8002e10:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e14:	4b1f      	ldr	r3, [pc, #124]	; (8002e94 <HAL_RCC_OscConfig+0x538>)
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	699b      	ldr	r3, [r3, #24]
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d030      	beq.n	8002e84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d129      	bne.n	8002e84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d122      	bne.n	8002e84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e3e:	68fa      	ldr	r2, [r7, #12]
 8002e40:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e44:	4013      	ands	r3, r2
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e4a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d119      	bne.n	8002e84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e5a:	085b      	lsrs	r3, r3, #1
 8002e5c:	3b01      	subs	r3, #1
 8002e5e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d10f      	bne.n	8002e84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e6e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d107      	bne.n	8002e84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d001      	beq.n	8002e88 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e000      	b.n	8002e8a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3718      	adds	r7, #24
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	40023800 	.word	0x40023800

08002e98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d101      	bne.n	8002eaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e03f      	b.n	8002f2a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d106      	bne.n	8002ec4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f7fd fea6 	bl	8000c10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2224      	movs	r2, #36	; 0x24
 8002ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	68da      	ldr	r2, [r3, #12]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002eda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f000 f929 	bl	8003134 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	691a      	ldr	r2, [r3, #16]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ef0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	695a      	ldr	r2, [r3, #20]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	68da      	ldr	r2, [r3, #12]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2220      	movs	r2, #32
 8002f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2220      	movs	r2, #32
 8002f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3708      	adds	r7, #8
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}

08002f32 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f32:	b580      	push	{r7, lr}
 8002f34:	b08a      	sub	sp, #40	; 0x28
 8002f36:	af02      	add	r7, sp, #8
 8002f38:	60f8      	str	r0, [r7, #12]
 8002f3a:	60b9      	str	r1, [r7, #8]
 8002f3c:	603b      	str	r3, [r7, #0]
 8002f3e:	4613      	mov	r3, r2
 8002f40:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f42:	2300      	movs	r3, #0
 8002f44:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b20      	cmp	r3, #32
 8002f50:	d17c      	bne.n	800304c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d002      	beq.n	8002f5e <HAL_UART_Transmit+0x2c>
 8002f58:	88fb      	ldrh	r3, [r7, #6]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d101      	bne.n	8002f62 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e075      	b.n	800304e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d101      	bne.n	8002f70 <HAL_UART_Transmit+0x3e>
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	e06e      	b.n	800304e <HAL_UART_Transmit+0x11c>
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2221      	movs	r2, #33	; 0x21
 8002f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f86:	f7fd ff1b 	bl	8000dc0 <HAL_GetTick>
 8002f8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	88fa      	ldrh	r2, [r7, #6]
 8002f90:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	88fa      	ldrh	r2, [r7, #6]
 8002f96:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fa0:	d108      	bne.n	8002fb4 <HAL_UART_Transmit+0x82>
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d104      	bne.n	8002fb4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002faa:	2300      	movs	r3, #0
 8002fac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	61bb      	str	r3, [r7, #24]
 8002fb2:	e003      	b.n	8002fbc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002fc4:	e02a      	b.n	800301c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	9300      	str	r3, [sp, #0]
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	2180      	movs	r1, #128	; 0x80
 8002fd0:	68f8      	ldr	r0, [r7, #12]
 8002fd2:	f000 f840 	bl	8003056 <UART_WaitOnFlagUntilTimeout>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d001      	beq.n	8002fe0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e036      	b.n	800304e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d10b      	bne.n	8002ffe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	881b      	ldrh	r3, [r3, #0]
 8002fea:	461a      	mov	r2, r3
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ff4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	3302      	adds	r3, #2
 8002ffa:	61bb      	str	r3, [r7, #24]
 8002ffc:	e007      	b.n	800300e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	781a      	ldrb	r2, [r3, #0]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	3301      	adds	r3, #1
 800300c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003012:	b29b      	uxth	r3, r3
 8003014:	3b01      	subs	r3, #1
 8003016:	b29a      	uxth	r2, r3
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003020:	b29b      	uxth	r3, r3
 8003022:	2b00      	cmp	r3, #0
 8003024:	d1cf      	bne.n	8002fc6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	9300      	str	r3, [sp, #0]
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	2200      	movs	r2, #0
 800302e:	2140      	movs	r1, #64	; 0x40
 8003030:	68f8      	ldr	r0, [r7, #12]
 8003032:	f000 f810 	bl	8003056 <UART_WaitOnFlagUntilTimeout>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d001      	beq.n	8003040 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e006      	b.n	800304e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2220      	movs	r2, #32
 8003044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003048:	2300      	movs	r3, #0
 800304a:	e000      	b.n	800304e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800304c:	2302      	movs	r3, #2
  }
}
 800304e:	4618      	mov	r0, r3
 8003050:	3720      	adds	r7, #32
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}

08003056 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003056:	b580      	push	{r7, lr}
 8003058:	b090      	sub	sp, #64	; 0x40
 800305a:	af00      	add	r7, sp, #0
 800305c:	60f8      	str	r0, [r7, #12]
 800305e:	60b9      	str	r1, [r7, #8]
 8003060:	603b      	str	r3, [r7, #0]
 8003062:	4613      	mov	r3, r2
 8003064:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003066:	e050      	b.n	800310a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003068:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800306a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800306e:	d04c      	beq.n	800310a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003070:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003072:	2b00      	cmp	r3, #0
 8003074:	d007      	beq.n	8003086 <UART_WaitOnFlagUntilTimeout+0x30>
 8003076:	f7fd fea3 	bl	8000dc0 <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003082:	429a      	cmp	r2, r3
 8003084:	d241      	bcs.n	800310a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	330c      	adds	r3, #12
 800308c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800308e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003090:	e853 3f00 	ldrex	r3, [r3]
 8003094:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003098:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800309c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	330c      	adds	r3, #12
 80030a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80030a6:	637a      	str	r2, [r7, #52]	; 0x34
 80030a8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80030ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030ae:	e841 2300 	strex	r3, r2, [r1]
 80030b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80030b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d1e5      	bne.n	8003086 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	3314      	adds	r3, #20
 80030c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	e853 3f00 	ldrex	r3, [r3]
 80030c8:	613b      	str	r3, [r7, #16]
   return(result);
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	f023 0301 	bic.w	r3, r3, #1
 80030d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	3314      	adds	r3, #20
 80030d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80030da:	623a      	str	r2, [r7, #32]
 80030dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030de:	69f9      	ldr	r1, [r7, #28]
 80030e0:	6a3a      	ldr	r2, [r7, #32]
 80030e2:	e841 2300 	strex	r3, r2, [r1]
 80030e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d1e5      	bne.n	80030ba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2220      	movs	r2, #32
 80030f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2220      	movs	r2, #32
 80030fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e00f      	b.n	800312a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	4013      	ands	r3, r2
 8003114:	68ba      	ldr	r2, [r7, #8]
 8003116:	429a      	cmp	r2, r3
 8003118:	bf0c      	ite	eq
 800311a:	2301      	moveq	r3, #1
 800311c:	2300      	movne	r3, #0
 800311e:	b2db      	uxtb	r3, r3
 8003120:	461a      	mov	r2, r3
 8003122:	79fb      	ldrb	r3, [r7, #7]
 8003124:	429a      	cmp	r2, r3
 8003126:	d09f      	beq.n	8003068 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3740      	adds	r7, #64	; 0x40
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
	...

08003134 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003134:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003138:	b0c0      	sub	sp, #256	; 0x100
 800313a:	af00      	add	r7, sp, #0
 800313c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	691b      	ldr	r3, [r3, #16]
 8003148:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800314c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003150:	68d9      	ldr	r1, [r3, #12]
 8003152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	ea40 0301 	orr.w	r3, r0, r1
 800315c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800315e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003162:	689a      	ldr	r2, [r3, #8]
 8003164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	431a      	orrs	r2, r3
 800316c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003170:	695b      	ldr	r3, [r3, #20]
 8003172:	431a      	orrs	r2, r3
 8003174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003178:	69db      	ldr	r3, [r3, #28]
 800317a:	4313      	orrs	r3, r2
 800317c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800318c:	f021 010c 	bic.w	r1, r1, #12
 8003190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800319a:	430b      	orrs	r3, r1
 800319c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800319e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	695b      	ldr	r3, [r3, #20]
 80031a6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80031aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031ae:	6999      	ldr	r1, [r3, #24]
 80031b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	ea40 0301 	orr.w	r3, r0, r1
 80031ba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80031bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	4b8f      	ldr	r3, [pc, #572]	; (8003400 <UART_SetConfig+0x2cc>)
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d005      	beq.n	80031d4 <UART_SetConfig+0xa0>
 80031c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	4b8d      	ldr	r3, [pc, #564]	; (8003404 <UART_SetConfig+0x2d0>)
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d104      	bne.n	80031de <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80031d4:	f7ff f97e 	bl	80024d4 <HAL_RCC_GetPCLK2Freq>
 80031d8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80031dc:	e003      	b.n	80031e6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80031de:	f7ff f965 	bl	80024ac <HAL_RCC_GetPCLK1Freq>
 80031e2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031ea:	69db      	ldr	r3, [r3, #28]
 80031ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031f0:	f040 810c 	bne.w	800340c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80031f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031f8:	2200      	movs	r2, #0
 80031fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80031fe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003202:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003206:	4622      	mov	r2, r4
 8003208:	462b      	mov	r3, r5
 800320a:	1891      	adds	r1, r2, r2
 800320c:	65b9      	str	r1, [r7, #88]	; 0x58
 800320e:	415b      	adcs	r3, r3
 8003210:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003212:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003216:	4621      	mov	r1, r4
 8003218:	eb12 0801 	adds.w	r8, r2, r1
 800321c:	4629      	mov	r1, r5
 800321e:	eb43 0901 	adc.w	r9, r3, r1
 8003222:	f04f 0200 	mov.w	r2, #0
 8003226:	f04f 0300 	mov.w	r3, #0
 800322a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800322e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003232:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003236:	4690      	mov	r8, r2
 8003238:	4699      	mov	r9, r3
 800323a:	4623      	mov	r3, r4
 800323c:	eb18 0303 	adds.w	r3, r8, r3
 8003240:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003244:	462b      	mov	r3, r5
 8003246:	eb49 0303 	adc.w	r3, r9, r3
 800324a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800324e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800325a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800325e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003262:	460b      	mov	r3, r1
 8003264:	18db      	adds	r3, r3, r3
 8003266:	653b      	str	r3, [r7, #80]	; 0x50
 8003268:	4613      	mov	r3, r2
 800326a:	eb42 0303 	adc.w	r3, r2, r3
 800326e:	657b      	str	r3, [r7, #84]	; 0x54
 8003270:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003274:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003278:	f7fd f81a 	bl	80002b0 <__aeabi_uldivmod>
 800327c:	4602      	mov	r2, r0
 800327e:	460b      	mov	r3, r1
 8003280:	4b61      	ldr	r3, [pc, #388]	; (8003408 <UART_SetConfig+0x2d4>)
 8003282:	fba3 2302 	umull	r2, r3, r3, r2
 8003286:	095b      	lsrs	r3, r3, #5
 8003288:	011c      	lsls	r4, r3, #4
 800328a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800328e:	2200      	movs	r2, #0
 8003290:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003294:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003298:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800329c:	4642      	mov	r2, r8
 800329e:	464b      	mov	r3, r9
 80032a0:	1891      	adds	r1, r2, r2
 80032a2:	64b9      	str	r1, [r7, #72]	; 0x48
 80032a4:	415b      	adcs	r3, r3
 80032a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80032ac:	4641      	mov	r1, r8
 80032ae:	eb12 0a01 	adds.w	sl, r2, r1
 80032b2:	4649      	mov	r1, r9
 80032b4:	eb43 0b01 	adc.w	fp, r3, r1
 80032b8:	f04f 0200 	mov.w	r2, #0
 80032bc:	f04f 0300 	mov.w	r3, #0
 80032c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80032c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80032c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032cc:	4692      	mov	sl, r2
 80032ce:	469b      	mov	fp, r3
 80032d0:	4643      	mov	r3, r8
 80032d2:	eb1a 0303 	adds.w	r3, sl, r3
 80032d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80032da:	464b      	mov	r3, r9
 80032dc:	eb4b 0303 	adc.w	r3, fp, r3
 80032e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80032e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80032f0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80032f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80032f8:	460b      	mov	r3, r1
 80032fa:	18db      	adds	r3, r3, r3
 80032fc:	643b      	str	r3, [r7, #64]	; 0x40
 80032fe:	4613      	mov	r3, r2
 8003300:	eb42 0303 	adc.w	r3, r2, r3
 8003304:	647b      	str	r3, [r7, #68]	; 0x44
 8003306:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800330a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800330e:	f7fc ffcf 	bl	80002b0 <__aeabi_uldivmod>
 8003312:	4602      	mov	r2, r0
 8003314:	460b      	mov	r3, r1
 8003316:	4611      	mov	r1, r2
 8003318:	4b3b      	ldr	r3, [pc, #236]	; (8003408 <UART_SetConfig+0x2d4>)
 800331a:	fba3 2301 	umull	r2, r3, r3, r1
 800331e:	095b      	lsrs	r3, r3, #5
 8003320:	2264      	movs	r2, #100	; 0x64
 8003322:	fb02 f303 	mul.w	r3, r2, r3
 8003326:	1acb      	subs	r3, r1, r3
 8003328:	00db      	lsls	r3, r3, #3
 800332a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800332e:	4b36      	ldr	r3, [pc, #216]	; (8003408 <UART_SetConfig+0x2d4>)
 8003330:	fba3 2302 	umull	r2, r3, r3, r2
 8003334:	095b      	lsrs	r3, r3, #5
 8003336:	005b      	lsls	r3, r3, #1
 8003338:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800333c:	441c      	add	r4, r3
 800333e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003342:	2200      	movs	r2, #0
 8003344:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003348:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800334c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003350:	4642      	mov	r2, r8
 8003352:	464b      	mov	r3, r9
 8003354:	1891      	adds	r1, r2, r2
 8003356:	63b9      	str	r1, [r7, #56]	; 0x38
 8003358:	415b      	adcs	r3, r3
 800335a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800335c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003360:	4641      	mov	r1, r8
 8003362:	1851      	adds	r1, r2, r1
 8003364:	6339      	str	r1, [r7, #48]	; 0x30
 8003366:	4649      	mov	r1, r9
 8003368:	414b      	adcs	r3, r1
 800336a:	637b      	str	r3, [r7, #52]	; 0x34
 800336c:	f04f 0200 	mov.w	r2, #0
 8003370:	f04f 0300 	mov.w	r3, #0
 8003374:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003378:	4659      	mov	r1, fp
 800337a:	00cb      	lsls	r3, r1, #3
 800337c:	4651      	mov	r1, sl
 800337e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003382:	4651      	mov	r1, sl
 8003384:	00ca      	lsls	r2, r1, #3
 8003386:	4610      	mov	r0, r2
 8003388:	4619      	mov	r1, r3
 800338a:	4603      	mov	r3, r0
 800338c:	4642      	mov	r2, r8
 800338e:	189b      	adds	r3, r3, r2
 8003390:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003394:	464b      	mov	r3, r9
 8003396:	460a      	mov	r2, r1
 8003398:	eb42 0303 	adc.w	r3, r2, r3
 800339c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80033a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80033ac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80033b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80033b4:	460b      	mov	r3, r1
 80033b6:	18db      	adds	r3, r3, r3
 80033b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80033ba:	4613      	mov	r3, r2
 80033bc:	eb42 0303 	adc.w	r3, r2, r3
 80033c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80033c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80033ca:	f7fc ff71 	bl	80002b0 <__aeabi_uldivmod>
 80033ce:	4602      	mov	r2, r0
 80033d0:	460b      	mov	r3, r1
 80033d2:	4b0d      	ldr	r3, [pc, #52]	; (8003408 <UART_SetConfig+0x2d4>)
 80033d4:	fba3 1302 	umull	r1, r3, r3, r2
 80033d8:	095b      	lsrs	r3, r3, #5
 80033da:	2164      	movs	r1, #100	; 0x64
 80033dc:	fb01 f303 	mul.w	r3, r1, r3
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	00db      	lsls	r3, r3, #3
 80033e4:	3332      	adds	r3, #50	; 0x32
 80033e6:	4a08      	ldr	r2, [pc, #32]	; (8003408 <UART_SetConfig+0x2d4>)
 80033e8:	fba2 2303 	umull	r2, r3, r2, r3
 80033ec:	095b      	lsrs	r3, r3, #5
 80033ee:	f003 0207 	and.w	r2, r3, #7
 80033f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4422      	add	r2, r4
 80033fa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80033fc:	e105      	b.n	800360a <UART_SetConfig+0x4d6>
 80033fe:	bf00      	nop
 8003400:	40011000 	.word	0x40011000
 8003404:	40011400 	.word	0x40011400
 8003408:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800340c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003410:	2200      	movs	r2, #0
 8003412:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003416:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800341a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800341e:	4642      	mov	r2, r8
 8003420:	464b      	mov	r3, r9
 8003422:	1891      	adds	r1, r2, r2
 8003424:	6239      	str	r1, [r7, #32]
 8003426:	415b      	adcs	r3, r3
 8003428:	627b      	str	r3, [r7, #36]	; 0x24
 800342a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800342e:	4641      	mov	r1, r8
 8003430:	1854      	adds	r4, r2, r1
 8003432:	4649      	mov	r1, r9
 8003434:	eb43 0501 	adc.w	r5, r3, r1
 8003438:	f04f 0200 	mov.w	r2, #0
 800343c:	f04f 0300 	mov.w	r3, #0
 8003440:	00eb      	lsls	r3, r5, #3
 8003442:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003446:	00e2      	lsls	r2, r4, #3
 8003448:	4614      	mov	r4, r2
 800344a:	461d      	mov	r5, r3
 800344c:	4643      	mov	r3, r8
 800344e:	18e3      	adds	r3, r4, r3
 8003450:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003454:	464b      	mov	r3, r9
 8003456:	eb45 0303 	adc.w	r3, r5, r3
 800345a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800345e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800346a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800346e:	f04f 0200 	mov.w	r2, #0
 8003472:	f04f 0300 	mov.w	r3, #0
 8003476:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800347a:	4629      	mov	r1, r5
 800347c:	008b      	lsls	r3, r1, #2
 800347e:	4621      	mov	r1, r4
 8003480:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003484:	4621      	mov	r1, r4
 8003486:	008a      	lsls	r2, r1, #2
 8003488:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800348c:	f7fc ff10 	bl	80002b0 <__aeabi_uldivmod>
 8003490:	4602      	mov	r2, r0
 8003492:	460b      	mov	r3, r1
 8003494:	4b60      	ldr	r3, [pc, #384]	; (8003618 <UART_SetConfig+0x4e4>)
 8003496:	fba3 2302 	umull	r2, r3, r3, r2
 800349a:	095b      	lsrs	r3, r3, #5
 800349c:	011c      	lsls	r4, r3, #4
 800349e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034a2:	2200      	movs	r2, #0
 80034a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80034a8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80034ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80034b0:	4642      	mov	r2, r8
 80034b2:	464b      	mov	r3, r9
 80034b4:	1891      	adds	r1, r2, r2
 80034b6:	61b9      	str	r1, [r7, #24]
 80034b8:	415b      	adcs	r3, r3
 80034ba:	61fb      	str	r3, [r7, #28]
 80034bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034c0:	4641      	mov	r1, r8
 80034c2:	1851      	adds	r1, r2, r1
 80034c4:	6139      	str	r1, [r7, #16]
 80034c6:	4649      	mov	r1, r9
 80034c8:	414b      	adcs	r3, r1
 80034ca:	617b      	str	r3, [r7, #20]
 80034cc:	f04f 0200 	mov.w	r2, #0
 80034d0:	f04f 0300 	mov.w	r3, #0
 80034d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034d8:	4659      	mov	r1, fp
 80034da:	00cb      	lsls	r3, r1, #3
 80034dc:	4651      	mov	r1, sl
 80034de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034e2:	4651      	mov	r1, sl
 80034e4:	00ca      	lsls	r2, r1, #3
 80034e6:	4610      	mov	r0, r2
 80034e8:	4619      	mov	r1, r3
 80034ea:	4603      	mov	r3, r0
 80034ec:	4642      	mov	r2, r8
 80034ee:	189b      	adds	r3, r3, r2
 80034f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80034f4:	464b      	mov	r3, r9
 80034f6:	460a      	mov	r2, r1
 80034f8:	eb42 0303 	adc.w	r3, r2, r3
 80034fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	67bb      	str	r3, [r7, #120]	; 0x78
 800350a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800350c:	f04f 0200 	mov.w	r2, #0
 8003510:	f04f 0300 	mov.w	r3, #0
 8003514:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003518:	4649      	mov	r1, r9
 800351a:	008b      	lsls	r3, r1, #2
 800351c:	4641      	mov	r1, r8
 800351e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003522:	4641      	mov	r1, r8
 8003524:	008a      	lsls	r2, r1, #2
 8003526:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800352a:	f7fc fec1 	bl	80002b0 <__aeabi_uldivmod>
 800352e:	4602      	mov	r2, r0
 8003530:	460b      	mov	r3, r1
 8003532:	4b39      	ldr	r3, [pc, #228]	; (8003618 <UART_SetConfig+0x4e4>)
 8003534:	fba3 1302 	umull	r1, r3, r3, r2
 8003538:	095b      	lsrs	r3, r3, #5
 800353a:	2164      	movs	r1, #100	; 0x64
 800353c:	fb01 f303 	mul.w	r3, r1, r3
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	011b      	lsls	r3, r3, #4
 8003544:	3332      	adds	r3, #50	; 0x32
 8003546:	4a34      	ldr	r2, [pc, #208]	; (8003618 <UART_SetConfig+0x4e4>)
 8003548:	fba2 2303 	umull	r2, r3, r2, r3
 800354c:	095b      	lsrs	r3, r3, #5
 800354e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003552:	441c      	add	r4, r3
 8003554:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003558:	2200      	movs	r2, #0
 800355a:	673b      	str	r3, [r7, #112]	; 0x70
 800355c:	677a      	str	r2, [r7, #116]	; 0x74
 800355e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003562:	4642      	mov	r2, r8
 8003564:	464b      	mov	r3, r9
 8003566:	1891      	adds	r1, r2, r2
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	415b      	adcs	r3, r3
 800356c:	60fb      	str	r3, [r7, #12]
 800356e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003572:	4641      	mov	r1, r8
 8003574:	1851      	adds	r1, r2, r1
 8003576:	6039      	str	r1, [r7, #0]
 8003578:	4649      	mov	r1, r9
 800357a:	414b      	adcs	r3, r1
 800357c:	607b      	str	r3, [r7, #4]
 800357e:	f04f 0200 	mov.w	r2, #0
 8003582:	f04f 0300 	mov.w	r3, #0
 8003586:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800358a:	4659      	mov	r1, fp
 800358c:	00cb      	lsls	r3, r1, #3
 800358e:	4651      	mov	r1, sl
 8003590:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003594:	4651      	mov	r1, sl
 8003596:	00ca      	lsls	r2, r1, #3
 8003598:	4610      	mov	r0, r2
 800359a:	4619      	mov	r1, r3
 800359c:	4603      	mov	r3, r0
 800359e:	4642      	mov	r2, r8
 80035a0:	189b      	adds	r3, r3, r2
 80035a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80035a4:	464b      	mov	r3, r9
 80035a6:	460a      	mov	r2, r1
 80035a8:	eb42 0303 	adc.w	r3, r2, r3
 80035ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80035ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	663b      	str	r3, [r7, #96]	; 0x60
 80035b8:	667a      	str	r2, [r7, #100]	; 0x64
 80035ba:	f04f 0200 	mov.w	r2, #0
 80035be:	f04f 0300 	mov.w	r3, #0
 80035c2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80035c6:	4649      	mov	r1, r9
 80035c8:	008b      	lsls	r3, r1, #2
 80035ca:	4641      	mov	r1, r8
 80035cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035d0:	4641      	mov	r1, r8
 80035d2:	008a      	lsls	r2, r1, #2
 80035d4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80035d8:	f7fc fe6a 	bl	80002b0 <__aeabi_uldivmod>
 80035dc:	4602      	mov	r2, r0
 80035de:	460b      	mov	r3, r1
 80035e0:	4b0d      	ldr	r3, [pc, #52]	; (8003618 <UART_SetConfig+0x4e4>)
 80035e2:	fba3 1302 	umull	r1, r3, r3, r2
 80035e6:	095b      	lsrs	r3, r3, #5
 80035e8:	2164      	movs	r1, #100	; 0x64
 80035ea:	fb01 f303 	mul.w	r3, r1, r3
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	011b      	lsls	r3, r3, #4
 80035f2:	3332      	adds	r3, #50	; 0x32
 80035f4:	4a08      	ldr	r2, [pc, #32]	; (8003618 <UART_SetConfig+0x4e4>)
 80035f6:	fba2 2303 	umull	r2, r3, r2, r3
 80035fa:	095b      	lsrs	r3, r3, #5
 80035fc:	f003 020f 	and.w	r2, r3, #15
 8003600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4422      	add	r2, r4
 8003608:	609a      	str	r2, [r3, #8]
}
 800360a:	bf00      	nop
 800360c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003610:	46bd      	mov	sp, r7
 8003612:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003616:	bf00      	nop
 8003618:	51eb851f 	.word	0x51eb851f

0800361c <__errno>:
 800361c:	4b01      	ldr	r3, [pc, #4]	; (8003624 <__errno+0x8>)
 800361e:	6818      	ldr	r0, [r3, #0]
 8003620:	4770      	bx	lr
 8003622:	bf00      	nop
 8003624:	2000000c 	.word	0x2000000c

08003628 <__libc_init_array>:
 8003628:	b570      	push	{r4, r5, r6, lr}
 800362a:	4d0d      	ldr	r5, [pc, #52]	; (8003660 <__libc_init_array+0x38>)
 800362c:	4c0d      	ldr	r4, [pc, #52]	; (8003664 <__libc_init_array+0x3c>)
 800362e:	1b64      	subs	r4, r4, r5
 8003630:	10a4      	asrs	r4, r4, #2
 8003632:	2600      	movs	r6, #0
 8003634:	42a6      	cmp	r6, r4
 8003636:	d109      	bne.n	800364c <__libc_init_array+0x24>
 8003638:	4d0b      	ldr	r5, [pc, #44]	; (8003668 <__libc_init_array+0x40>)
 800363a:	4c0c      	ldr	r4, [pc, #48]	; (800366c <__libc_init_array+0x44>)
 800363c:	f001 f824 	bl	8004688 <_init>
 8003640:	1b64      	subs	r4, r4, r5
 8003642:	10a4      	asrs	r4, r4, #2
 8003644:	2600      	movs	r6, #0
 8003646:	42a6      	cmp	r6, r4
 8003648:	d105      	bne.n	8003656 <__libc_init_array+0x2e>
 800364a:	bd70      	pop	{r4, r5, r6, pc}
 800364c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003650:	4798      	blx	r3
 8003652:	3601      	adds	r6, #1
 8003654:	e7ee      	b.n	8003634 <__libc_init_array+0xc>
 8003656:	f855 3b04 	ldr.w	r3, [r5], #4
 800365a:	4798      	blx	r3
 800365c:	3601      	adds	r6, #1
 800365e:	e7f2      	b.n	8003646 <__libc_init_array+0x1e>
 8003660:	080047e4 	.word	0x080047e4
 8003664:	080047e4 	.word	0x080047e4
 8003668:	080047e4 	.word	0x080047e4
 800366c:	080047e8 	.word	0x080047e8

08003670 <memset>:
 8003670:	4402      	add	r2, r0
 8003672:	4603      	mov	r3, r0
 8003674:	4293      	cmp	r3, r2
 8003676:	d100      	bne.n	800367a <memset+0xa>
 8003678:	4770      	bx	lr
 800367a:	f803 1b01 	strb.w	r1, [r3], #1
 800367e:	e7f9      	b.n	8003674 <memset+0x4>

08003680 <iprintf>:
 8003680:	b40f      	push	{r0, r1, r2, r3}
 8003682:	4b0a      	ldr	r3, [pc, #40]	; (80036ac <iprintf+0x2c>)
 8003684:	b513      	push	{r0, r1, r4, lr}
 8003686:	681c      	ldr	r4, [r3, #0]
 8003688:	b124      	cbz	r4, 8003694 <iprintf+0x14>
 800368a:	69a3      	ldr	r3, [r4, #24]
 800368c:	b913      	cbnz	r3, 8003694 <iprintf+0x14>
 800368e:	4620      	mov	r0, r4
 8003690:	f000 fa5e 	bl	8003b50 <__sinit>
 8003694:	ab05      	add	r3, sp, #20
 8003696:	9a04      	ldr	r2, [sp, #16]
 8003698:	68a1      	ldr	r1, [r4, #8]
 800369a:	9301      	str	r3, [sp, #4]
 800369c:	4620      	mov	r0, r4
 800369e:	f000 fc67 	bl	8003f70 <_vfiprintf_r>
 80036a2:	b002      	add	sp, #8
 80036a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036a8:	b004      	add	sp, #16
 80036aa:	4770      	bx	lr
 80036ac:	2000000c 	.word	0x2000000c

080036b0 <_puts_r>:
 80036b0:	b570      	push	{r4, r5, r6, lr}
 80036b2:	460e      	mov	r6, r1
 80036b4:	4605      	mov	r5, r0
 80036b6:	b118      	cbz	r0, 80036c0 <_puts_r+0x10>
 80036b8:	6983      	ldr	r3, [r0, #24]
 80036ba:	b90b      	cbnz	r3, 80036c0 <_puts_r+0x10>
 80036bc:	f000 fa48 	bl	8003b50 <__sinit>
 80036c0:	69ab      	ldr	r3, [r5, #24]
 80036c2:	68ac      	ldr	r4, [r5, #8]
 80036c4:	b913      	cbnz	r3, 80036cc <_puts_r+0x1c>
 80036c6:	4628      	mov	r0, r5
 80036c8:	f000 fa42 	bl	8003b50 <__sinit>
 80036cc:	4b2c      	ldr	r3, [pc, #176]	; (8003780 <_puts_r+0xd0>)
 80036ce:	429c      	cmp	r4, r3
 80036d0:	d120      	bne.n	8003714 <_puts_r+0x64>
 80036d2:	686c      	ldr	r4, [r5, #4]
 80036d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80036d6:	07db      	lsls	r3, r3, #31
 80036d8:	d405      	bmi.n	80036e6 <_puts_r+0x36>
 80036da:	89a3      	ldrh	r3, [r4, #12]
 80036dc:	0598      	lsls	r0, r3, #22
 80036de:	d402      	bmi.n	80036e6 <_puts_r+0x36>
 80036e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80036e2:	f000 fad3 	bl	8003c8c <__retarget_lock_acquire_recursive>
 80036e6:	89a3      	ldrh	r3, [r4, #12]
 80036e8:	0719      	lsls	r1, r3, #28
 80036ea:	d51d      	bpl.n	8003728 <_puts_r+0x78>
 80036ec:	6923      	ldr	r3, [r4, #16]
 80036ee:	b1db      	cbz	r3, 8003728 <_puts_r+0x78>
 80036f0:	3e01      	subs	r6, #1
 80036f2:	68a3      	ldr	r3, [r4, #8]
 80036f4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80036f8:	3b01      	subs	r3, #1
 80036fa:	60a3      	str	r3, [r4, #8]
 80036fc:	bb39      	cbnz	r1, 800374e <_puts_r+0x9e>
 80036fe:	2b00      	cmp	r3, #0
 8003700:	da38      	bge.n	8003774 <_puts_r+0xc4>
 8003702:	4622      	mov	r2, r4
 8003704:	210a      	movs	r1, #10
 8003706:	4628      	mov	r0, r5
 8003708:	f000 f848 	bl	800379c <__swbuf_r>
 800370c:	3001      	adds	r0, #1
 800370e:	d011      	beq.n	8003734 <_puts_r+0x84>
 8003710:	250a      	movs	r5, #10
 8003712:	e011      	b.n	8003738 <_puts_r+0x88>
 8003714:	4b1b      	ldr	r3, [pc, #108]	; (8003784 <_puts_r+0xd4>)
 8003716:	429c      	cmp	r4, r3
 8003718:	d101      	bne.n	800371e <_puts_r+0x6e>
 800371a:	68ac      	ldr	r4, [r5, #8]
 800371c:	e7da      	b.n	80036d4 <_puts_r+0x24>
 800371e:	4b1a      	ldr	r3, [pc, #104]	; (8003788 <_puts_r+0xd8>)
 8003720:	429c      	cmp	r4, r3
 8003722:	bf08      	it	eq
 8003724:	68ec      	ldreq	r4, [r5, #12]
 8003726:	e7d5      	b.n	80036d4 <_puts_r+0x24>
 8003728:	4621      	mov	r1, r4
 800372a:	4628      	mov	r0, r5
 800372c:	f000 f888 	bl	8003840 <__swsetup_r>
 8003730:	2800      	cmp	r0, #0
 8003732:	d0dd      	beq.n	80036f0 <_puts_r+0x40>
 8003734:	f04f 35ff 	mov.w	r5, #4294967295
 8003738:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800373a:	07da      	lsls	r2, r3, #31
 800373c:	d405      	bmi.n	800374a <_puts_r+0x9a>
 800373e:	89a3      	ldrh	r3, [r4, #12]
 8003740:	059b      	lsls	r3, r3, #22
 8003742:	d402      	bmi.n	800374a <_puts_r+0x9a>
 8003744:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003746:	f000 faa2 	bl	8003c8e <__retarget_lock_release_recursive>
 800374a:	4628      	mov	r0, r5
 800374c:	bd70      	pop	{r4, r5, r6, pc}
 800374e:	2b00      	cmp	r3, #0
 8003750:	da04      	bge.n	800375c <_puts_r+0xac>
 8003752:	69a2      	ldr	r2, [r4, #24]
 8003754:	429a      	cmp	r2, r3
 8003756:	dc06      	bgt.n	8003766 <_puts_r+0xb6>
 8003758:	290a      	cmp	r1, #10
 800375a:	d004      	beq.n	8003766 <_puts_r+0xb6>
 800375c:	6823      	ldr	r3, [r4, #0]
 800375e:	1c5a      	adds	r2, r3, #1
 8003760:	6022      	str	r2, [r4, #0]
 8003762:	7019      	strb	r1, [r3, #0]
 8003764:	e7c5      	b.n	80036f2 <_puts_r+0x42>
 8003766:	4622      	mov	r2, r4
 8003768:	4628      	mov	r0, r5
 800376a:	f000 f817 	bl	800379c <__swbuf_r>
 800376e:	3001      	adds	r0, #1
 8003770:	d1bf      	bne.n	80036f2 <_puts_r+0x42>
 8003772:	e7df      	b.n	8003734 <_puts_r+0x84>
 8003774:	6823      	ldr	r3, [r4, #0]
 8003776:	250a      	movs	r5, #10
 8003778:	1c5a      	adds	r2, r3, #1
 800377a:	6022      	str	r2, [r4, #0]
 800377c:	701d      	strb	r5, [r3, #0]
 800377e:	e7db      	b.n	8003738 <_puts_r+0x88>
 8003780:	08004768 	.word	0x08004768
 8003784:	08004788 	.word	0x08004788
 8003788:	08004748 	.word	0x08004748

0800378c <puts>:
 800378c:	4b02      	ldr	r3, [pc, #8]	; (8003798 <puts+0xc>)
 800378e:	4601      	mov	r1, r0
 8003790:	6818      	ldr	r0, [r3, #0]
 8003792:	f7ff bf8d 	b.w	80036b0 <_puts_r>
 8003796:	bf00      	nop
 8003798:	2000000c 	.word	0x2000000c

0800379c <__swbuf_r>:
 800379c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800379e:	460e      	mov	r6, r1
 80037a0:	4614      	mov	r4, r2
 80037a2:	4605      	mov	r5, r0
 80037a4:	b118      	cbz	r0, 80037ae <__swbuf_r+0x12>
 80037a6:	6983      	ldr	r3, [r0, #24]
 80037a8:	b90b      	cbnz	r3, 80037ae <__swbuf_r+0x12>
 80037aa:	f000 f9d1 	bl	8003b50 <__sinit>
 80037ae:	4b21      	ldr	r3, [pc, #132]	; (8003834 <__swbuf_r+0x98>)
 80037b0:	429c      	cmp	r4, r3
 80037b2:	d12b      	bne.n	800380c <__swbuf_r+0x70>
 80037b4:	686c      	ldr	r4, [r5, #4]
 80037b6:	69a3      	ldr	r3, [r4, #24]
 80037b8:	60a3      	str	r3, [r4, #8]
 80037ba:	89a3      	ldrh	r3, [r4, #12]
 80037bc:	071a      	lsls	r2, r3, #28
 80037be:	d52f      	bpl.n	8003820 <__swbuf_r+0x84>
 80037c0:	6923      	ldr	r3, [r4, #16]
 80037c2:	b36b      	cbz	r3, 8003820 <__swbuf_r+0x84>
 80037c4:	6923      	ldr	r3, [r4, #16]
 80037c6:	6820      	ldr	r0, [r4, #0]
 80037c8:	1ac0      	subs	r0, r0, r3
 80037ca:	6963      	ldr	r3, [r4, #20]
 80037cc:	b2f6      	uxtb	r6, r6
 80037ce:	4283      	cmp	r3, r0
 80037d0:	4637      	mov	r7, r6
 80037d2:	dc04      	bgt.n	80037de <__swbuf_r+0x42>
 80037d4:	4621      	mov	r1, r4
 80037d6:	4628      	mov	r0, r5
 80037d8:	f000 f926 	bl	8003a28 <_fflush_r>
 80037dc:	bb30      	cbnz	r0, 800382c <__swbuf_r+0x90>
 80037de:	68a3      	ldr	r3, [r4, #8]
 80037e0:	3b01      	subs	r3, #1
 80037e2:	60a3      	str	r3, [r4, #8]
 80037e4:	6823      	ldr	r3, [r4, #0]
 80037e6:	1c5a      	adds	r2, r3, #1
 80037e8:	6022      	str	r2, [r4, #0]
 80037ea:	701e      	strb	r6, [r3, #0]
 80037ec:	6963      	ldr	r3, [r4, #20]
 80037ee:	3001      	adds	r0, #1
 80037f0:	4283      	cmp	r3, r0
 80037f2:	d004      	beq.n	80037fe <__swbuf_r+0x62>
 80037f4:	89a3      	ldrh	r3, [r4, #12]
 80037f6:	07db      	lsls	r3, r3, #31
 80037f8:	d506      	bpl.n	8003808 <__swbuf_r+0x6c>
 80037fa:	2e0a      	cmp	r6, #10
 80037fc:	d104      	bne.n	8003808 <__swbuf_r+0x6c>
 80037fe:	4621      	mov	r1, r4
 8003800:	4628      	mov	r0, r5
 8003802:	f000 f911 	bl	8003a28 <_fflush_r>
 8003806:	b988      	cbnz	r0, 800382c <__swbuf_r+0x90>
 8003808:	4638      	mov	r0, r7
 800380a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800380c:	4b0a      	ldr	r3, [pc, #40]	; (8003838 <__swbuf_r+0x9c>)
 800380e:	429c      	cmp	r4, r3
 8003810:	d101      	bne.n	8003816 <__swbuf_r+0x7a>
 8003812:	68ac      	ldr	r4, [r5, #8]
 8003814:	e7cf      	b.n	80037b6 <__swbuf_r+0x1a>
 8003816:	4b09      	ldr	r3, [pc, #36]	; (800383c <__swbuf_r+0xa0>)
 8003818:	429c      	cmp	r4, r3
 800381a:	bf08      	it	eq
 800381c:	68ec      	ldreq	r4, [r5, #12]
 800381e:	e7ca      	b.n	80037b6 <__swbuf_r+0x1a>
 8003820:	4621      	mov	r1, r4
 8003822:	4628      	mov	r0, r5
 8003824:	f000 f80c 	bl	8003840 <__swsetup_r>
 8003828:	2800      	cmp	r0, #0
 800382a:	d0cb      	beq.n	80037c4 <__swbuf_r+0x28>
 800382c:	f04f 37ff 	mov.w	r7, #4294967295
 8003830:	e7ea      	b.n	8003808 <__swbuf_r+0x6c>
 8003832:	bf00      	nop
 8003834:	08004768 	.word	0x08004768
 8003838:	08004788 	.word	0x08004788
 800383c:	08004748 	.word	0x08004748

08003840 <__swsetup_r>:
 8003840:	4b32      	ldr	r3, [pc, #200]	; (800390c <__swsetup_r+0xcc>)
 8003842:	b570      	push	{r4, r5, r6, lr}
 8003844:	681d      	ldr	r5, [r3, #0]
 8003846:	4606      	mov	r6, r0
 8003848:	460c      	mov	r4, r1
 800384a:	b125      	cbz	r5, 8003856 <__swsetup_r+0x16>
 800384c:	69ab      	ldr	r3, [r5, #24]
 800384e:	b913      	cbnz	r3, 8003856 <__swsetup_r+0x16>
 8003850:	4628      	mov	r0, r5
 8003852:	f000 f97d 	bl	8003b50 <__sinit>
 8003856:	4b2e      	ldr	r3, [pc, #184]	; (8003910 <__swsetup_r+0xd0>)
 8003858:	429c      	cmp	r4, r3
 800385a:	d10f      	bne.n	800387c <__swsetup_r+0x3c>
 800385c:	686c      	ldr	r4, [r5, #4]
 800385e:	89a3      	ldrh	r3, [r4, #12]
 8003860:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003864:	0719      	lsls	r1, r3, #28
 8003866:	d42c      	bmi.n	80038c2 <__swsetup_r+0x82>
 8003868:	06dd      	lsls	r5, r3, #27
 800386a:	d411      	bmi.n	8003890 <__swsetup_r+0x50>
 800386c:	2309      	movs	r3, #9
 800386e:	6033      	str	r3, [r6, #0]
 8003870:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003874:	81a3      	strh	r3, [r4, #12]
 8003876:	f04f 30ff 	mov.w	r0, #4294967295
 800387a:	e03e      	b.n	80038fa <__swsetup_r+0xba>
 800387c:	4b25      	ldr	r3, [pc, #148]	; (8003914 <__swsetup_r+0xd4>)
 800387e:	429c      	cmp	r4, r3
 8003880:	d101      	bne.n	8003886 <__swsetup_r+0x46>
 8003882:	68ac      	ldr	r4, [r5, #8]
 8003884:	e7eb      	b.n	800385e <__swsetup_r+0x1e>
 8003886:	4b24      	ldr	r3, [pc, #144]	; (8003918 <__swsetup_r+0xd8>)
 8003888:	429c      	cmp	r4, r3
 800388a:	bf08      	it	eq
 800388c:	68ec      	ldreq	r4, [r5, #12]
 800388e:	e7e6      	b.n	800385e <__swsetup_r+0x1e>
 8003890:	0758      	lsls	r0, r3, #29
 8003892:	d512      	bpl.n	80038ba <__swsetup_r+0x7a>
 8003894:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003896:	b141      	cbz	r1, 80038aa <__swsetup_r+0x6a>
 8003898:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800389c:	4299      	cmp	r1, r3
 800389e:	d002      	beq.n	80038a6 <__swsetup_r+0x66>
 80038a0:	4630      	mov	r0, r6
 80038a2:	f000 fa5b 	bl	8003d5c <_free_r>
 80038a6:	2300      	movs	r3, #0
 80038a8:	6363      	str	r3, [r4, #52]	; 0x34
 80038aa:	89a3      	ldrh	r3, [r4, #12]
 80038ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80038b0:	81a3      	strh	r3, [r4, #12]
 80038b2:	2300      	movs	r3, #0
 80038b4:	6063      	str	r3, [r4, #4]
 80038b6:	6923      	ldr	r3, [r4, #16]
 80038b8:	6023      	str	r3, [r4, #0]
 80038ba:	89a3      	ldrh	r3, [r4, #12]
 80038bc:	f043 0308 	orr.w	r3, r3, #8
 80038c0:	81a3      	strh	r3, [r4, #12]
 80038c2:	6923      	ldr	r3, [r4, #16]
 80038c4:	b94b      	cbnz	r3, 80038da <__swsetup_r+0x9a>
 80038c6:	89a3      	ldrh	r3, [r4, #12]
 80038c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80038cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038d0:	d003      	beq.n	80038da <__swsetup_r+0x9a>
 80038d2:	4621      	mov	r1, r4
 80038d4:	4630      	mov	r0, r6
 80038d6:	f000 fa01 	bl	8003cdc <__smakebuf_r>
 80038da:	89a0      	ldrh	r0, [r4, #12]
 80038dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80038e0:	f010 0301 	ands.w	r3, r0, #1
 80038e4:	d00a      	beq.n	80038fc <__swsetup_r+0xbc>
 80038e6:	2300      	movs	r3, #0
 80038e8:	60a3      	str	r3, [r4, #8]
 80038ea:	6963      	ldr	r3, [r4, #20]
 80038ec:	425b      	negs	r3, r3
 80038ee:	61a3      	str	r3, [r4, #24]
 80038f0:	6923      	ldr	r3, [r4, #16]
 80038f2:	b943      	cbnz	r3, 8003906 <__swsetup_r+0xc6>
 80038f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80038f8:	d1ba      	bne.n	8003870 <__swsetup_r+0x30>
 80038fa:	bd70      	pop	{r4, r5, r6, pc}
 80038fc:	0781      	lsls	r1, r0, #30
 80038fe:	bf58      	it	pl
 8003900:	6963      	ldrpl	r3, [r4, #20]
 8003902:	60a3      	str	r3, [r4, #8]
 8003904:	e7f4      	b.n	80038f0 <__swsetup_r+0xb0>
 8003906:	2000      	movs	r0, #0
 8003908:	e7f7      	b.n	80038fa <__swsetup_r+0xba>
 800390a:	bf00      	nop
 800390c:	2000000c 	.word	0x2000000c
 8003910:	08004768 	.word	0x08004768
 8003914:	08004788 	.word	0x08004788
 8003918:	08004748 	.word	0x08004748

0800391c <__sflush_r>:
 800391c:	898a      	ldrh	r2, [r1, #12]
 800391e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003922:	4605      	mov	r5, r0
 8003924:	0710      	lsls	r0, r2, #28
 8003926:	460c      	mov	r4, r1
 8003928:	d458      	bmi.n	80039dc <__sflush_r+0xc0>
 800392a:	684b      	ldr	r3, [r1, #4]
 800392c:	2b00      	cmp	r3, #0
 800392e:	dc05      	bgt.n	800393c <__sflush_r+0x20>
 8003930:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003932:	2b00      	cmp	r3, #0
 8003934:	dc02      	bgt.n	800393c <__sflush_r+0x20>
 8003936:	2000      	movs	r0, #0
 8003938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800393c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800393e:	2e00      	cmp	r6, #0
 8003940:	d0f9      	beq.n	8003936 <__sflush_r+0x1a>
 8003942:	2300      	movs	r3, #0
 8003944:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003948:	682f      	ldr	r7, [r5, #0]
 800394a:	602b      	str	r3, [r5, #0]
 800394c:	d032      	beq.n	80039b4 <__sflush_r+0x98>
 800394e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003950:	89a3      	ldrh	r3, [r4, #12]
 8003952:	075a      	lsls	r2, r3, #29
 8003954:	d505      	bpl.n	8003962 <__sflush_r+0x46>
 8003956:	6863      	ldr	r3, [r4, #4]
 8003958:	1ac0      	subs	r0, r0, r3
 800395a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800395c:	b10b      	cbz	r3, 8003962 <__sflush_r+0x46>
 800395e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003960:	1ac0      	subs	r0, r0, r3
 8003962:	2300      	movs	r3, #0
 8003964:	4602      	mov	r2, r0
 8003966:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003968:	6a21      	ldr	r1, [r4, #32]
 800396a:	4628      	mov	r0, r5
 800396c:	47b0      	blx	r6
 800396e:	1c43      	adds	r3, r0, #1
 8003970:	89a3      	ldrh	r3, [r4, #12]
 8003972:	d106      	bne.n	8003982 <__sflush_r+0x66>
 8003974:	6829      	ldr	r1, [r5, #0]
 8003976:	291d      	cmp	r1, #29
 8003978:	d82c      	bhi.n	80039d4 <__sflush_r+0xb8>
 800397a:	4a2a      	ldr	r2, [pc, #168]	; (8003a24 <__sflush_r+0x108>)
 800397c:	40ca      	lsrs	r2, r1
 800397e:	07d6      	lsls	r6, r2, #31
 8003980:	d528      	bpl.n	80039d4 <__sflush_r+0xb8>
 8003982:	2200      	movs	r2, #0
 8003984:	6062      	str	r2, [r4, #4]
 8003986:	04d9      	lsls	r1, r3, #19
 8003988:	6922      	ldr	r2, [r4, #16]
 800398a:	6022      	str	r2, [r4, #0]
 800398c:	d504      	bpl.n	8003998 <__sflush_r+0x7c>
 800398e:	1c42      	adds	r2, r0, #1
 8003990:	d101      	bne.n	8003996 <__sflush_r+0x7a>
 8003992:	682b      	ldr	r3, [r5, #0]
 8003994:	b903      	cbnz	r3, 8003998 <__sflush_r+0x7c>
 8003996:	6560      	str	r0, [r4, #84]	; 0x54
 8003998:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800399a:	602f      	str	r7, [r5, #0]
 800399c:	2900      	cmp	r1, #0
 800399e:	d0ca      	beq.n	8003936 <__sflush_r+0x1a>
 80039a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80039a4:	4299      	cmp	r1, r3
 80039a6:	d002      	beq.n	80039ae <__sflush_r+0x92>
 80039a8:	4628      	mov	r0, r5
 80039aa:	f000 f9d7 	bl	8003d5c <_free_r>
 80039ae:	2000      	movs	r0, #0
 80039b0:	6360      	str	r0, [r4, #52]	; 0x34
 80039b2:	e7c1      	b.n	8003938 <__sflush_r+0x1c>
 80039b4:	6a21      	ldr	r1, [r4, #32]
 80039b6:	2301      	movs	r3, #1
 80039b8:	4628      	mov	r0, r5
 80039ba:	47b0      	blx	r6
 80039bc:	1c41      	adds	r1, r0, #1
 80039be:	d1c7      	bne.n	8003950 <__sflush_r+0x34>
 80039c0:	682b      	ldr	r3, [r5, #0]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d0c4      	beq.n	8003950 <__sflush_r+0x34>
 80039c6:	2b1d      	cmp	r3, #29
 80039c8:	d001      	beq.n	80039ce <__sflush_r+0xb2>
 80039ca:	2b16      	cmp	r3, #22
 80039cc:	d101      	bne.n	80039d2 <__sflush_r+0xb6>
 80039ce:	602f      	str	r7, [r5, #0]
 80039d0:	e7b1      	b.n	8003936 <__sflush_r+0x1a>
 80039d2:	89a3      	ldrh	r3, [r4, #12]
 80039d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039d8:	81a3      	strh	r3, [r4, #12]
 80039da:	e7ad      	b.n	8003938 <__sflush_r+0x1c>
 80039dc:	690f      	ldr	r7, [r1, #16]
 80039de:	2f00      	cmp	r7, #0
 80039e0:	d0a9      	beq.n	8003936 <__sflush_r+0x1a>
 80039e2:	0793      	lsls	r3, r2, #30
 80039e4:	680e      	ldr	r6, [r1, #0]
 80039e6:	bf08      	it	eq
 80039e8:	694b      	ldreq	r3, [r1, #20]
 80039ea:	600f      	str	r7, [r1, #0]
 80039ec:	bf18      	it	ne
 80039ee:	2300      	movne	r3, #0
 80039f0:	eba6 0807 	sub.w	r8, r6, r7
 80039f4:	608b      	str	r3, [r1, #8]
 80039f6:	f1b8 0f00 	cmp.w	r8, #0
 80039fa:	dd9c      	ble.n	8003936 <__sflush_r+0x1a>
 80039fc:	6a21      	ldr	r1, [r4, #32]
 80039fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003a00:	4643      	mov	r3, r8
 8003a02:	463a      	mov	r2, r7
 8003a04:	4628      	mov	r0, r5
 8003a06:	47b0      	blx	r6
 8003a08:	2800      	cmp	r0, #0
 8003a0a:	dc06      	bgt.n	8003a1a <__sflush_r+0xfe>
 8003a0c:	89a3      	ldrh	r3, [r4, #12]
 8003a0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a12:	81a3      	strh	r3, [r4, #12]
 8003a14:	f04f 30ff 	mov.w	r0, #4294967295
 8003a18:	e78e      	b.n	8003938 <__sflush_r+0x1c>
 8003a1a:	4407      	add	r7, r0
 8003a1c:	eba8 0800 	sub.w	r8, r8, r0
 8003a20:	e7e9      	b.n	80039f6 <__sflush_r+0xda>
 8003a22:	bf00      	nop
 8003a24:	20400001 	.word	0x20400001

08003a28 <_fflush_r>:
 8003a28:	b538      	push	{r3, r4, r5, lr}
 8003a2a:	690b      	ldr	r3, [r1, #16]
 8003a2c:	4605      	mov	r5, r0
 8003a2e:	460c      	mov	r4, r1
 8003a30:	b913      	cbnz	r3, 8003a38 <_fflush_r+0x10>
 8003a32:	2500      	movs	r5, #0
 8003a34:	4628      	mov	r0, r5
 8003a36:	bd38      	pop	{r3, r4, r5, pc}
 8003a38:	b118      	cbz	r0, 8003a42 <_fflush_r+0x1a>
 8003a3a:	6983      	ldr	r3, [r0, #24]
 8003a3c:	b90b      	cbnz	r3, 8003a42 <_fflush_r+0x1a>
 8003a3e:	f000 f887 	bl	8003b50 <__sinit>
 8003a42:	4b14      	ldr	r3, [pc, #80]	; (8003a94 <_fflush_r+0x6c>)
 8003a44:	429c      	cmp	r4, r3
 8003a46:	d11b      	bne.n	8003a80 <_fflush_r+0x58>
 8003a48:	686c      	ldr	r4, [r5, #4]
 8003a4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d0ef      	beq.n	8003a32 <_fflush_r+0xa>
 8003a52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003a54:	07d0      	lsls	r0, r2, #31
 8003a56:	d404      	bmi.n	8003a62 <_fflush_r+0x3a>
 8003a58:	0599      	lsls	r1, r3, #22
 8003a5a:	d402      	bmi.n	8003a62 <_fflush_r+0x3a>
 8003a5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003a5e:	f000 f915 	bl	8003c8c <__retarget_lock_acquire_recursive>
 8003a62:	4628      	mov	r0, r5
 8003a64:	4621      	mov	r1, r4
 8003a66:	f7ff ff59 	bl	800391c <__sflush_r>
 8003a6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003a6c:	07da      	lsls	r2, r3, #31
 8003a6e:	4605      	mov	r5, r0
 8003a70:	d4e0      	bmi.n	8003a34 <_fflush_r+0xc>
 8003a72:	89a3      	ldrh	r3, [r4, #12]
 8003a74:	059b      	lsls	r3, r3, #22
 8003a76:	d4dd      	bmi.n	8003a34 <_fflush_r+0xc>
 8003a78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003a7a:	f000 f908 	bl	8003c8e <__retarget_lock_release_recursive>
 8003a7e:	e7d9      	b.n	8003a34 <_fflush_r+0xc>
 8003a80:	4b05      	ldr	r3, [pc, #20]	; (8003a98 <_fflush_r+0x70>)
 8003a82:	429c      	cmp	r4, r3
 8003a84:	d101      	bne.n	8003a8a <_fflush_r+0x62>
 8003a86:	68ac      	ldr	r4, [r5, #8]
 8003a88:	e7df      	b.n	8003a4a <_fflush_r+0x22>
 8003a8a:	4b04      	ldr	r3, [pc, #16]	; (8003a9c <_fflush_r+0x74>)
 8003a8c:	429c      	cmp	r4, r3
 8003a8e:	bf08      	it	eq
 8003a90:	68ec      	ldreq	r4, [r5, #12]
 8003a92:	e7da      	b.n	8003a4a <_fflush_r+0x22>
 8003a94:	08004768 	.word	0x08004768
 8003a98:	08004788 	.word	0x08004788
 8003a9c:	08004748 	.word	0x08004748

08003aa0 <std>:
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	b510      	push	{r4, lr}
 8003aa4:	4604      	mov	r4, r0
 8003aa6:	e9c0 3300 	strd	r3, r3, [r0]
 8003aaa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003aae:	6083      	str	r3, [r0, #8]
 8003ab0:	8181      	strh	r1, [r0, #12]
 8003ab2:	6643      	str	r3, [r0, #100]	; 0x64
 8003ab4:	81c2      	strh	r2, [r0, #14]
 8003ab6:	6183      	str	r3, [r0, #24]
 8003ab8:	4619      	mov	r1, r3
 8003aba:	2208      	movs	r2, #8
 8003abc:	305c      	adds	r0, #92	; 0x5c
 8003abe:	f7ff fdd7 	bl	8003670 <memset>
 8003ac2:	4b05      	ldr	r3, [pc, #20]	; (8003ad8 <std+0x38>)
 8003ac4:	6263      	str	r3, [r4, #36]	; 0x24
 8003ac6:	4b05      	ldr	r3, [pc, #20]	; (8003adc <std+0x3c>)
 8003ac8:	62a3      	str	r3, [r4, #40]	; 0x28
 8003aca:	4b05      	ldr	r3, [pc, #20]	; (8003ae0 <std+0x40>)
 8003acc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003ace:	4b05      	ldr	r3, [pc, #20]	; (8003ae4 <std+0x44>)
 8003ad0:	6224      	str	r4, [r4, #32]
 8003ad2:	6323      	str	r3, [r4, #48]	; 0x30
 8003ad4:	bd10      	pop	{r4, pc}
 8003ad6:	bf00      	nop
 8003ad8:	08004519 	.word	0x08004519
 8003adc:	0800453b 	.word	0x0800453b
 8003ae0:	08004573 	.word	0x08004573
 8003ae4:	08004597 	.word	0x08004597

08003ae8 <_cleanup_r>:
 8003ae8:	4901      	ldr	r1, [pc, #4]	; (8003af0 <_cleanup_r+0x8>)
 8003aea:	f000 b8af 	b.w	8003c4c <_fwalk_reent>
 8003aee:	bf00      	nop
 8003af0:	08003a29 	.word	0x08003a29

08003af4 <__sfmoreglue>:
 8003af4:	b570      	push	{r4, r5, r6, lr}
 8003af6:	2268      	movs	r2, #104	; 0x68
 8003af8:	1e4d      	subs	r5, r1, #1
 8003afa:	4355      	muls	r5, r2
 8003afc:	460e      	mov	r6, r1
 8003afe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003b02:	f000 f997 	bl	8003e34 <_malloc_r>
 8003b06:	4604      	mov	r4, r0
 8003b08:	b140      	cbz	r0, 8003b1c <__sfmoreglue+0x28>
 8003b0a:	2100      	movs	r1, #0
 8003b0c:	e9c0 1600 	strd	r1, r6, [r0]
 8003b10:	300c      	adds	r0, #12
 8003b12:	60a0      	str	r0, [r4, #8]
 8003b14:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003b18:	f7ff fdaa 	bl	8003670 <memset>
 8003b1c:	4620      	mov	r0, r4
 8003b1e:	bd70      	pop	{r4, r5, r6, pc}

08003b20 <__sfp_lock_acquire>:
 8003b20:	4801      	ldr	r0, [pc, #4]	; (8003b28 <__sfp_lock_acquire+0x8>)
 8003b22:	f000 b8b3 	b.w	8003c8c <__retarget_lock_acquire_recursive>
 8003b26:	bf00      	nop
 8003b28:	2000012d 	.word	0x2000012d

08003b2c <__sfp_lock_release>:
 8003b2c:	4801      	ldr	r0, [pc, #4]	; (8003b34 <__sfp_lock_release+0x8>)
 8003b2e:	f000 b8ae 	b.w	8003c8e <__retarget_lock_release_recursive>
 8003b32:	bf00      	nop
 8003b34:	2000012d 	.word	0x2000012d

08003b38 <__sinit_lock_acquire>:
 8003b38:	4801      	ldr	r0, [pc, #4]	; (8003b40 <__sinit_lock_acquire+0x8>)
 8003b3a:	f000 b8a7 	b.w	8003c8c <__retarget_lock_acquire_recursive>
 8003b3e:	bf00      	nop
 8003b40:	2000012e 	.word	0x2000012e

08003b44 <__sinit_lock_release>:
 8003b44:	4801      	ldr	r0, [pc, #4]	; (8003b4c <__sinit_lock_release+0x8>)
 8003b46:	f000 b8a2 	b.w	8003c8e <__retarget_lock_release_recursive>
 8003b4a:	bf00      	nop
 8003b4c:	2000012e 	.word	0x2000012e

08003b50 <__sinit>:
 8003b50:	b510      	push	{r4, lr}
 8003b52:	4604      	mov	r4, r0
 8003b54:	f7ff fff0 	bl	8003b38 <__sinit_lock_acquire>
 8003b58:	69a3      	ldr	r3, [r4, #24]
 8003b5a:	b11b      	cbz	r3, 8003b64 <__sinit+0x14>
 8003b5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b60:	f7ff bff0 	b.w	8003b44 <__sinit_lock_release>
 8003b64:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003b68:	6523      	str	r3, [r4, #80]	; 0x50
 8003b6a:	4b13      	ldr	r3, [pc, #76]	; (8003bb8 <__sinit+0x68>)
 8003b6c:	4a13      	ldr	r2, [pc, #76]	; (8003bbc <__sinit+0x6c>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	62a2      	str	r2, [r4, #40]	; 0x28
 8003b72:	42a3      	cmp	r3, r4
 8003b74:	bf04      	itt	eq
 8003b76:	2301      	moveq	r3, #1
 8003b78:	61a3      	streq	r3, [r4, #24]
 8003b7a:	4620      	mov	r0, r4
 8003b7c:	f000 f820 	bl	8003bc0 <__sfp>
 8003b80:	6060      	str	r0, [r4, #4]
 8003b82:	4620      	mov	r0, r4
 8003b84:	f000 f81c 	bl	8003bc0 <__sfp>
 8003b88:	60a0      	str	r0, [r4, #8]
 8003b8a:	4620      	mov	r0, r4
 8003b8c:	f000 f818 	bl	8003bc0 <__sfp>
 8003b90:	2200      	movs	r2, #0
 8003b92:	60e0      	str	r0, [r4, #12]
 8003b94:	2104      	movs	r1, #4
 8003b96:	6860      	ldr	r0, [r4, #4]
 8003b98:	f7ff ff82 	bl	8003aa0 <std>
 8003b9c:	68a0      	ldr	r0, [r4, #8]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	2109      	movs	r1, #9
 8003ba2:	f7ff ff7d 	bl	8003aa0 <std>
 8003ba6:	68e0      	ldr	r0, [r4, #12]
 8003ba8:	2202      	movs	r2, #2
 8003baa:	2112      	movs	r1, #18
 8003bac:	f7ff ff78 	bl	8003aa0 <std>
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	61a3      	str	r3, [r4, #24]
 8003bb4:	e7d2      	b.n	8003b5c <__sinit+0xc>
 8003bb6:	bf00      	nop
 8003bb8:	08004744 	.word	0x08004744
 8003bbc:	08003ae9 	.word	0x08003ae9

08003bc0 <__sfp>:
 8003bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bc2:	4607      	mov	r7, r0
 8003bc4:	f7ff ffac 	bl	8003b20 <__sfp_lock_acquire>
 8003bc8:	4b1e      	ldr	r3, [pc, #120]	; (8003c44 <__sfp+0x84>)
 8003bca:	681e      	ldr	r6, [r3, #0]
 8003bcc:	69b3      	ldr	r3, [r6, #24]
 8003bce:	b913      	cbnz	r3, 8003bd6 <__sfp+0x16>
 8003bd0:	4630      	mov	r0, r6
 8003bd2:	f7ff ffbd 	bl	8003b50 <__sinit>
 8003bd6:	3648      	adds	r6, #72	; 0x48
 8003bd8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003bdc:	3b01      	subs	r3, #1
 8003bde:	d503      	bpl.n	8003be8 <__sfp+0x28>
 8003be0:	6833      	ldr	r3, [r6, #0]
 8003be2:	b30b      	cbz	r3, 8003c28 <__sfp+0x68>
 8003be4:	6836      	ldr	r6, [r6, #0]
 8003be6:	e7f7      	b.n	8003bd8 <__sfp+0x18>
 8003be8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003bec:	b9d5      	cbnz	r5, 8003c24 <__sfp+0x64>
 8003bee:	4b16      	ldr	r3, [pc, #88]	; (8003c48 <__sfp+0x88>)
 8003bf0:	60e3      	str	r3, [r4, #12]
 8003bf2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003bf6:	6665      	str	r5, [r4, #100]	; 0x64
 8003bf8:	f000 f847 	bl	8003c8a <__retarget_lock_init_recursive>
 8003bfc:	f7ff ff96 	bl	8003b2c <__sfp_lock_release>
 8003c00:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003c04:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003c08:	6025      	str	r5, [r4, #0]
 8003c0a:	61a5      	str	r5, [r4, #24]
 8003c0c:	2208      	movs	r2, #8
 8003c0e:	4629      	mov	r1, r5
 8003c10:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003c14:	f7ff fd2c 	bl	8003670 <memset>
 8003c18:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003c1c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003c20:	4620      	mov	r0, r4
 8003c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c24:	3468      	adds	r4, #104	; 0x68
 8003c26:	e7d9      	b.n	8003bdc <__sfp+0x1c>
 8003c28:	2104      	movs	r1, #4
 8003c2a:	4638      	mov	r0, r7
 8003c2c:	f7ff ff62 	bl	8003af4 <__sfmoreglue>
 8003c30:	4604      	mov	r4, r0
 8003c32:	6030      	str	r0, [r6, #0]
 8003c34:	2800      	cmp	r0, #0
 8003c36:	d1d5      	bne.n	8003be4 <__sfp+0x24>
 8003c38:	f7ff ff78 	bl	8003b2c <__sfp_lock_release>
 8003c3c:	230c      	movs	r3, #12
 8003c3e:	603b      	str	r3, [r7, #0]
 8003c40:	e7ee      	b.n	8003c20 <__sfp+0x60>
 8003c42:	bf00      	nop
 8003c44:	08004744 	.word	0x08004744
 8003c48:	ffff0001 	.word	0xffff0001

08003c4c <_fwalk_reent>:
 8003c4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c50:	4606      	mov	r6, r0
 8003c52:	4688      	mov	r8, r1
 8003c54:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003c58:	2700      	movs	r7, #0
 8003c5a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003c5e:	f1b9 0901 	subs.w	r9, r9, #1
 8003c62:	d505      	bpl.n	8003c70 <_fwalk_reent+0x24>
 8003c64:	6824      	ldr	r4, [r4, #0]
 8003c66:	2c00      	cmp	r4, #0
 8003c68:	d1f7      	bne.n	8003c5a <_fwalk_reent+0xe>
 8003c6a:	4638      	mov	r0, r7
 8003c6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c70:	89ab      	ldrh	r3, [r5, #12]
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d907      	bls.n	8003c86 <_fwalk_reent+0x3a>
 8003c76:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	d003      	beq.n	8003c86 <_fwalk_reent+0x3a>
 8003c7e:	4629      	mov	r1, r5
 8003c80:	4630      	mov	r0, r6
 8003c82:	47c0      	blx	r8
 8003c84:	4307      	orrs	r7, r0
 8003c86:	3568      	adds	r5, #104	; 0x68
 8003c88:	e7e9      	b.n	8003c5e <_fwalk_reent+0x12>

08003c8a <__retarget_lock_init_recursive>:
 8003c8a:	4770      	bx	lr

08003c8c <__retarget_lock_acquire_recursive>:
 8003c8c:	4770      	bx	lr

08003c8e <__retarget_lock_release_recursive>:
 8003c8e:	4770      	bx	lr

08003c90 <__swhatbuf_r>:
 8003c90:	b570      	push	{r4, r5, r6, lr}
 8003c92:	460e      	mov	r6, r1
 8003c94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c98:	2900      	cmp	r1, #0
 8003c9a:	b096      	sub	sp, #88	; 0x58
 8003c9c:	4614      	mov	r4, r2
 8003c9e:	461d      	mov	r5, r3
 8003ca0:	da08      	bge.n	8003cb4 <__swhatbuf_r+0x24>
 8003ca2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	602a      	str	r2, [r5, #0]
 8003caa:	061a      	lsls	r2, r3, #24
 8003cac:	d410      	bmi.n	8003cd0 <__swhatbuf_r+0x40>
 8003cae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003cb2:	e00e      	b.n	8003cd2 <__swhatbuf_r+0x42>
 8003cb4:	466a      	mov	r2, sp
 8003cb6:	f000 fc95 	bl	80045e4 <_fstat_r>
 8003cba:	2800      	cmp	r0, #0
 8003cbc:	dbf1      	blt.n	8003ca2 <__swhatbuf_r+0x12>
 8003cbe:	9a01      	ldr	r2, [sp, #4]
 8003cc0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003cc4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003cc8:	425a      	negs	r2, r3
 8003cca:	415a      	adcs	r2, r3
 8003ccc:	602a      	str	r2, [r5, #0]
 8003cce:	e7ee      	b.n	8003cae <__swhatbuf_r+0x1e>
 8003cd0:	2340      	movs	r3, #64	; 0x40
 8003cd2:	2000      	movs	r0, #0
 8003cd4:	6023      	str	r3, [r4, #0]
 8003cd6:	b016      	add	sp, #88	; 0x58
 8003cd8:	bd70      	pop	{r4, r5, r6, pc}
	...

08003cdc <__smakebuf_r>:
 8003cdc:	898b      	ldrh	r3, [r1, #12]
 8003cde:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003ce0:	079d      	lsls	r5, r3, #30
 8003ce2:	4606      	mov	r6, r0
 8003ce4:	460c      	mov	r4, r1
 8003ce6:	d507      	bpl.n	8003cf8 <__smakebuf_r+0x1c>
 8003ce8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003cec:	6023      	str	r3, [r4, #0]
 8003cee:	6123      	str	r3, [r4, #16]
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	6163      	str	r3, [r4, #20]
 8003cf4:	b002      	add	sp, #8
 8003cf6:	bd70      	pop	{r4, r5, r6, pc}
 8003cf8:	ab01      	add	r3, sp, #4
 8003cfa:	466a      	mov	r2, sp
 8003cfc:	f7ff ffc8 	bl	8003c90 <__swhatbuf_r>
 8003d00:	9900      	ldr	r1, [sp, #0]
 8003d02:	4605      	mov	r5, r0
 8003d04:	4630      	mov	r0, r6
 8003d06:	f000 f895 	bl	8003e34 <_malloc_r>
 8003d0a:	b948      	cbnz	r0, 8003d20 <__smakebuf_r+0x44>
 8003d0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d10:	059a      	lsls	r2, r3, #22
 8003d12:	d4ef      	bmi.n	8003cf4 <__smakebuf_r+0x18>
 8003d14:	f023 0303 	bic.w	r3, r3, #3
 8003d18:	f043 0302 	orr.w	r3, r3, #2
 8003d1c:	81a3      	strh	r3, [r4, #12]
 8003d1e:	e7e3      	b.n	8003ce8 <__smakebuf_r+0xc>
 8003d20:	4b0d      	ldr	r3, [pc, #52]	; (8003d58 <__smakebuf_r+0x7c>)
 8003d22:	62b3      	str	r3, [r6, #40]	; 0x28
 8003d24:	89a3      	ldrh	r3, [r4, #12]
 8003d26:	6020      	str	r0, [r4, #0]
 8003d28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d2c:	81a3      	strh	r3, [r4, #12]
 8003d2e:	9b00      	ldr	r3, [sp, #0]
 8003d30:	6163      	str	r3, [r4, #20]
 8003d32:	9b01      	ldr	r3, [sp, #4]
 8003d34:	6120      	str	r0, [r4, #16]
 8003d36:	b15b      	cbz	r3, 8003d50 <__smakebuf_r+0x74>
 8003d38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d3c:	4630      	mov	r0, r6
 8003d3e:	f000 fc63 	bl	8004608 <_isatty_r>
 8003d42:	b128      	cbz	r0, 8003d50 <__smakebuf_r+0x74>
 8003d44:	89a3      	ldrh	r3, [r4, #12]
 8003d46:	f023 0303 	bic.w	r3, r3, #3
 8003d4a:	f043 0301 	orr.w	r3, r3, #1
 8003d4e:	81a3      	strh	r3, [r4, #12]
 8003d50:	89a0      	ldrh	r0, [r4, #12]
 8003d52:	4305      	orrs	r5, r0
 8003d54:	81a5      	strh	r5, [r4, #12]
 8003d56:	e7cd      	b.n	8003cf4 <__smakebuf_r+0x18>
 8003d58:	08003ae9 	.word	0x08003ae9

08003d5c <_free_r>:
 8003d5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003d5e:	2900      	cmp	r1, #0
 8003d60:	d044      	beq.n	8003dec <_free_r+0x90>
 8003d62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d66:	9001      	str	r0, [sp, #4]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	f1a1 0404 	sub.w	r4, r1, #4
 8003d6e:	bfb8      	it	lt
 8003d70:	18e4      	addlt	r4, r4, r3
 8003d72:	f000 fc6b 	bl	800464c <__malloc_lock>
 8003d76:	4a1e      	ldr	r2, [pc, #120]	; (8003df0 <_free_r+0x94>)
 8003d78:	9801      	ldr	r0, [sp, #4]
 8003d7a:	6813      	ldr	r3, [r2, #0]
 8003d7c:	b933      	cbnz	r3, 8003d8c <_free_r+0x30>
 8003d7e:	6063      	str	r3, [r4, #4]
 8003d80:	6014      	str	r4, [r2, #0]
 8003d82:	b003      	add	sp, #12
 8003d84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003d88:	f000 bc66 	b.w	8004658 <__malloc_unlock>
 8003d8c:	42a3      	cmp	r3, r4
 8003d8e:	d908      	bls.n	8003da2 <_free_r+0x46>
 8003d90:	6825      	ldr	r5, [r4, #0]
 8003d92:	1961      	adds	r1, r4, r5
 8003d94:	428b      	cmp	r3, r1
 8003d96:	bf01      	itttt	eq
 8003d98:	6819      	ldreq	r1, [r3, #0]
 8003d9a:	685b      	ldreq	r3, [r3, #4]
 8003d9c:	1949      	addeq	r1, r1, r5
 8003d9e:	6021      	streq	r1, [r4, #0]
 8003da0:	e7ed      	b.n	8003d7e <_free_r+0x22>
 8003da2:	461a      	mov	r2, r3
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	b10b      	cbz	r3, 8003dac <_free_r+0x50>
 8003da8:	42a3      	cmp	r3, r4
 8003daa:	d9fa      	bls.n	8003da2 <_free_r+0x46>
 8003dac:	6811      	ldr	r1, [r2, #0]
 8003dae:	1855      	adds	r5, r2, r1
 8003db0:	42a5      	cmp	r5, r4
 8003db2:	d10b      	bne.n	8003dcc <_free_r+0x70>
 8003db4:	6824      	ldr	r4, [r4, #0]
 8003db6:	4421      	add	r1, r4
 8003db8:	1854      	adds	r4, r2, r1
 8003dba:	42a3      	cmp	r3, r4
 8003dbc:	6011      	str	r1, [r2, #0]
 8003dbe:	d1e0      	bne.n	8003d82 <_free_r+0x26>
 8003dc0:	681c      	ldr	r4, [r3, #0]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	6053      	str	r3, [r2, #4]
 8003dc6:	4421      	add	r1, r4
 8003dc8:	6011      	str	r1, [r2, #0]
 8003dca:	e7da      	b.n	8003d82 <_free_r+0x26>
 8003dcc:	d902      	bls.n	8003dd4 <_free_r+0x78>
 8003dce:	230c      	movs	r3, #12
 8003dd0:	6003      	str	r3, [r0, #0]
 8003dd2:	e7d6      	b.n	8003d82 <_free_r+0x26>
 8003dd4:	6825      	ldr	r5, [r4, #0]
 8003dd6:	1961      	adds	r1, r4, r5
 8003dd8:	428b      	cmp	r3, r1
 8003dda:	bf04      	itt	eq
 8003ddc:	6819      	ldreq	r1, [r3, #0]
 8003dde:	685b      	ldreq	r3, [r3, #4]
 8003de0:	6063      	str	r3, [r4, #4]
 8003de2:	bf04      	itt	eq
 8003de4:	1949      	addeq	r1, r1, r5
 8003de6:	6021      	streq	r1, [r4, #0]
 8003de8:	6054      	str	r4, [r2, #4]
 8003dea:	e7ca      	b.n	8003d82 <_free_r+0x26>
 8003dec:	b003      	add	sp, #12
 8003dee:	bd30      	pop	{r4, r5, pc}
 8003df0:	20000130 	.word	0x20000130

08003df4 <sbrk_aligned>:
 8003df4:	b570      	push	{r4, r5, r6, lr}
 8003df6:	4e0e      	ldr	r6, [pc, #56]	; (8003e30 <sbrk_aligned+0x3c>)
 8003df8:	460c      	mov	r4, r1
 8003dfa:	6831      	ldr	r1, [r6, #0]
 8003dfc:	4605      	mov	r5, r0
 8003dfe:	b911      	cbnz	r1, 8003e06 <sbrk_aligned+0x12>
 8003e00:	f000 fb7a 	bl	80044f8 <_sbrk_r>
 8003e04:	6030      	str	r0, [r6, #0]
 8003e06:	4621      	mov	r1, r4
 8003e08:	4628      	mov	r0, r5
 8003e0a:	f000 fb75 	bl	80044f8 <_sbrk_r>
 8003e0e:	1c43      	adds	r3, r0, #1
 8003e10:	d00a      	beq.n	8003e28 <sbrk_aligned+0x34>
 8003e12:	1cc4      	adds	r4, r0, #3
 8003e14:	f024 0403 	bic.w	r4, r4, #3
 8003e18:	42a0      	cmp	r0, r4
 8003e1a:	d007      	beq.n	8003e2c <sbrk_aligned+0x38>
 8003e1c:	1a21      	subs	r1, r4, r0
 8003e1e:	4628      	mov	r0, r5
 8003e20:	f000 fb6a 	bl	80044f8 <_sbrk_r>
 8003e24:	3001      	adds	r0, #1
 8003e26:	d101      	bne.n	8003e2c <sbrk_aligned+0x38>
 8003e28:	f04f 34ff 	mov.w	r4, #4294967295
 8003e2c:	4620      	mov	r0, r4
 8003e2e:	bd70      	pop	{r4, r5, r6, pc}
 8003e30:	20000134 	.word	0x20000134

08003e34 <_malloc_r>:
 8003e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e38:	1ccd      	adds	r5, r1, #3
 8003e3a:	f025 0503 	bic.w	r5, r5, #3
 8003e3e:	3508      	adds	r5, #8
 8003e40:	2d0c      	cmp	r5, #12
 8003e42:	bf38      	it	cc
 8003e44:	250c      	movcc	r5, #12
 8003e46:	2d00      	cmp	r5, #0
 8003e48:	4607      	mov	r7, r0
 8003e4a:	db01      	blt.n	8003e50 <_malloc_r+0x1c>
 8003e4c:	42a9      	cmp	r1, r5
 8003e4e:	d905      	bls.n	8003e5c <_malloc_r+0x28>
 8003e50:	230c      	movs	r3, #12
 8003e52:	603b      	str	r3, [r7, #0]
 8003e54:	2600      	movs	r6, #0
 8003e56:	4630      	mov	r0, r6
 8003e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e5c:	4e2e      	ldr	r6, [pc, #184]	; (8003f18 <_malloc_r+0xe4>)
 8003e5e:	f000 fbf5 	bl	800464c <__malloc_lock>
 8003e62:	6833      	ldr	r3, [r6, #0]
 8003e64:	461c      	mov	r4, r3
 8003e66:	bb34      	cbnz	r4, 8003eb6 <_malloc_r+0x82>
 8003e68:	4629      	mov	r1, r5
 8003e6a:	4638      	mov	r0, r7
 8003e6c:	f7ff ffc2 	bl	8003df4 <sbrk_aligned>
 8003e70:	1c43      	adds	r3, r0, #1
 8003e72:	4604      	mov	r4, r0
 8003e74:	d14d      	bne.n	8003f12 <_malloc_r+0xde>
 8003e76:	6834      	ldr	r4, [r6, #0]
 8003e78:	4626      	mov	r6, r4
 8003e7a:	2e00      	cmp	r6, #0
 8003e7c:	d140      	bne.n	8003f00 <_malloc_r+0xcc>
 8003e7e:	6823      	ldr	r3, [r4, #0]
 8003e80:	4631      	mov	r1, r6
 8003e82:	4638      	mov	r0, r7
 8003e84:	eb04 0803 	add.w	r8, r4, r3
 8003e88:	f000 fb36 	bl	80044f8 <_sbrk_r>
 8003e8c:	4580      	cmp	r8, r0
 8003e8e:	d13a      	bne.n	8003f06 <_malloc_r+0xd2>
 8003e90:	6821      	ldr	r1, [r4, #0]
 8003e92:	3503      	adds	r5, #3
 8003e94:	1a6d      	subs	r5, r5, r1
 8003e96:	f025 0503 	bic.w	r5, r5, #3
 8003e9a:	3508      	adds	r5, #8
 8003e9c:	2d0c      	cmp	r5, #12
 8003e9e:	bf38      	it	cc
 8003ea0:	250c      	movcc	r5, #12
 8003ea2:	4629      	mov	r1, r5
 8003ea4:	4638      	mov	r0, r7
 8003ea6:	f7ff ffa5 	bl	8003df4 <sbrk_aligned>
 8003eaa:	3001      	adds	r0, #1
 8003eac:	d02b      	beq.n	8003f06 <_malloc_r+0xd2>
 8003eae:	6823      	ldr	r3, [r4, #0]
 8003eb0:	442b      	add	r3, r5
 8003eb2:	6023      	str	r3, [r4, #0]
 8003eb4:	e00e      	b.n	8003ed4 <_malloc_r+0xa0>
 8003eb6:	6822      	ldr	r2, [r4, #0]
 8003eb8:	1b52      	subs	r2, r2, r5
 8003eba:	d41e      	bmi.n	8003efa <_malloc_r+0xc6>
 8003ebc:	2a0b      	cmp	r2, #11
 8003ebe:	d916      	bls.n	8003eee <_malloc_r+0xba>
 8003ec0:	1961      	adds	r1, r4, r5
 8003ec2:	42a3      	cmp	r3, r4
 8003ec4:	6025      	str	r5, [r4, #0]
 8003ec6:	bf18      	it	ne
 8003ec8:	6059      	strne	r1, [r3, #4]
 8003eca:	6863      	ldr	r3, [r4, #4]
 8003ecc:	bf08      	it	eq
 8003ece:	6031      	streq	r1, [r6, #0]
 8003ed0:	5162      	str	r2, [r4, r5]
 8003ed2:	604b      	str	r3, [r1, #4]
 8003ed4:	4638      	mov	r0, r7
 8003ed6:	f104 060b 	add.w	r6, r4, #11
 8003eda:	f000 fbbd 	bl	8004658 <__malloc_unlock>
 8003ede:	f026 0607 	bic.w	r6, r6, #7
 8003ee2:	1d23      	adds	r3, r4, #4
 8003ee4:	1af2      	subs	r2, r6, r3
 8003ee6:	d0b6      	beq.n	8003e56 <_malloc_r+0x22>
 8003ee8:	1b9b      	subs	r3, r3, r6
 8003eea:	50a3      	str	r3, [r4, r2]
 8003eec:	e7b3      	b.n	8003e56 <_malloc_r+0x22>
 8003eee:	6862      	ldr	r2, [r4, #4]
 8003ef0:	42a3      	cmp	r3, r4
 8003ef2:	bf0c      	ite	eq
 8003ef4:	6032      	streq	r2, [r6, #0]
 8003ef6:	605a      	strne	r2, [r3, #4]
 8003ef8:	e7ec      	b.n	8003ed4 <_malloc_r+0xa0>
 8003efa:	4623      	mov	r3, r4
 8003efc:	6864      	ldr	r4, [r4, #4]
 8003efe:	e7b2      	b.n	8003e66 <_malloc_r+0x32>
 8003f00:	4634      	mov	r4, r6
 8003f02:	6876      	ldr	r6, [r6, #4]
 8003f04:	e7b9      	b.n	8003e7a <_malloc_r+0x46>
 8003f06:	230c      	movs	r3, #12
 8003f08:	603b      	str	r3, [r7, #0]
 8003f0a:	4638      	mov	r0, r7
 8003f0c:	f000 fba4 	bl	8004658 <__malloc_unlock>
 8003f10:	e7a1      	b.n	8003e56 <_malloc_r+0x22>
 8003f12:	6025      	str	r5, [r4, #0]
 8003f14:	e7de      	b.n	8003ed4 <_malloc_r+0xa0>
 8003f16:	bf00      	nop
 8003f18:	20000130 	.word	0x20000130

08003f1c <__sfputc_r>:
 8003f1c:	6893      	ldr	r3, [r2, #8]
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	b410      	push	{r4}
 8003f24:	6093      	str	r3, [r2, #8]
 8003f26:	da08      	bge.n	8003f3a <__sfputc_r+0x1e>
 8003f28:	6994      	ldr	r4, [r2, #24]
 8003f2a:	42a3      	cmp	r3, r4
 8003f2c:	db01      	blt.n	8003f32 <__sfputc_r+0x16>
 8003f2e:	290a      	cmp	r1, #10
 8003f30:	d103      	bne.n	8003f3a <__sfputc_r+0x1e>
 8003f32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f36:	f7ff bc31 	b.w	800379c <__swbuf_r>
 8003f3a:	6813      	ldr	r3, [r2, #0]
 8003f3c:	1c58      	adds	r0, r3, #1
 8003f3e:	6010      	str	r0, [r2, #0]
 8003f40:	7019      	strb	r1, [r3, #0]
 8003f42:	4608      	mov	r0, r1
 8003f44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f48:	4770      	bx	lr

08003f4a <__sfputs_r>:
 8003f4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f4c:	4606      	mov	r6, r0
 8003f4e:	460f      	mov	r7, r1
 8003f50:	4614      	mov	r4, r2
 8003f52:	18d5      	adds	r5, r2, r3
 8003f54:	42ac      	cmp	r4, r5
 8003f56:	d101      	bne.n	8003f5c <__sfputs_r+0x12>
 8003f58:	2000      	movs	r0, #0
 8003f5a:	e007      	b.n	8003f6c <__sfputs_r+0x22>
 8003f5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f60:	463a      	mov	r2, r7
 8003f62:	4630      	mov	r0, r6
 8003f64:	f7ff ffda 	bl	8003f1c <__sfputc_r>
 8003f68:	1c43      	adds	r3, r0, #1
 8003f6a:	d1f3      	bne.n	8003f54 <__sfputs_r+0xa>
 8003f6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003f70 <_vfiprintf_r>:
 8003f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f74:	460d      	mov	r5, r1
 8003f76:	b09d      	sub	sp, #116	; 0x74
 8003f78:	4614      	mov	r4, r2
 8003f7a:	4698      	mov	r8, r3
 8003f7c:	4606      	mov	r6, r0
 8003f7e:	b118      	cbz	r0, 8003f88 <_vfiprintf_r+0x18>
 8003f80:	6983      	ldr	r3, [r0, #24]
 8003f82:	b90b      	cbnz	r3, 8003f88 <_vfiprintf_r+0x18>
 8003f84:	f7ff fde4 	bl	8003b50 <__sinit>
 8003f88:	4b89      	ldr	r3, [pc, #548]	; (80041b0 <_vfiprintf_r+0x240>)
 8003f8a:	429d      	cmp	r5, r3
 8003f8c:	d11b      	bne.n	8003fc6 <_vfiprintf_r+0x56>
 8003f8e:	6875      	ldr	r5, [r6, #4]
 8003f90:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003f92:	07d9      	lsls	r1, r3, #31
 8003f94:	d405      	bmi.n	8003fa2 <_vfiprintf_r+0x32>
 8003f96:	89ab      	ldrh	r3, [r5, #12]
 8003f98:	059a      	lsls	r2, r3, #22
 8003f9a:	d402      	bmi.n	8003fa2 <_vfiprintf_r+0x32>
 8003f9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003f9e:	f7ff fe75 	bl	8003c8c <__retarget_lock_acquire_recursive>
 8003fa2:	89ab      	ldrh	r3, [r5, #12]
 8003fa4:	071b      	lsls	r3, r3, #28
 8003fa6:	d501      	bpl.n	8003fac <_vfiprintf_r+0x3c>
 8003fa8:	692b      	ldr	r3, [r5, #16]
 8003faa:	b9eb      	cbnz	r3, 8003fe8 <_vfiprintf_r+0x78>
 8003fac:	4629      	mov	r1, r5
 8003fae:	4630      	mov	r0, r6
 8003fb0:	f7ff fc46 	bl	8003840 <__swsetup_r>
 8003fb4:	b1c0      	cbz	r0, 8003fe8 <_vfiprintf_r+0x78>
 8003fb6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003fb8:	07dc      	lsls	r4, r3, #31
 8003fba:	d50e      	bpl.n	8003fda <_vfiprintf_r+0x6a>
 8003fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8003fc0:	b01d      	add	sp, #116	; 0x74
 8003fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fc6:	4b7b      	ldr	r3, [pc, #492]	; (80041b4 <_vfiprintf_r+0x244>)
 8003fc8:	429d      	cmp	r5, r3
 8003fca:	d101      	bne.n	8003fd0 <_vfiprintf_r+0x60>
 8003fcc:	68b5      	ldr	r5, [r6, #8]
 8003fce:	e7df      	b.n	8003f90 <_vfiprintf_r+0x20>
 8003fd0:	4b79      	ldr	r3, [pc, #484]	; (80041b8 <_vfiprintf_r+0x248>)
 8003fd2:	429d      	cmp	r5, r3
 8003fd4:	bf08      	it	eq
 8003fd6:	68f5      	ldreq	r5, [r6, #12]
 8003fd8:	e7da      	b.n	8003f90 <_vfiprintf_r+0x20>
 8003fda:	89ab      	ldrh	r3, [r5, #12]
 8003fdc:	0598      	lsls	r0, r3, #22
 8003fde:	d4ed      	bmi.n	8003fbc <_vfiprintf_r+0x4c>
 8003fe0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003fe2:	f7ff fe54 	bl	8003c8e <__retarget_lock_release_recursive>
 8003fe6:	e7e9      	b.n	8003fbc <_vfiprintf_r+0x4c>
 8003fe8:	2300      	movs	r3, #0
 8003fea:	9309      	str	r3, [sp, #36]	; 0x24
 8003fec:	2320      	movs	r3, #32
 8003fee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003ff2:	f8cd 800c 	str.w	r8, [sp, #12]
 8003ff6:	2330      	movs	r3, #48	; 0x30
 8003ff8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80041bc <_vfiprintf_r+0x24c>
 8003ffc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004000:	f04f 0901 	mov.w	r9, #1
 8004004:	4623      	mov	r3, r4
 8004006:	469a      	mov	sl, r3
 8004008:	f813 2b01 	ldrb.w	r2, [r3], #1
 800400c:	b10a      	cbz	r2, 8004012 <_vfiprintf_r+0xa2>
 800400e:	2a25      	cmp	r2, #37	; 0x25
 8004010:	d1f9      	bne.n	8004006 <_vfiprintf_r+0x96>
 8004012:	ebba 0b04 	subs.w	fp, sl, r4
 8004016:	d00b      	beq.n	8004030 <_vfiprintf_r+0xc0>
 8004018:	465b      	mov	r3, fp
 800401a:	4622      	mov	r2, r4
 800401c:	4629      	mov	r1, r5
 800401e:	4630      	mov	r0, r6
 8004020:	f7ff ff93 	bl	8003f4a <__sfputs_r>
 8004024:	3001      	adds	r0, #1
 8004026:	f000 80aa 	beq.w	800417e <_vfiprintf_r+0x20e>
 800402a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800402c:	445a      	add	r2, fp
 800402e:	9209      	str	r2, [sp, #36]	; 0x24
 8004030:	f89a 3000 	ldrb.w	r3, [sl]
 8004034:	2b00      	cmp	r3, #0
 8004036:	f000 80a2 	beq.w	800417e <_vfiprintf_r+0x20e>
 800403a:	2300      	movs	r3, #0
 800403c:	f04f 32ff 	mov.w	r2, #4294967295
 8004040:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004044:	f10a 0a01 	add.w	sl, sl, #1
 8004048:	9304      	str	r3, [sp, #16]
 800404a:	9307      	str	r3, [sp, #28]
 800404c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004050:	931a      	str	r3, [sp, #104]	; 0x68
 8004052:	4654      	mov	r4, sl
 8004054:	2205      	movs	r2, #5
 8004056:	f814 1b01 	ldrb.w	r1, [r4], #1
 800405a:	4858      	ldr	r0, [pc, #352]	; (80041bc <_vfiprintf_r+0x24c>)
 800405c:	f7fc f8d8 	bl	8000210 <memchr>
 8004060:	9a04      	ldr	r2, [sp, #16]
 8004062:	b9d8      	cbnz	r0, 800409c <_vfiprintf_r+0x12c>
 8004064:	06d1      	lsls	r1, r2, #27
 8004066:	bf44      	itt	mi
 8004068:	2320      	movmi	r3, #32
 800406a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800406e:	0713      	lsls	r3, r2, #28
 8004070:	bf44      	itt	mi
 8004072:	232b      	movmi	r3, #43	; 0x2b
 8004074:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004078:	f89a 3000 	ldrb.w	r3, [sl]
 800407c:	2b2a      	cmp	r3, #42	; 0x2a
 800407e:	d015      	beq.n	80040ac <_vfiprintf_r+0x13c>
 8004080:	9a07      	ldr	r2, [sp, #28]
 8004082:	4654      	mov	r4, sl
 8004084:	2000      	movs	r0, #0
 8004086:	f04f 0c0a 	mov.w	ip, #10
 800408a:	4621      	mov	r1, r4
 800408c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004090:	3b30      	subs	r3, #48	; 0x30
 8004092:	2b09      	cmp	r3, #9
 8004094:	d94e      	bls.n	8004134 <_vfiprintf_r+0x1c4>
 8004096:	b1b0      	cbz	r0, 80040c6 <_vfiprintf_r+0x156>
 8004098:	9207      	str	r2, [sp, #28]
 800409a:	e014      	b.n	80040c6 <_vfiprintf_r+0x156>
 800409c:	eba0 0308 	sub.w	r3, r0, r8
 80040a0:	fa09 f303 	lsl.w	r3, r9, r3
 80040a4:	4313      	orrs	r3, r2
 80040a6:	9304      	str	r3, [sp, #16]
 80040a8:	46a2      	mov	sl, r4
 80040aa:	e7d2      	b.n	8004052 <_vfiprintf_r+0xe2>
 80040ac:	9b03      	ldr	r3, [sp, #12]
 80040ae:	1d19      	adds	r1, r3, #4
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	9103      	str	r1, [sp, #12]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	bfbb      	ittet	lt
 80040b8:	425b      	neglt	r3, r3
 80040ba:	f042 0202 	orrlt.w	r2, r2, #2
 80040be:	9307      	strge	r3, [sp, #28]
 80040c0:	9307      	strlt	r3, [sp, #28]
 80040c2:	bfb8      	it	lt
 80040c4:	9204      	strlt	r2, [sp, #16]
 80040c6:	7823      	ldrb	r3, [r4, #0]
 80040c8:	2b2e      	cmp	r3, #46	; 0x2e
 80040ca:	d10c      	bne.n	80040e6 <_vfiprintf_r+0x176>
 80040cc:	7863      	ldrb	r3, [r4, #1]
 80040ce:	2b2a      	cmp	r3, #42	; 0x2a
 80040d0:	d135      	bne.n	800413e <_vfiprintf_r+0x1ce>
 80040d2:	9b03      	ldr	r3, [sp, #12]
 80040d4:	1d1a      	adds	r2, r3, #4
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	9203      	str	r2, [sp, #12]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	bfb8      	it	lt
 80040de:	f04f 33ff 	movlt.w	r3, #4294967295
 80040e2:	3402      	adds	r4, #2
 80040e4:	9305      	str	r3, [sp, #20]
 80040e6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80041cc <_vfiprintf_r+0x25c>
 80040ea:	7821      	ldrb	r1, [r4, #0]
 80040ec:	2203      	movs	r2, #3
 80040ee:	4650      	mov	r0, sl
 80040f0:	f7fc f88e 	bl	8000210 <memchr>
 80040f4:	b140      	cbz	r0, 8004108 <_vfiprintf_r+0x198>
 80040f6:	2340      	movs	r3, #64	; 0x40
 80040f8:	eba0 000a 	sub.w	r0, r0, sl
 80040fc:	fa03 f000 	lsl.w	r0, r3, r0
 8004100:	9b04      	ldr	r3, [sp, #16]
 8004102:	4303      	orrs	r3, r0
 8004104:	3401      	adds	r4, #1
 8004106:	9304      	str	r3, [sp, #16]
 8004108:	f814 1b01 	ldrb.w	r1, [r4], #1
 800410c:	482c      	ldr	r0, [pc, #176]	; (80041c0 <_vfiprintf_r+0x250>)
 800410e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004112:	2206      	movs	r2, #6
 8004114:	f7fc f87c 	bl	8000210 <memchr>
 8004118:	2800      	cmp	r0, #0
 800411a:	d03f      	beq.n	800419c <_vfiprintf_r+0x22c>
 800411c:	4b29      	ldr	r3, [pc, #164]	; (80041c4 <_vfiprintf_r+0x254>)
 800411e:	bb1b      	cbnz	r3, 8004168 <_vfiprintf_r+0x1f8>
 8004120:	9b03      	ldr	r3, [sp, #12]
 8004122:	3307      	adds	r3, #7
 8004124:	f023 0307 	bic.w	r3, r3, #7
 8004128:	3308      	adds	r3, #8
 800412a:	9303      	str	r3, [sp, #12]
 800412c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800412e:	443b      	add	r3, r7
 8004130:	9309      	str	r3, [sp, #36]	; 0x24
 8004132:	e767      	b.n	8004004 <_vfiprintf_r+0x94>
 8004134:	fb0c 3202 	mla	r2, ip, r2, r3
 8004138:	460c      	mov	r4, r1
 800413a:	2001      	movs	r0, #1
 800413c:	e7a5      	b.n	800408a <_vfiprintf_r+0x11a>
 800413e:	2300      	movs	r3, #0
 8004140:	3401      	adds	r4, #1
 8004142:	9305      	str	r3, [sp, #20]
 8004144:	4619      	mov	r1, r3
 8004146:	f04f 0c0a 	mov.w	ip, #10
 800414a:	4620      	mov	r0, r4
 800414c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004150:	3a30      	subs	r2, #48	; 0x30
 8004152:	2a09      	cmp	r2, #9
 8004154:	d903      	bls.n	800415e <_vfiprintf_r+0x1ee>
 8004156:	2b00      	cmp	r3, #0
 8004158:	d0c5      	beq.n	80040e6 <_vfiprintf_r+0x176>
 800415a:	9105      	str	r1, [sp, #20]
 800415c:	e7c3      	b.n	80040e6 <_vfiprintf_r+0x176>
 800415e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004162:	4604      	mov	r4, r0
 8004164:	2301      	movs	r3, #1
 8004166:	e7f0      	b.n	800414a <_vfiprintf_r+0x1da>
 8004168:	ab03      	add	r3, sp, #12
 800416a:	9300      	str	r3, [sp, #0]
 800416c:	462a      	mov	r2, r5
 800416e:	4b16      	ldr	r3, [pc, #88]	; (80041c8 <_vfiprintf_r+0x258>)
 8004170:	a904      	add	r1, sp, #16
 8004172:	4630      	mov	r0, r6
 8004174:	f3af 8000 	nop.w
 8004178:	4607      	mov	r7, r0
 800417a:	1c78      	adds	r0, r7, #1
 800417c:	d1d6      	bne.n	800412c <_vfiprintf_r+0x1bc>
 800417e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004180:	07d9      	lsls	r1, r3, #31
 8004182:	d405      	bmi.n	8004190 <_vfiprintf_r+0x220>
 8004184:	89ab      	ldrh	r3, [r5, #12]
 8004186:	059a      	lsls	r2, r3, #22
 8004188:	d402      	bmi.n	8004190 <_vfiprintf_r+0x220>
 800418a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800418c:	f7ff fd7f 	bl	8003c8e <__retarget_lock_release_recursive>
 8004190:	89ab      	ldrh	r3, [r5, #12]
 8004192:	065b      	lsls	r3, r3, #25
 8004194:	f53f af12 	bmi.w	8003fbc <_vfiprintf_r+0x4c>
 8004198:	9809      	ldr	r0, [sp, #36]	; 0x24
 800419a:	e711      	b.n	8003fc0 <_vfiprintf_r+0x50>
 800419c:	ab03      	add	r3, sp, #12
 800419e:	9300      	str	r3, [sp, #0]
 80041a0:	462a      	mov	r2, r5
 80041a2:	4b09      	ldr	r3, [pc, #36]	; (80041c8 <_vfiprintf_r+0x258>)
 80041a4:	a904      	add	r1, sp, #16
 80041a6:	4630      	mov	r0, r6
 80041a8:	f000 f880 	bl	80042ac <_printf_i>
 80041ac:	e7e4      	b.n	8004178 <_vfiprintf_r+0x208>
 80041ae:	bf00      	nop
 80041b0:	08004768 	.word	0x08004768
 80041b4:	08004788 	.word	0x08004788
 80041b8:	08004748 	.word	0x08004748
 80041bc:	080047a8 	.word	0x080047a8
 80041c0:	080047b2 	.word	0x080047b2
 80041c4:	00000000 	.word	0x00000000
 80041c8:	08003f4b 	.word	0x08003f4b
 80041cc:	080047ae 	.word	0x080047ae

080041d0 <_printf_common>:
 80041d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041d4:	4616      	mov	r6, r2
 80041d6:	4699      	mov	r9, r3
 80041d8:	688a      	ldr	r2, [r1, #8]
 80041da:	690b      	ldr	r3, [r1, #16]
 80041dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80041e0:	4293      	cmp	r3, r2
 80041e2:	bfb8      	it	lt
 80041e4:	4613      	movlt	r3, r2
 80041e6:	6033      	str	r3, [r6, #0]
 80041e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80041ec:	4607      	mov	r7, r0
 80041ee:	460c      	mov	r4, r1
 80041f0:	b10a      	cbz	r2, 80041f6 <_printf_common+0x26>
 80041f2:	3301      	adds	r3, #1
 80041f4:	6033      	str	r3, [r6, #0]
 80041f6:	6823      	ldr	r3, [r4, #0]
 80041f8:	0699      	lsls	r1, r3, #26
 80041fa:	bf42      	ittt	mi
 80041fc:	6833      	ldrmi	r3, [r6, #0]
 80041fe:	3302      	addmi	r3, #2
 8004200:	6033      	strmi	r3, [r6, #0]
 8004202:	6825      	ldr	r5, [r4, #0]
 8004204:	f015 0506 	ands.w	r5, r5, #6
 8004208:	d106      	bne.n	8004218 <_printf_common+0x48>
 800420a:	f104 0a19 	add.w	sl, r4, #25
 800420e:	68e3      	ldr	r3, [r4, #12]
 8004210:	6832      	ldr	r2, [r6, #0]
 8004212:	1a9b      	subs	r3, r3, r2
 8004214:	42ab      	cmp	r3, r5
 8004216:	dc26      	bgt.n	8004266 <_printf_common+0x96>
 8004218:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800421c:	1e13      	subs	r3, r2, #0
 800421e:	6822      	ldr	r2, [r4, #0]
 8004220:	bf18      	it	ne
 8004222:	2301      	movne	r3, #1
 8004224:	0692      	lsls	r2, r2, #26
 8004226:	d42b      	bmi.n	8004280 <_printf_common+0xb0>
 8004228:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800422c:	4649      	mov	r1, r9
 800422e:	4638      	mov	r0, r7
 8004230:	47c0      	blx	r8
 8004232:	3001      	adds	r0, #1
 8004234:	d01e      	beq.n	8004274 <_printf_common+0xa4>
 8004236:	6823      	ldr	r3, [r4, #0]
 8004238:	68e5      	ldr	r5, [r4, #12]
 800423a:	6832      	ldr	r2, [r6, #0]
 800423c:	f003 0306 	and.w	r3, r3, #6
 8004240:	2b04      	cmp	r3, #4
 8004242:	bf08      	it	eq
 8004244:	1aad      	subeq	r5, r5, r2
 8004246:	68a3      	ldr	r3, [r4, #8]
 8004248:	6922      	ldr	r2, [r4, #16]
 800424a:	bf0c      	ite	eq
 800424c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004250:	2500      	movne	r5, #0
 8004252:	4293      	cmp	r3, r2
 8004254:	bfc4      	itt	gt
 8004256:	1a9b      	subgt	r3, r3, r2
 8004258:	18ed      	addgt	r5, r5, r3
 800425a:	2600      	movs	r6, #0
 800425c:	341a      	adds	r4, #26
 800425e:	42b5      	cmp	r5, r6
 8004260:	d11a      	bne.n	8004298 <_printf_common+0xc8>
 8004262:	2000      	movs	r0, #0
 8004264:	e008      	b.n	8004278 <_printf_common+0xa8>
 8004266:	2301      	movs	r3, #1
 8004268:	4652      	mov	r2, sl
 800426a:	4649      	mov	r1, r9
 800426c:	4638      	mov	r0, r7
 800426e:	47c0      	blx	r8
 8004270:	3001      	adds	r0, #1
 8004272:	d103      	bne.n	800427c <_printf_common+0xac>
 8004274:	f04f 30ff 	mov.w	r0, #4294967295
 8004278:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800427c:	3501      	adds	r5, #1
 800427e:	e7c6      	b.n	800420e <_printf_common+0x3e>
 8004280:	18e1      	adds	r1, r4, r3
 8004282:	1c5a      	adds	r2, r3, #1
 8004284:	2030      	movs	r0, #48	; 0x30
 8004286:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800428a:	4422      	add	r2, r4
 800428c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004290:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004294:	3302      	adds	r3, #2
 8004296:	e7c7      	b.n	8004228 <_printf_common+0x58>
 8004298:	2301      	movs	r3, #1
 800429a:	4622      	mov	r2, r4
 800429c:	4649      	mov	r1, r9
 800429e:	4638      	mov	r0, r7
 80042a0:	47c0      	blx	r8
 80042a2:	3001      	adds	r0, #1
 80042a4:	d0e6      	beq.n	8004274 <_printf_common+0xa4>
 80042a6:	3601      	adds	r6, #1
 80042a8:	e7d9      	b.n	800425e <_printf_common+0x8e>
	...

080042ac <_printf_i>:
 80042ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042b0:	7e0f      	ldrb	r7, [r1, #24]
 80042b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80042b4:	2f78      	cmp	r7, #120	; 0x78
 80042b6:	4691      	mov	r9, r2
 80042b8:	4680      	mov	r8, r0
 80042ba:	460c      	mov	r4, r1
 80042bc:	469a      	mov	sl, r3
 80042be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80042c2:	d807      	bhi.n	80042d4 <_printf_i+0x28>
 80042c4:	2f62      	cmp	r7, #98	; 0x62
 80042c6:	d80a      	bhi.n	80042de <_printf_i+0x32>
 80042c8:	2f00      	cmp	r7, #0
 80042ca:	f000 80d8 	beq.w	800447e <_printf_i+0x1d2>
 80042ce:	2f58      	cmp	r7, #88	; 0x58
 80042d0:	f000 80a3 	beq.w	800441a <_printf_i+0x16e>
 80042d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80042d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80042dc:	e03a      	b.n	8004354 <_printf_i+0xa8>
 80042de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80042e2:	2b15      	cmp	r3, #21
 80042e4:	d8f6      	bhi.n	80042d4 <_printf_i+0x28>
 80042e6:	a101      	add	r1, pc, #4	; (adr r1, 80042ec <_printf_i+0x40>)
 80042e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80042ec:	08004345 	.word	0x08004345
 80042f0:	08004359 	.word	0x08004359
 80042f4:	080042d5 	.word	0x080042d5
 80042f8:	080042d5 	.word	0x080042d5
 80042fc:	080042d5 	.word	0x080042d5
 8004300:	080042d5 	.word	0x080042d5
 8004304:	08004359 	.word	0x08004359
 8004308:	080042d5 	.word	0x080042d5
 800430c:	080042d5 	.word	0x080042d5
 8004310:	080042d5 	.word	0x080042d5
 8004314:	080042d5 	.word	0x080042d5
 8004318:	08004465 	.word	0x08004465
 800431c:	08004389 	.word	0x08004389
 8004320:	08004447 	.word	0x08004447
 8004324:	080042d5 	.word	0x080042d5
 8004328:	080042d5 	.word	0x080042d5
 800432c:	08004487 	.word	0x08004487
 8004330:	080042d5 	.word	0x080042d5
 8004334:	08004389 	.word	0x08004389
 8004338:	080042d5 	.word	0x080042d5
 800433c:	080042d5 	.word	0x080042d5
 8004340:	0800444f 	.word	0x0800444f
 8004344:	682b      	ldr	r3, [r5, #0]
 8004346:	1d1a      	adds	r2, r3, #4
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	602a      	str	r2, [r5, #0]
 800434c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004350:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004354:	2301      	movs	r3, #1
 8004356:	e0a3      	b.n	80044a0 <_printf_i+0x1f4>
 8004358:	6820      	ldr	r0, [r4, #0]
 800435a:	6829      	ldr	r1, [r5, #0]
 800435c:	0606      	lsls	r6, r0, #24
 800435e:	f101 0304 	add.w	r3, r1, #4
 8004362:	d50a      	bpl.n	800437a <_printf_i+0xce>
 8004364:	680e      	ldr	r6, [r1, #0]
 8004366:	602b      	str	r3, [r5, #0]
 8004368:	2e00      	cmp	r6, #0
 800436a:	da03      	bge.n	8004374 <_printf_i+0xc8>
 800436c:	232d      	movs	r3, #45	; 0x2d
 800436e:	4276      	negs	r6, r6
 8004370:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004374:	485e      	ldr	r0, [pc, #376]	; (80044f0 <_printf_i+0x244>)
 8004376:	230a      	movs	r3, #10
 8004378:	e019      	b.n	80043ae <_printf_i+0x102>
 800437a:	680e      	ldr	r6, [r1, #0]
 800437c:	602b      	str	r3, [r5, #0]
 800437e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004382:	bf18      	it	ne
 8004384:	b236      	sxthne	r6, r6
 8004386:	e7ef      	b.n	8004368 <_printf_i+0xbc>
 8004388:	682b      	ldr	r3, [r5, #0]
 800438a:	6820      	ldr	r0, [r4, #0]
 800438c:	1d19      	adds	r1, r3, #4
 800438e:	6029      	str	r1, [r5, #0]
 8004390:	0601      	lsls	r1, r0, #24
 8004392:	d501      	bpl.n	8004398 <_printf_i+0xec>
 8004394:	681e      	ldr	r6, [r3, #0]
 8004396:	e002      	b.n	800439e <_printf_i+0xf2>
 8004398:	0646      	lsls	r6, r0, #25
 800439a:	d5fb      	bpl.n	8004394 <_printf_i+0xe8>
 800439c:	881e      	ldrh	r6, [r3, #0]
 800439e:	4854      	ldr	r0, [pc, #336]	; (80044f0 <_printf_i+0x244>)
 80043a0:	2f6f      	cmp	r7, #111	; 0x6f
 80043a2:	bf0c      	ite	eq
 80043a4:	2308      	moveq	r3, #8
 80043a6:	230a      	movne	r3, #10
 80043a8:	2100      	movs	r1, #0
 80043aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80043ae:	6865      	ldr	r5, [r4, #4]
 80043b0:	60a5      	str	r5, [r4, #8]
 80043b2:	2d00      	cmp	r5, #0
 80043b4:	bfa2      	ittt	ge
 80043b6:	6821      	ldrge	r1, [r4, #0]
 80043b8:	f021 0104 	bicge.w	r1, r1, #4
 80043bc:	6021      	strge	r1, [r4, #0]
 80043be:	b90e      	cbnz	r6, 80043c4 <_printf_i+0x118>
 80043c0:	2d00      	cmp	r5, #0
 80043c2:	d04d      	beq.n	8004460 <_printf_i+0x1b4>
 80043c4:	4615      	mov	r5, r2
 80043c6:	fbb6 f1f3 	udiv	r1, r6, r3
 80043ca:	fb03 6711 	mls	r7, r3, r1, r6
 80043ce:	5dc7      	ldrb	r7, [r0, r7]
 80043d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80043d4:	4637      	mov	r7, r6
 80043d6:	42bb      	cmp	r3, r7
 80043d8:	460e      	mov	r6, r1
 80043da:	d9f4      	bls.n	80043c6 <_printf_i+0x11a>
 80043dc:	2b08      	cmp	r3, #8
 80043de:	d10b      	bne.n	80043f8 <_printf_i+0x14c>
 80043e0:	6823      	ldr	r3, [r4, #0]
 80043e2:	07de      	lsls	r6, r3, #31
 80043e4:	d508      	bpl.n	80043f8 <_printf_i+0x14c>
 80043e6:	6923      	ldr	r3, [r4, #16]
 80043e8:	6861      	ldr	r1, [r4, #4]
 80043ea:	4299      	cmp	r1, r3
 80043ec:	bfde      	ittt	le
 80043ee:	2330      	movle	r3, #48	; 0x30
 80043f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80043f4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80043f8:	1b52      	subs	r2, r2, r5
 80043fa:	6122      	str	r2, [r4, #16]
 80043fc:	f8cd a000 	str.w	sl, [sp]
 8004400:	464b      	mov	r3, r9
 8004402:	aa03      	add	r2, sp, #12
 8004404:	4621      	mov	r1, r4
 8004406:	4640      	mov	r0, r8
 8004408:	f7ff fee2 	bl	80041d0 <_printf_common>
 800440c:	3001      	adds	r0, #1
 800440e:	d14c      	bne.n	80044aa <_printf_i+0x1fe>
 8004410:	f04f 30ff 	mov.w	r0, #4294967295
 8004414:	b004      	add	sp, #16
 8004416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800441a:	4835      	ldr	r0, [pc, #212]	; (80044f0 <_printf_i+0x244>)
 800441c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004420:	6829      	ldr	r1, [r5, #0]
 8004422:	6823      	ldr	r3, [r4, #0]
 8004424:	f851 6b04 	ldr.w	r6, [r1], #4
 8004428:	6029      	str	r1, [r5, #0]
 800442a:	061d      	lsls	r5, r3, #24
 800442c:	d514      	bpl.n	8004458 <_printf_i+0x1ac>
 800442e:	07df      	lsls	r7, r3, #31
 8004430:	bf44      	itt	mi
 8004432:	f043 0320 	orrmi.w	r3, r3, #32
 8004436:	6023      	strmi	r3, [r4, #0]
 8004438:	b91e      	cbnz	r6, 8004442 <_printf_i+0x196>
 800443a:	6823      	ldr	r3, [r4, #0]
 800443c:	f023 0320 	bic.w	r3, r3, #32
 8004440:	6023      	str	r3, [r4, #0]
 8004442:	2310      	movs	r3, #16
 8004444:	e7b0      	b.n	80043a8 <_printf_i+0xfc>
 8004446:	6823      	ldr	r3, [r4, #0]
 8004448:	f043 0320 	orr.w	r3, r3, #32
 800444c:	6023      	str	r3, [r4, #0]
 800444e:	2378      	movs	r3, #120	; 0x78
 8004450:	4828      	ldr	r0, [pc, #160]	; (80044f4 <_printf_i+0x248>)
 8004452:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004456:	e7e3      	b.n	8004420 <_printf_i+0x174>
 8004458:	0659      	lsls	r1, r3, #25
 800445a:	bf48      	it	mi
 800445c:	b2b6      	uxthmi	r6, r6
 800445e:	e7e6      	b.n	800442e <_printf_i+0x182>
 8004460:	4615      	mov	r5, r2
 8004462:	e7bb      	b.n	80043dc <_printf_i+0x130>
 8004464:	682b      	ldr	r3, [r5, #0]
 8004466:	6826      	ldr	r6, [r4, #0]
 8004468:	6961      	ldr	r1, [r4, #20]
 800446a:	1d18      	adds	r0, r3, #4
 800446c:	6028      	str	r0, [r5, #0]
 800446e:	0635      	lsls	r5, r6, #24
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	d501      	bpl.n	8004478 <_printf_i+0x1cc>
 8004474:	6019      	str	r1, [r3, #0]
 8004476:	e002      	b.n	800447e <_printf_i+0x1d2>
 8004478:	0670      	lsls	r0, r6, #25
 800447a:	d5fb      	bpl.n	8004474 <_printf_i+0x1c8>
 800447c:	8019      	strh	r1, [r3, #0]
 800447e:	2300      	movs	r3, #0
 8004480:	6123      	str	r3, [r4, #16]
 8004482:	4615      	mov	r5, r2
 8004484:	e7ba      	b.n	80043fc <_printf_i+0x150>
 8004486:	682b      	ldr	r3, [r5, #0]
 8004488:	1d1a      	adds	r2, r3, #4
 800448a:	602a      	str	r2, [r5, #0]
 800448c:	681d      	ldr	r5, [r3, #0]
 800448e:	6862      	ldr	r2, [r4, #4]
 8004490:	2100      	movs	r1, #0
 8004492:	4628      	mov	r0, r5
 8004494:	f7fb febc 	bl	8000210 <memchr>
 8004498:	b108      	cbz	r0, 800449e <_printf_i+0x1f2>
 800449a:	1b40      	subs	r0, r0, r5
 800449c:	6060      	str	r0, [r4, #4]
 800449e:	6863      	ldr	r3, [r4, #4]
 80044a0:	6123      	str	r3, [r4, #16]
 80044a2:	2300      	movs	r3, #0
 80044a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044a8:	e7a8      	b.n	80043fc <_printf_i+0x150>
 80044aa:	6923      	ldr	r3, [r4, #16]
 80044ac:	462a      	mov	r2, r5
 80044ae:	4649      	mov	r1, r9
 80044b0:	4640      	mov	r0, r8
 80044b2:	47d0      	blx	sl
 80044b4:	3001      	adds	r0, #1
 80044b6:	d0ab      	beq.n	8004410 <_printf_i+0x164>
 80044b8:	6823      	ldr	r3, [r4, #0]
 80044ba:	079b      	lsls	r3, r3, #30
 80044bc:	d413      	bmi.n	80044e6 <_printf_i+0x23a>
 80044be:	68e0      	ldr	r0, [r4, #12]
 80044c0:	9b03      	ldr	r3, [sp, #12]
 80044c2:	4298      	cmp	r0, r3
 80044c4:	bfb8      	it	lt
 80044c6:	4618      	movlt	r0, r3
 80044c8:	e7a4      	b.n	8004414 <_printf_i+0x168>
 80044ca:	2301      	movs	r3, #1
 80044cc:	4632      	mov	r2, r6
 80044ce:	4649      	mov	r1, r9
 80044d0:	4640      	mov	r0, r8
 80044d2:	47d0      	blx	sl
 80044d4:	3001      	adds	r0, #1
 80044d6:	d09b      	beq.n	8004410 <_printf_i+0x164>
 80044d8:	3501      	adds	r5, #1
 80044da:	68e3      	ldr	r3, [r4, #12]
 80044dc:	9903      	ldr	r1, [sp, #12]
 80044de:	1a5b      	subs	r3, r3, r1
 80044e0:	42ab      	cmp	r3, r5
 80044e2:	dcf2      	bgt.n	80044ca <_printf_i+0x21e>
 80044e4:	e7eb      	b.n	80044be <_printf_i+0x212>
 80044e6:	2500      	movs	r5, #0
 80044e8:	f104 0619 	add.w	r6, r4, #25
 80044ec:	e7f5      	b.n	80044da <_printf_i+0x22e>
 80044ee:	bf00      	nop
 80044f0:	080047b9 	.word	0x080047b9
 80044f4:	080047ca 	.word	0x080047ca

080044f8 <_sbrk_r>:
 80044f8:	b538      	push	{r3, r4, r5, lr}
 80044fa:	4d06      	ldr	r5, [pc, #24]	; (8004514 <_sbrk_r+0x1c>)
 80044fc:	2300      	movs	r3, #0
 80044fe:	4604      	mov	r4, r0
 8004500:	4608      	mov	r0, r1
 8004502:	602b      	str	r3, [r5, #0]
 8004504:	f7fc fb12 	bl	8000b2c <_sbrk>
 8004508:	1c43      	adds	r3, r0, #1
 800450a:	d102      	bne.n	8004512 <_sbrk_r+0x1a>
 800450c:	682b      	ldr	r3, [r5, #0]
 800450e:	b103      	cbz	r3, 8004512 <_sbrk_r+0x1a>
 8004510:	6023      	str	r3, [r4, #0]
 8004512:	bd38      	pop	{r3, r4, r5, pc}
 8004514:	20000138 	.word	0x20000138

08004518 <__sread>:
 8004518:	b510      	push	{r4, lr}
 800451a:	460c      	mov	r4, r1
 800451c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004520:	f000 f8a0 	bl	8004664 <_read_r>
 8004524:	2800      	cmp	r0, #0
 8004526:	bfab      	itete	ge
 8004528:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800452a:	89a3      	ldrhlt	r3, [r4, #12]
 800452c:	181b      	addge	r3, r3, r0
 800452e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004532:	bfac      	ite	ge
 8004534:	6563      	strge	r3, [r4, #84]	; 0x54
 8004536:	81a3      	strhlt	r3, [r4, #12]
 8004538:	bd10      	pop	{r4, pc}

0800453a <__swrite>:
 800453a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800453e:	461f      	mov	r7, r3
 8004540:	898b      	ldrh	r3, [r1, #12]
 8004542:	05db      	lsls	r3, r3, #23
 8004544:	4605      	mov	r5, r0
 8004546:	460c      	mov	r4, r1
 8004548:	4616      	mov	r6, r2
 800454a:	d505      	bpl.n	8004558 <__swrite+0x1e>
 800454c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004550:	2302      	movs	r3, #2
 8004552:	2200      	movs	r2, #0
 8004554:	f000 f868 	bl	8004628 <_lseek_r>
 8004558:	89a3      	ldrh	r3, [r4, #12]
 800455a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800455e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004562:	81a3      	strh	r3, [r4, #12]
 8004564:	4632      	mov	r2, r6
 8004566:	463b      	mov	r3, r7
 8004568:	4628      	mov	r0, r5
 800456a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800456e:	f000 b817 	b.w	80045a0 <_write_r>

08004572 <__sseek>:
 8004572:	b510      	push	{r4, lr}
 8004574:	460c      	mov	r4, r1
 8004576:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800457a:	f000 f855 	bl	8004628 <_lseek_r>
 800457e:	1c43      	adds	r3, r0, #1
 8004580:	89a3      	ldrh	r3, [r4, #12]
 8004582:	bf15      	itete	ne
 8004584:	6560      	strne	r0, [r4, #84]	; 0x54
 8004586:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800458a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800458e:	81a3      	strheq	r3, [r4, #12]
 8004590:	bf18      	it	ne
 8004592:	81a3      	strhne	r3, [r4, #12]
 8004594:	bd10      	pop	{r4, pc}

08004596 <__sclose>:
 8004596:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800459a:	f000 b813 	b.w	80045c4 <_close_r>
	...

080045a0 <_write_r>:
 80045a0:	b538      	push	{r3, r4, r5, lr}
 80045a2:	4d07      	ldr	r5, [pc, #28]	; (80045c0 <_write_r+0x20>)
 80045a4:	4604      	mov	r4, r0
 80045a6:	4608      	mov	r0, r1
 80045a8:	4611      	mov	r1, r2
 80045aa:	2200      	movs	r2, #0
 80045ac:	602a      	str	r2, [r5, #0]
 80045ae:	461a      	mov	r2, r3
 80045b0:	f7fc fa6b 	bl	8000a8a <_write>
 80045b4:	1c43      	adds	r3, r0, #1
 80045b6:	d102      	bne.n	80045be <_write_r+0x1e>
 80045b8:	682b      	ldr	r3, [r5, #0]
 80045ba:	b103      	cbz	r3, 80045be <_write_r+0x1e>
 80045bc:	6023      	str	r3, [r4, #0]
 80045be:	bd38      	pop	{r3, r4, r5, pc}
 80045c0:	20000138 	.word	0x20000138

080045c4 <_close_r>:
 80045c4:	b538      	push	{r3, r4, r5, lr}
 80045c6:	4d06      	ldr	r5, [pc, #24]	; (80045e0 <_close_r+0x1c>)
 80045c8:	2300      	movs	r3, #0
 80045ca:	4604      	mov	r4, r0
 80045cc:	4608      	mov	r0, r1
 80045ce:	602b      	str	r3, [r5, #0]
 80045d0:	f7fc fa77 	bl	8000ac2 <_close>
 80045d4:	1c43      	adds	r3, r0, #1
 80045d6:	d102      	bne.n	80045de <_close_r+0x1a>
 80045d8:	682b      	ldr	r3, [r5, #0]
 80045da:	b103      	cbz	r3, 80045de <_close_r+0x1a>
 80045dc:	6023      	str	r3, [r4, #0]
 80045de:	bd38      	pop	{r3, r4, r5, pc}
 80045e0:	20000138 	.word	0x20000138

080045e4 <_fstat_r>:
 80045e4:	b538      	push	{r3, r4, r5, lr}
 80045e6:	4d07      	ldr	r5, [pc, #28]	; (8004604 <_fstat_r+0x20>)
 80045e8:	2300      	movs	r3, #0
 80045ea:	4604      	mov	r4, r0
 80045ec:	4608      	mov	r0, r1
 80045ee:	4611      	mov	r1, r2
 80045f0:	602b      	str	r3, [r5, #0]
 80045f2:	f7fc fa72 	bl	8000ada <_fstat>
 80045f6:	1c43      	adds	r3, r0, #1
 80045f8:	d102      	bne.n	8004600 <_fstat_r+0x1c>
 80045fa:	682b      	ldr	r3, [r5, #0]
 80045fc:	b103      	cbz	r3, 8004600 <_fstat_r+0x1c>
 80045fe:	6023      	str	r3, [r4, #0]
 8004600:	bd38      	pop	{r3, r4, r5, pc}
 8004602:	bf00      	nop
 8004604:	20000138 	.word	0x20000138

08004608 <_isatty_r>:
 8004608:	b538      	push	{r3, r4, r5, lr}
 800460a:	4d06      	ldr	r5, [pc, #24]	; (8004624 <_isatty_r+0x1c>)
 800460c:	2300      	movs	r3, #0
 800460e:	4604      	mov	r4, r0
 8004610:	4608      	mov	r0, r1
 8004612:	602b      	str	r3, [r5, #0]
 8004614:	f7fc fa71 	bl	8000afa <_isatty>
 8004618:	1c43      	adds	r3, r0, #1
 800461a:	d102      	bne.n	8004622 <_isatty_r+0x1a>
 800461c:	682b      	ldr	r3, [r5, #0]
 800461e:	b103      	cbz	r3, 8004622 <_isatty_r+0x1a>
 8004620:	6023      	str	r3, [r4, #0]
 8004622:	bd38      	pop	{r3, r4, r5, pc}
 8004624:	20000138 	.word	0x20000138

08004628 <_lseek_r>:
 8004628:	b538      	push	{r3, r4, r5, lr}
 800462a:	4d07      	ldr	r5, [pc, #28]	; (8004648 <_lseek_r+0x20>)
 800462c:	4604      	mov	r4, r0
 800462e:	4608      	mov	r0, r1
 8004630:	4611      	mov	r1, r2
 8004632:	2200      	movs	r2, #0
 8004634:	602a      	str	r2, [r5, #0]
 8004636:	461a      	mov	r2, r3
 8004638:	f7fc fa6a 	bl	8000b10 <_lseek>
 800463c:	1c43      	adds	r3, r0, #1
 800463e:	d102      	bne.n	8004646 <_lseek_r+0x1e>
 8004640:	682b      	ldr	r3, [r5, #0]
 8004642:	b103      	cbz	r3, 8004646 <_lseek_r+0x1e>
 8004644:	6023      	str	r3, [r4, #0]
 8004646:	bd38      	pop	{r3, r4, r5, pc}
 8004648:	20000138 	.word	0x20000138

0800464c <__malloc_lock>:
 800464c:	4801      	ldr	r0, [pc, #4]	; (8004654 <__malloc_lock+0x8>)
 800464e:	f7ff bb1d 	b.w	8003c8c <__retarget_lock_acquire_recursive>
 8004652:	bf00      	nop
 8004654:	2000012c 	.word	0x2000012c

08004658 <__malloc_unlock>:
 8004658:	4801      	ldr	r0, [pc, #4]	; (8004660 <__malloc_unlock+0x8>)
 800465a:	f7ff bb18 	b.w	8003c8e <__retarget_lock_release_recursive>
 800465e:	bf00      	nop
 8004660:	2000012c 	.word	0x2000012c

08004664 <_read_r>:
 8004664:	b538      	push	{r3, r4, r5, lr}
 8004666:	4d07      	ldr	r5, [pc, #28]	; (8004684 <_read_r+0x20>)
 8004668:	4604      	mov	r4, r0
 800466a:	4608      	mov	r0, r1
 800466c:	4611      	mov	r1, r2
 800466e:	2200      	movs	r2, #0
 8004670:	602a      	str	r2, [r5, #0]
 8004672:	461a      	mov	r2, r3
 8004674:	f7fc f9ec 	bl	8000a50 <_read>
 8004678:	1c43      	adds	r3, r0, #1
 800467a:	d102      	bne.n	8004682 <_read_r+0x1e>
 800467c:	682b      	ldr	r3, [r5, #0]
 800467e:	b103      	cbz	r3, 8004682 <_read_r+0x1e>
 8004680:	6023      	str	r3, [r4, #0]
 8004682:	bd38      	pop	{r3, r4, r5, pc}
 8004684:	20000138 	.word	0x20000138

08004688 <_init>:
 8004688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800468a:	bf00      	nop
 800468c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800468e:	bc08      	pop	{r3}
 8004690:	469e      	mov	lr, r3
 8004692:	4770      	bx	lr

08004694 <_fini>:
 8004694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004696:	bf00      	nop
 8004698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800469a:	bc08      	pop	{r3}
 800469c:	469e      	mov	lr, r3
 800469e:	4770      	bx	lr
